// Licensed under the Apache-2.0 license

use crate::common::PQC_KEY_TYPE;
use crate::common::{
    execute_dpe_cmd, generate_test_x509_cert, get_ecc_fmc_alias_cert, get_rt_alias_cert,
    run_rt_test, run_rt_test_pqc, DpeResult, RuntimeTestArgs, TEST_LABEL,
};
use caliptra_builder::firmware::{APP_WITH_UART, FMC_WITH_UART};
use caliptra_builder::ImageOptions;
use caliptra_common::mailbox_api::{
    CommandId, GetIdevCertResp, GetIdevEcc384CertReq, GetIdevInfoResp, GetIdevMldsa87CertReq,
    GetLdevCertResp, GetRtAliasCertResp, MailboxReq, MailboxReqHeader, StashMeasurementReq,
};
use caliptra_error::CaliptraError;
use caliptra_hw_model::{BootParams, DefaultHwModel, Fuses, HwModel, InitParams};
use caliptra_image_types::FwVerificationPqcKeyType;
use dpe::{
    commands::{CertifyKeyCmd, CertifyKeyFlags, Command, DeriveContextCmd, DeriveContextFlags},
    context::ContextHandle,
    response::{CertifyKeyResp, Response},
};
use openssl::{
    asn1::Asn1Time,
    bn::BigNum,
    ec::{EcGroup, EcKey},
    ecdsa::EcdsaSig,
    nid::Nid,
    pkey::PKey,
    stack::Stack,
    x509::{
        store::X509StoreBuilder, verify::X509VerifyFlags, X509StoreContext, X509VerifyResult, X509,
    },
};
use zerocopy::{FromBytes, IntoBytes};

#[test]
// Check if the owner and vendor cert validity dates are present in RT Alias cert
fn test_rt_cert_with_custom_dates() {
    const VENDOR_CONFIG: (&str, &str) = ("20250101000000Z", "20260101000000Z");
    const OWNER_CONFIG: (&str, &str) = ("20270101000000Z", "20280101000000Z");

    for pqc_key_type in PQC_KEY_TYPE.iter() {
        let mut opts = ImageOptions {
            pqc_key_type: *pqc_key_type,
            ..Default::default()
        };

        opts.vendor_config
            .not_before
            .copy_from_slice(VENDOR_CONFIG.0.as_bytes());

        opts.vendor_config
            .not_after
            .copy_from_slice(VENDOR_CONFIG.1.as_bytes());

        let mut own_config = opts.owner_config.unwrap();

        own_config
            .not_before
            .copy_from_slice(OWNER_CONFIG.0.as_bytes());
        own_config
            .not_after
            .copy_from_slice(OWNER_CONFIG.1.as_bytes());

        opts.owner_config = Some(own_config);

        let args = RuntimeTestArgs {
            test_image_options: Some(opts),
            ..Default::default()
        };
        let mut model = run_rt_test_pqc(args, *pqc_key_type);

        let payload = MailboxReqHeader {
            chksum: caliptra_common::checksum::calc_checksum(
                u32::from(CommandId::GET_RT_ALIAS_ECC384_CERT),
                &[],
            ),
        };
        let resp = model
            .mailbox_execute(
                u32::from(CommandId::GET_RT_ALIAS_ECC384_CERT),
                payload.as_bytes(),
            )
            .unwrap()
            .unwrap();
        assert!(resp.len() <= std::mem::size_of::<GetRtAliasCertResp>());
        let mut rt_resp = GetRtAliasCertResp::default();
        rt_resp.as_mut_bytes()[..resp.len()].copy_from_slice(&resp);

        let rt_cert: X509 = X509::from_der(&rt_resp.data[..rt_resp.data_size as usize]).unwrap();

        let not_before: Asn1Time = Asn1Time::from_str(OWNER_CONFIG.0).unwrap();
        let not_after: Asn1Time = Asn1Time::from_str(OWNER_CONFIG.1).unwrap();

        assert!(rt_cert.not_before() == not_before);
        assert!(rt_cert.not_after() == not_after);
    }
}

#[test]
fn test_idev_id_ecc384_cert() {
    let mut model = run_rt_test(RuntimeTestArgs::default());

    // generate 48 byte ECDSA key pair
    let ec_group = EcGroup::from_curve_name(Nid::SECP384R1).unwrap();
    let ec_key = PKey::from_ec_key(EcKey::generate(&ec_group).unwrap()).unwrap();

    let cert = generate_test_x509_cert(ec_key.clone());
    assert!(cert.verify(&ec_key).unwrap());

    // Extract the r and s values of the signature
    let sig_bytes = cert.signature().as_slice();
    let signature = EcdsaSig::from_der(sig_bytes).unwrap();
    let signature_r: [u8; 48] = signature.r().to_vec_padded(48).unwrap().try_into().unwrap();
    let signature_s: [u8; 48] = signature.s().to_vec_padded(48).unwrap().try_into().unwrap();

    // Extract tbs from cert
    let mut tbs = [0u8; GetIdevEcc384CertReq::DATA_MAX_SIZE];
    let cert_der_vec = cert.to_der().unwrap();
    let cert_der = cert_der_vec.as_bytes();
    // skip first 4 outer sequence bytes
    let tbs_offset = 4;
    // this value is hard-coded and will need to be changed if the above x509 encoding is ever changed
    // you can change it by calling asn1parse on the byte dump of the x509 cert, and finding the size of the TbsCertificate portion
    let tbs_size = 223;
    tbs[..tbs_size].copy_from_slice(&cert_der[tbs_offset..tbs_offset + tbs_size]);

    let mut cmd = MailboxReq::GetIdevEcc384Cert(GetIdevEcc384CertReq {
        hdr: MailboxReqHeader { chksum: 0 },
        tbs,
        signature_r,
        signature_s,
        tbs_size: tbs_size as u32,
    });
    cmd.populate_chksum().unwrap();

    let resp = model
        .mailbox_execute(
            u32::from(CommandId::GET_IDEV_ECC384_CERT),
            cmd.as_bytes().unwrap(),
        )
        .unwrap()
        .expect("We expected a response");

    assert!(resp.len() <= std::mem::size_of::<GetIdevCertResp>());
    let mut cert = GetIdevCertResp::default();
    cert.as_mut_bytes()[..resp.len()].copy_from_slice(&resp);

    assert!(caliptra_common::checksum::verify_checksum(
        cert.hdr.chksum,
        0x0,
        &resp[core::mem::size_of_val(&cert.hdr.chksum)..],
    ));

    assert!(tbs_size < cert.data_size as usize);
    let idev_cert = X509::from_der(&cert.data[..cert.data_size as usize]).unwrap();
    assert!(idev_cert.verify(&ec_key).unwrap());
}

// [TODO][CAP2]: Verify the IDEV MLDSA cert and generate signature and tbs instead of hard-coding.
#[test]
fn test_idev_id_mldsa87_cert() {
    let mut model = run_rt_test(RuntimeTestArgs::default());
    const TBS_SIZE: usize = 2820;
    let tbs: [u8; TBS_SIZE] = [
        0x00, 0x00, 0x30, 0x82, 0x01, 0x3E, 0x02, 0x01, 0x00, 0x30, 0x69, 0x31, 0x1C, 0x30, 0x1A,
        0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x13, 0x43, 0x61, 0x6C, 0x69, 0x70, 0x74, 0x72, 0x61,
        0x20, 0x31, 0x2E, 0x30, 0x20, 0x49, 0x44, 0x65, 0x76, 0x49, 0x44, 0x31, 0x49, 0x30, 0x47,
        0x06, 0x03, 0x55, 0x04, 0x05, 0x13, 0x40, 0x46, 0x34, 0x30, 0x32, 0x42, 0x41, 0x43, 0x37,
        0x33, 0x37, 0x37, 0x46, 0x38, 0x36, 0x32, 0x46, 0x43, 0x42, 0x44, 0x45, 0x32, 0x34, 0x31,
        0x41, 0x31, 0x36, 0x41, 0x34, 0x45, 0x39, 0x35, 0x45, 0x46, 0x43, 0x33, 0x34, 0x32, 0x30,
        0x30, 0x45, 0x36, 0x45, 0x38, 0x36, 0x37, 0x38, 0x35, 0x31, 0x38, 0x31, 0x32, 0x42, 0x35,
        0x45, 0x38, 0x38, 0x46, 0x33, 0x30, 0x43, 0x32, 0x34, 0x31, 0x36, 0x30, 0x76, 0x30, 0x10,
        0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02, 0x01, 0x06, 0x05, 0x2B, 0x81, 0x04, 0x00,
        0x22, 0x04, 0x82, 0x0A, 0x20, 0x67, 0x98, 0x15, 0xFE, 0xF9, 0x01, 0x90, 0x94, 0x3C, 0xDC,
        0x31, 0xB6, 0x70, 0xCF, 0xF4, 0x12, 0x4E, 0x22, 0xAD, 0xA8, 0x66, 0x20, 0x66, 0x76, 0x5C,
        0xB3, 0x9C, 0x1B, 0xD8, 0x62, 0x90, 0xAC, 0xA4, 0x3C, 0x20, 0xFC, 0xD4, 0xCF, 0x2D, 0x6F,
        0x7A, 0xAC, 0xC5, 0xCA, 0x58, 0xC4, 0xE0, 0x2E, 0x39, 0x5F, 0xC4, 0x37, 0x4A, 0xF8, 0x58,
        0xA2, 0xF0, 0x78, 0xA5, 0x30, 0xCB, 0x1D, 0xE5, 0xCE, 0xFD, 0x5E, 0xD8, 0xEC, 0x98, 0xCF,
        0xC4, 0xA7, 0x87, 0xA7, 0x46, 0xF7, 0x86, 0x5D, 0x2C, 0xC8, 0xFF, 0x2E, 0xC8, 0xF2, 0xF1,
        0x9B, 0xE6, 0xDF, 0xB7, 0x6E, 0xF1, 0xA7, 0xFC, 0xEB, 0xD6, 0x85, 0xD4, 0x92, 0xC9, 0x77,
        0x73, 0x16, 0x28, 0x1B, 0x32, 0xD9, 0xDA, 0xEB, 0xFB, 0x2A, 0x75, 0xEE, 0x43, 0x31, 0x7F,
        0xA6, 0x69, 0x42, 0xC3, 0xF8, 0xEF, 0xCC, 0x84, 0x9C, 0xD2, 0xD4, 0xA7, 0xC5, 0x72, 0xBB,
        0x85, 0xA9, 0x99, 0x21, 0x1E, 0x2B, 0x48, 0x89, 0x77, 0x7D, 0xA4, 0x9E, 0xEF, 0x2F, 0x0A,
        0x5D, 0x5A, 0x77, 0x3F, 0x08, 0x2E, 0x35, 0x7E, 0xCF, 0x86, 0x92, 0x3A, 0x68, 0xDE, 0x95,
        0xDF, 0x21, 0x4F, 0xB7, 0x6E, 0x45, 0xC8, 0x3B, 0x53, 0x06, 0x31, 0xC9, 0x01, 0x14, 0x09,
        0xAD, 0xAC, 0x33, 0x06, 0xB4, 0x6A, 0xF9, 0x38, 0x47, 0x1F, 0xA2, 0x03, 0x84, 0x52, 0xA5,
        0xDB, 0x22, 0x4C, 0x0E, 0x7E, 0x27, 0xCC, 0x05, 0x7E, 0x60, 0x4D, 0x94, 0x40, 0x5B, 0xCA,
        0xEF, 0x02, 0x1C, 0x78, 0xC1, 0xC8, 0xDB, 0x8E, 0x7D, 0x28, 0xB2, 0x64, 0x7F, 0x2D, 0x0F,
        0x10, 0x32, 0x0B, 0x96, 0x38, 0x02, 0x0D, 0x09, 0x97, 0x39, 0xD7, 0x2D, 0x44, 0x30, 0x45,
        0x9A, 0x31, 0x16, 0x1A, 0x47, 0x65, 0x24, 0xCA, 0x40, 0xA3, 0xD4, 0x7D, 0x87, 0x07, 0x88,
        0xB6, 0x1D, 0x16, 0x51, 0x05, 0xDE, 0x9E, 0xD8, 0x4A, 0xEF, 0x2B, 0xF4, 0x6D, 0xE8, 0xBA,
        0xE9, 0x9A, 0x38, 0xE5, 0xE4, 0xEA, 0x56, 0xE9, 0x8B, 0xB1, 0x08, 0xE5, 0xF7, 0x96, 0x42,
        0x96, 0x48, 0x31, 0xF5, 0x59, 0x79, 0xA2, 0x62, 0xB0, 0x7E, 0x66, 0x2E, 0xA5, 0x82, 0xA7,
        0x8A, 0x44, 0xC1, 0x64, 0x1E, 0x98, 0xAE, 0xCF, 0x81, 0x21, 0xE7, 0xF7, 0xA4, 0x78, 0x1A,
        0x80, 0xE5, 0x22, 0x6E, 0xC5, 0x4A, 0x0C, 0xFC, 0xDA, 0x7C, 0xC9, 0xA2, 0xB3, 0x4C, 0x8D,
        0x48, 0x3C, 0x37, 0x34, 0xD0, 0x01, 0x48, 0x54, 0x08, 0x40, 0xE9, 0x4E, 0x2C, 0x3B, 0xB9,
        0xDE, 0x75, 0xD9, 0xE7, 0xF7, 0x03, 0xC7, 0x05, 0xC8, 0xC0, 0xDE, 0xD1, 0xE9, 0x36, 0x3C,
        0x0F, 0xA1, 0xA4, 0x58, 0x3A, 0x56, 0x5B, 0x30, 0x12, 0x69, 0xD8, 0x2A, 0xD2, 0x6E, 0x6A,
        0x93, 0x60, 0xF5, 0x7C, 0x38, 0xBC, 0x20, 0xC8, 0xD8, 0xFA, 0xC2, 0x33, 0x59, 0x21, 0x77,
        0x06, 0x6B, 0x4E, 0xAB, 0x19, 0x1C, 0xFB, 0x9A, 0x42, 0x9C, 0x18, 0x01, 0xF8, 0x1A, 0x41,
        0x9E, 0x10, 0xD4, 0xF3, 0x84, 0x97, 0x95, 0xC1, 0xCC, 0x67, 0xA4, 0xF5, 0x5E, 0x7A, 0x30,
        0xBE, 0x83, 0x9C, 0x86, 0xC2, 0xF5, 0x67, 0xEF, 0x03, 0x13, 0xB2, 0x1B, 0xDE, 0x3A, 0xA9,
        0x08, 0x94, 0x0F, 0xE8, 0xBA, 0xE2, 0xAF, 0x84, 0x3B, 0x9D, 0xDA, 0x97, 0x67, 0x62, 0x6A,
        0x53, 0x69, 0x94, 0xCC, 0xDB, 0x73, 0xB4, 0x85, 0xFA, 0x69, 0x56, 0x29, 0x9A, 0x11, 0xFE,
        0x26, 0x76, 0x7C, 0xB1, 0x8D, 0x22, 0x28, 0x0C, 0x0C, 0x0A, 0xC6, 0x6F, 0x4E, 0x67, 0x6B,
        0x8D, 0xBF, 0xC3, 0x8E, 0xE5, 0x88, 0x19, 0xA8, 0x26, 0x15, 0x01, 0x1F, 0xD7, 0x27, 0x4C,
        0x8C, 0x35, 0x06, 0xF6, 0xD6, 0xD4, 0x3D, 0x8C, 0x09, 0x40, 0x8F, 0x4E, 0x64, 0x70, 0xB2,
        0xEC, 0x16, 0x8C, 0xFF, 0x64, 0x3D, 0x88, 0x55, 0x00, 0xB2, 0x91, 0x74, 0xA0, 0xCC, 0x3D,
        0x90, 0xA1, 0xC6, 0xB0, 0x34, 0xF1, 0xF4, 0x8C, 0x0C, 0xFD, 0x0A, 0x75, 0x89, 0x85, 0x17,
        0xFD, 0x8A, 0x1A, 0x4F, 0xA2, 0xA3, 0x55, 0x12, 0xB8, 0x60, 0xCE, 0xA3, 0x4E, 0x29, 0xA7,
        0x69, 0x2F, 0xDB, 0x30, 0x97, 0x00, 0x4E, 0xAF, 0xAF, 0xEC, 0x2B, 0x52, 0x0D, 0x41, 0x81,
        0xB2, 0x32, 0xB5, 0xF9, 0x88, 0x37, 0x02, 0x23, 0x21, 0x95, 0xFE, 0xE5, 0x8A, 0xE6, 0x36,
        0x4E, 0x1D, 0x27, 0x03, 0x27, 0x39, 0x9B, 0x85, 0xA7, 0xFD, 0xB6, 0x11, 0x0E, 0x7A, 0xCA,
        0xBC, 0x5E, 0x2C, 0x9B, 0x11, 0x0D, 0x6C, 0xF8, 0x39, 0xE3, 0x5D, 0xA7, 0x08, 0xAE, 0x6B,
        0xA7, 0x35, 0x96, 0x5A, 0x9B, 0xCF, 0xD1, 0x59, 0x29, 0xE1, 0x5B, 0x64, 0x20, 0x81, 0xCD,
        0x00, 0x34, 0x5F, 0xAE, 0xB5, 0x8F, 0x5F, 0x54, 0x6F, 0x12, 0x99, 0xFF, 0xCC, 0x75, 0x99,
        0xAF, 0xFC, 0x42, 0x12, 0xC2, 0xF4, 0x9A, 0xA5, 0xB8, 0x86, 0x32, 0xF4, 0xB1, 0x9E, 0xA0,
        0x72, 0xD4, 0x0E, 0xF6, 0x99, 0xF7, 0xDB, 0x50, 0xC9, 0x58, 0xA6, 0x20, 0x9C, 0xB2, 0x01,
        0x56, 0x27, 0x2A, 0x92, 0x94, 0x4C, 0xFC, 0xCE, 0xBE, 0xFD, 0x16, 0x50, 0x74, 0x07, 0x3C,
        0x70, 0x69, 0x88, 0xAB, 0x8B, 0x45, 0x7D, 0xAC, 0xDA, 0x42, 0xBF, 0x26, 0xAD, 0x5F, 0xED,
        0xBB, 0x5E, 0x2B, 0x2B, 0x59, 0xA4, 0xFC, 0x9E, 0xBA, 0xAA, 0x0F, 0xE7, 0x43, 0xF0, 0x55,
        0x11, 0xBD, 0xCD, 0xCC, 0x5C, 0xDC, 0x6D, 0xC1, 0x2B, 0x69, 0xB0, 0xB0, 0xFD, 0x4B, 0x5B,
        0x41, 0x57, 0x7E, 0x15, 0x77, 0xA0, 0x9D, 0xA9, 0xC3, 0x33, 0x23, 0xC3, 0x8D, 0xFB, 0x13,
        0xB4, 0x54, 0x15, 0xCA, 0xB2, 0x1B, 0xA4, 0xFD, 0xD5, 0x63, 0xE0, 0xD8, 0xFE, 0x39, 0xEC,
        0x7D, 0x52, 0xE5, 0xA9, 0xBB, 0xE4, 0x41, 0xFD, 0x60, 0xB0, 0x50, 0x8F, 0x5F, 0xEC, 0x84,
        0x8B, 0xF5, 0xBE, 0x1B, 0x8A, 0xDF, 0xE2, 0xB5, 0x69, 0xF8, 0x57, 0x3B, 0x57, 0x0D, 0xA1,
        0x26, 0xCF, 0x22, 0xA1, 0xFD, 0x51, 0xF8, 0xE8, 0xAA, 0x46, 0x4A, 0x01, 0x24, 0xAE, 0xFF,
        0x66, 0xC8, 0xB0, 0xD3, 0xCA, 0x75, 0x17, 0xDD, 0x04, 0x60, 0x51, 0x78, 0x41, 0xB3, 0x40,
        0x07, 0x7D, 0x0B, 0x67, 0x34, 0xAC, 0x4C, 0xB0, 0x38, 0x18, 0x5C, 0xE6, 0xA5, 0x5B, 0x79,
        0xDA, 0x27, 0xA8, 0x7F, 0xE6, 0x3B, 0x9B, 0xED, 0x82, 0x31, 0xAC, 0x5A, 0x55, 0x18, 0xB4,
        0x9D, 0xDE, 0xF2, 0x52, 0x8E, 0xCD, 0x44, 0xBF, 0xBB, 0xF6, 0x9D, 0x71, 0x61, 0x28, 0xFC,
        0x5B, 0xD0, 0xEC, 0x7A, 0x32, 0xC2, 0x73, 0xC4, 0x4F, 0xB3, 0x82, 0x7A, 0xF9, 0xE9, 0x57,
        0x05, 0x4E, 0x4C, 0x10, 0xC6, 0xF8, 0x15, 0xEC, 0x71, 0xE2, 0x52, 0x57, 0x5B, 0x04, 0x39,
        0xAD, 0x89, 0x0D, 0x14, 0x45, 0xE0, 0xBA, 0x63, 0xD1, 0x8C, 0xB6, 0x9D, 0x06, 0xA8, 0xC6,
        0xC9, 0xC8, 0x9F, 0x58, 0x60, 0x83, 0xC9, 0xF1, 0x25, 0xAD, 0x23, 0xE7, 0x06, 0x7F, 0x37,
        0x49, 0x67, 0x95, 0xBB, 0xCC, 0x31, 0xA1, 0x9D, 0xA9, 0x99, 0xF8, 0xB1, 0x84, 0xCA, 0x42,
        0xEC, 0x86, 0xFC, 0x09, 0x79, 0xC4, 0x31, 0xAA, 0x56, 0x53, 0xB9, 0xC9, 0xA8, 0xBA, 0x6F,
        0xF7, 0x40, 0x97, 0x3B, 0x9D, 0x98, 0x5C, 0xD9, 0xC3, 0xDC, 0xEF, 0x5D, 0x9A, 0xFA, 0x0E,
        0x2A, 0x47, 0x1F, 0xF3, 0x5C, 0xAD, 0x62, 0xC1, 0x99, 0x2D, 0xEE, 0xC0, 0x5D, 0x19, 0xAD,
        0x64, 0x55, 0x56, 0xD6, 0x49, 0x72, 0x80, 0x03, 0x37, 0xC9, 0x80, 0x5F, 0x36, 0x6D, 0xAA,
        0x6E, 0xA6, 0xDD, 0x2F, 0x7E, 0x16, 0x1C, 0x15, 0x46, 0x6A, 0xA9, 0xD6, 0xC1, 0x9B, 0x14,
        0x59, 0xB4, 0x73, 0xB2, 0xA2, 0x24, 0xA2, 0xF4, 0x84, 0x43, 0xBB, 0xC8, 0x64, 0xE9, 0x74,
        0x51, 0xF5, 0xEF, 0x76, 0x07, 0x79, 0x13, 0x4A, 0x7A, 0x17, 0x27, 0x0A, 0xFD, 0x29, 0x22,
        0x6C, 0x7E, 0x9C, 0x77, 0x8B, 0x8C, 0x65, 0x3D, 0x02, 0x57, 0x5D, 0x34, 0x24, 0x83, 0x8D,
        0x55, 0x4F, 0x28, 0x72, 0x34, 0xBC, 0x00, 0x58, 0x85, 0x73, 0x12, 0x13, 0x67, 0xD7, 0xE0,
        0x9B, 0x1C, 0x78, 0x5F, 0x55, 0xB6, 0x3D, 0xD5, 0x36, 0xC1, 0x9F, 0x26, 0x25, 0x44, 0x3A,
        0x00, 0x3B, 0x0C, 0x11, 0xF3, 0x29, 0xCF, 0x69, 0x3B, 0xD0, 0x89, 0xD4, 0x22, 0xDD, 0x95,
        0x6D, 0x8C, 0x3A, 0x61, 0x27, 0x1B, 0xAD, 0x4F, 0x1F, 0xE0, 0x6C, 0xFA, 0xF0, 0xC4, 0xE4,
        0x33, 0xFE, 0x4D, 0x8B, 0xF1, 0x27, 0xCB, 0x82, 0x77, 0x92, 0x96, 0x6E, 0xD5, 0xDD, 0xFA,
        0xC8, 0x9D, 0xF8, 0x91, 0x47, 0x03, 0xA4, 0xB0, 0x33, 0xBD, 0x27, 0x19, 0x4A, 0x01, 0x15,
        0x18, 0xC5, 0x5B, 0xF1, 0xC5, 0x99, 0x34, 0x4C, 0x00, 0x49, 0x72, 0xE2, 0x30, 0xD9, 0xFC,
        0xCE, 0xB3, 0x93, 0xED, 0x58, 0x3E, 0xA1, 0xD7, 0x8B, 0x9B, 0x38, 0xBB, 0x3E, 0xF3, 0x5F,
        0x10, 0x07, 0xB8, 0x11, 0xC3, 0x57, 0x11, 0x99, 0xD8, 0x4A, 0x05, 0x2D, 0xF5, 0x44, 0x48,
        0xB8, 0xB3, 0x7A, 0x58, 0x85, 0xD0, 0x9E, 0x00, 0x47, 0xFB, 0xDC, 0xB3, 0xC6, 0x53, 0xAE,
        0xE8, 0x24, 0x22, 0xD7, 0x82, 0x24, 0x3D, 0x16, 0xFF, 0x7C, 0x58, 0xC0, 0xA6, 0xF5, 0x99,
        0x8E, 0x9D, 0x31, 0x48, 0x35, 0x6F, 0x48, 0x90, 0x49, 0x17, 0x38, 0x15, 0x24, 0xB2, 0xE8,
        0xB3, 0x41, 0xA7, 0x56, 0x30, 0x5B, 0xF1, 0x1F, 0xA4, 0x97, 0xAF, 0xCC, 0xF6, 0xCC, 0xB7,
        0xFE, 0x06, 0x77, 0xA4, 0x1D, 0xD9, 0x6C, 0x18, 0x33, 0x3A, 0x81, 0xAF, 0x81, 0x81, 0x63,
        0xCA, 0xA8, 0x86, 0x1D, 0xEB, 0xDC, 0x76, 0x2A, 0xD6, 0xFA, 0xE8, 0xE2, 0x6D, 0x06, 0x23,
        0x11, 0x20, 0x2B, 0x7A, 0x7E, 0xDD, 0x7D, 0xD0, 0x16, 0xFC, 0x55, 0xBC, 0x01, 0x59, 0x89,
        0x09, 0x75, 0xA8, 0xCE, 0x23, 0xBE, 0x19, 0x80, 0x68, 0x13, 0xD7, 0x1F, 0x59, 0x77, 0x1F,
        0x5F, 0x3C, 0xDD, 0x1A, 0x12, 0xAA, 0xC7, 0x76, 0xC1, 0xDA, 0xAC, 0x0F, 0x5D, 0x4D, 0xBD,
        0x4F, 0x5A, 0x8F, 0x17, 0x05, 0xDC, 0x47, 0x9B, 0xF6, 0x18, 0xA6, 0x97, 0xF1, 0x96, 0xC8,
        0x50, 0xED, 0x3C, 0xC7, 0xA1, 0x70, 0x95, 0x3C, 0x74, 0xE5, 0x81, 0x14, 0xFB, 0x2B, 0x76,
        0xF5, 0x1E, 0x44, 0xEE, 0xDD, 0x4E, 0x7F, 0x78, 0x75, 0x5D, 0xFE, 0x43, 0x2C, 0x9D, 0x33,
        0xF4, 0xF5, 0x68, 0x61, 0x34, 0xBE, 0x6C, 0x3F, 0xF1, 0x82, 0xBD, 0x41, 0x8D, 0x59, 0x5B,
        0x68, 0xDE, 0x30, 0xCD, 0x62, 0xF1, 0xAB, 0x35, 0x56, 0xDD, 0xD3, 0x37, 0xCE, 0x51, 0x59,
        0xC6, 0x3D, 0xD6, 0xBD, 0xC0, 0x3E, 0x1E, 0xC3, 0x32, 0x77, 0xCF, 0x39, 0xD8, 0xB7, 0x59,
        0x52, 0x2D, 0xE6, 0xD5, 0xD7, 0x73, 0x46, 0xEE, 0x63, 0x26, 0xF4, 0xB5, 0xAD, 0x70, 0xB5,
        0xDE, 0xA6, 0xFF, 0x0B, 0x07, 0x26, 0xE8, 0x88, 0xA2, 0x0D, 0x59, 0xA1, 0x56, 0x08, 0x30,
        0x4E, 0x08, 0x27, 0xA1, 0x54, 0xCE, 0x27, 0xD5, 0xA0, 0xB4, 0x58, 0x49, 0xC6, 0x4F, 0xEC,
        0xF2, 0xC8, 0x8C, 0x26, 0xBC, 0x93, 0xD5, 0x78, 0xFC, 0x95, 0x49, 0xFB, 0xA0, 0x23, 0xF9,
        0x41, 0x01, 0x33, 0x66, 0xC2, 0xDD, 0xE8, 0xF3, 0x28, 0x56, 0xCE, 0x73, 0xE6, 0xDE, 0xF9,
        0x30, 0x73, 0x6F, 0x82, 0x99, 0xBF, 0x63, 0x10, 0x2D, 0x8F, 0x1F, 0xB3, 0x00, 0x96, 0x43,
        0xBB, 0x51, 0x0F, 0xAC, 0x95, 0x31, 0x30, 0xAB, 0x01, 0xE6, 0xD7, 0xE5, 0xE8, 0xB1, 0x3A,
        0x9B, 0x41, 0x03, 0x4F, 0x13, 0x34, 0x6D, 0x13, 0x4E, 0xF0, 0xAE, 0x91, 0xF2, 0x61, 0x69,
        0x87, 0x84, 0xBE, 0xC0, 0x2C, 0x40, 0xDB, 0x92, 0xB5, 0xA9, 0x40, 0x61, 0x2F, 0xE8, 0xAC,
        0x2F, 0xE6, 0x69, 0x5B, 0xE8, 0x4A, 0x33, 0xD4, 0xEC, 0x4D, 0xEB, 0x9B, 0xCD, 0x42, 0xEB,
        0xE0, 0x07, 0xDF, 0x57, 0x32, 0x30, 0xF6, 0x13, 0x5D, 0x2E, 0xEF, 0xFE, 0x26, 0xCA, 0xA6,
        0x79, 0x8E, 0x6C, 0xD2, 0xB5, 0x10, 0x9C, 0x3E, 0xBC, 0xC1, 0x72, 0x92, 0xA9, 0x3C, 0x6C,
        0x51, 0xAC, 0x84, 0x2D, 0x53, 0xF0, 0xB8, 0x50, 0x1D, 0x81, 0xEA, 0xD4, 0xFF, 0x80, 0x5A,
        0xB9, 0xB1, 0xF9, 0xE6, 0x58, 0x0D, 0xF6, 0x07, 0x78, 0x1A, 0x24, 0x28, 0x3F, 0xAD, 0x73,
        0x72, 0xA7, 0x4F, 0xF0, 0x86, 0x87, 0xB4, 0x35, 0x8A, 0x6C, 0xFA, 0x0D, 0xF0, 0x2A, 0x9E,
        0xB3, 0x51, 0x16, 0xAC, 0x3F, 0x41, 0x25, 0x93, 0x57, 0x8A, 0x80, 0x18, 0xD3, 0xD5, 0x12,
        0x88, 0x93, 0x0D, 0xBC, 0xD5, 0x35, 0x09, 0x15, 0x95, 0x7F, 0x7C, 0x01, 0x03, 0x09, 0xC4,
        0x95, 0x81, 0x6E, 0xC6, 0x1A, 0xD5, 0xCD, 0x89, 0x90, 0xEB, 0xC4, 0xC6, 0xD8, 0x01, 0x8B,
        0x72, 0x44, 0xB1, 0xB9, 0x56, 0xD5, 0x25, 0xAA, 0x73, 0xF7, 0xB3, 0x33, 0xEA, 0x92, 0x5C,
        0x6D, 0x4B, 0x51, 0xC7, 0x5E, 0x53, 0x9E, 0x77, 0x34, 0xB3, 0xCE, 0x38, 0x9C, 0x4A, 0x1A,
        0x3E, 0x6F, 0xAA, 0x8B, 0xC2, 0x37, 0xC0, 0xBD, 0x3F, 0xED, 0x4C, 0xBA, 0xB1, 0x74, 0x4C,
        0x78, 0x49, 0x5F, 0xAA, 0xE8, 0x30, 0x6C, 0x96, 0x2A, 0xEC, 0xA2, 0xA6, 0x0D, 0x38, 0xEC,
        0x7D, 0xBD, 0xB6, 0xBB, 0x81, 0x9F, 0xF0, 0x10, 0x2A, 0xEE, 0xBA, 0xD9, 0xAC, 0xFE, 0xB6,
        0x8E, 0xE1, 0x7E, 0x53, 0xE7, 0xB1, 0xE5, 0x75, 0x78, 0xE0, 0x86, 0xDF, 0x71, 0xAA, 0x8A,
        0xFD, 0x75, 0xE8, 0xC8, 0xDC, 0x67, 0x1A, 0x1E, 0x5C, 0xA7, 0x82, 0xD3, 0xFE, 0x53, 0x2E,
        0xB7, 0x1D, 0xB2, 0x73, 0xD6, 0x74, 0x91, 0xF4, 0xEC, 0x02, 0x3C, 0xEC, 0xE6, 0x56, 0x00,
        0x6E, 0xA7, 0x06, 0x5B, 0x79, 0x4B, 0xCE, 0x8F, 0x98, 0x40, 0xB5, 0x3B, 0x98, 0xEF, 0xF2,
        0x9F, 0x8A, 0x7F, 0x5D, 0xA4, 0x3E, 0xCC, 0x01, 0x5A, 0x04, 0x8A, 0x9C, 0x49, 0xFA, 0xB7,
        0xD8, 0x1D, 0x64, 0xF3, 0xE5, 0x96, 0x1F, 0xF7, 0xE3, 0x26, 0x0C, 0x32, 0x32, 0x55, 0x71,
        0xCD, 0x03, 0x8A, 0xB5, 0xED, 0x1F, 0xF5, 0xCF, 0xE7, 0x48, 0xD5, 0xBB, 0x31, 0x6D, 0xC8,
        0xEF, 0x51, 0x2F, 0x41, 0x41, 0x1D, 0x06, 0xC4, 0xBE, 0xD7, 0x6A, 0x4D, 0x80, 0x18, 0xDD,
        0xF3, 0x19, 0x10, 0x81, 0x33, 0x7B, 0x8A, 0x51, 0xBF, 0xB8, 0x60, 0x76, 0xC9, 0x41, 0x9A,
        0x88, 0xD0, 0xF4, 0x42, 0x96, 0xEE, 0x67, 0x46, 0xCF, 0x5D, 0xB0, 0xFC, 0x40, 0x90, 0x17,
        0x4C, 0x7E, 0x45, 0xCA, 0x4D, 0x43, 0xFB, 0x8B, 0xBD, 0xFB, 0xA3, 0x8B, 0x35, 0x83, 0x7E,
        0x98, 0x53, 0x9D, 0x5C, 0xC9, 0xD2, 0xB8, 0x3C, 0x5A, 0x53, 0x50, 0x2C, 0x3B, 0x4C, 0x3E,
        0x23, 0x4F, 0xE2, 0xDB, 0x65, 0x11, 0xB8, 0x4D, 0xAF, 0xEB, 0x13, 0x06, 0x9A, 0x28, 0xB9,
        0xD3, 0xFD, 0x11, 0xF0, 0xDB, 0x9D, 0x2F, 0x2C, 0xAD, 0xC0, 0xA7, 0xC2, 0x95, 0xFD, 0x78,
        0xE2, 0x17, 0xA7, 0x62, 0x81, 0xFA, 0xB5, 0xB3, 0x92, 0x97, 0x88, 0xA8, 0x17, 0xAC, 0x35,
        0xEC, 0x7F, 0x05, 0x59, 0xF6, 0x65, 0xAE, 0x8C, 0xA0, 0xDF, 0xD0, 0x6D, 0x43, 0xD4, 0x10,
        0xCE, 0x9A, 0x8E, 0xB2, 0xBD, 0xD4, 0x83, 0xE9, 0x05, 0x1F, 0xEC, 0x9C, 0x28, 0x4D, 0x36,
        0x22, 0x0A, 0x6B, 0x10, 0xC8, 0x71, 0xF6, 0xF5, 0x56, 0x44, 0x9A, 0x21, 0x30, 0xBF, 0x92,
        0xC9, 0xE3, 0x59, 0xDA, 0xF4, 0x06, 0x75, 0xF3, 0x80, 0xAF, 0x52, 0x29, 0x0C, 0x4C, 0xBC,
        0xD4, 0x7E, 0x15, 0xFB, 0x65, 0xA4, 0xE3, 0x59, 0xB2, 0x52, 0x8E, 0x5A, 0x04, 0xA8, 0x97,
        0x48, 0x57, 0x64, 0x96, 0x78, 0xF9, 0xA8, 0x23, 0x6B, 0x61, 0x71, 0x5A, 0x29, 0xB8, 0x59,
        0x84, 0x5D, 0x30, 0xBC, 0x34, 0x14, 0xBA, 0x37, 0x6C, 0xB0, 0xB9, 0x03, 0x71, 0x59, 0x93,
        0x01, 0x80, 0xFB, 0x5E, 0x6E, 0xC9, 0xD0, 0xB8, 0x95, 0x3D, 0x33, 0x89, 0x67, 0xFE, 0x57,
        0xD0, 0x38, 0xC3, 0x5C, 0x25, 0x7B, 0xC9, 0xA1, 0x08, 0xEF, 0x9D, 0xBB, 0xDF, 0x3F, 0x8C,
        0x51, 0x46, 0xE3, 0x5E, 0xA0, 0xC7, 0x5C, 0x12, 0xDD, 0x3C, 0x3A, 0x0C, 0xA3, 0x99, 0xA0,
        0x70, 0x5C, 0xD6, 0xF6, 0x84, 0x81, 0x60, 0xAF, 0xFB, 0x2F, 0x1A, 0x7A, 0x0A, 0x6B, 0xA9,
        0xD0, 0xD5, 0xED, 0x62, 0x35, 0xD5, 0x10, 0x22, 0x68, 0x03, 0xBF, 0xB8, 0x64, 0x37, 0x7B,
        0x35, 0xFC, 0xD9, 0xF9, 0x0F, 0xD6, 0x52, 0x79, 0xDF, 0x07, 0x2D, 0x01, 0x30, 0x1C, 0x06,
        0x87, 0xC9, 0x83, 0x53, 0x57, 0x2E, 0x3B, 0x6D, 0xF6, 0x53, 0x25, 0xF1, 0xFE, 0xD1, 0xB8,
        0x3B, 0xC0, 0xD9, 0x1D, 0x09, 0x09, 0xB5, 0x1E, 0x5F, 0x96, 0xF0, 0xC2, 0x1D, 0x38, 0x30,
        0xFB, 0x8E, 0x56, 0x9C, 0x87, 0xC7, 0x54, 0x97, 0x7F, 0x3B, 0x99, 0x75, 0x32, 0x94, 0x97,
        0x80, 0xA0, 0xC2, 0xB6, 0x52, 0x18, 0x28, 0x0B, 0xDD, 0xCD, 0x68, 0x7B, 0x9B, 0x85, 0x06,
        0x72, 0x62, 0x1C, 0xBA, 0x1F, 0xC1, 0x13, 0x8B, 0x20, 0x35, 0xA0, 0xBE, 0x16, 0x99, 0xF0,
        0x6D, 0xFB, 0x24, 0xD7, 0xD7, 0xA4, 0xC0, 0xF0, 0x12, 0xAA, 0x53, 0x8A, 0x95, 0x5F, 0xF3,
        0x7D, 0x66, 0x30, 0x6B, 0x12, 0xBE, 0xC2, 0xE9, 0x6F, 0x0E, 0x08, 0x8D, 0xE6, 0xC7, 0xF6,
        0xFC, 0xB8, 0x71, 0xF0, 0xEA, 0x1C, 0x7B, 0x5F, 0x54, 0x30, 0x34, 0x6B, 0x68, 0xD5, 0xCE,
        0x73, 0xFF, 0xA3, 0x21, 0x82, 0x6D, 0xDD, 0x42, 0xC5, 0xB8, 0x00, 0xDA, 0xB7, 0x7F, 0x8F,
        0x31, 0x14, 0x09, 0xB9, 0x78, 0x7B, 0xB7, 0xB8, 0xB8, 0xC1, 0x0A, 0x18, 0x53, 0x30, 0x7D,
        0x01, 0xB4, 0xEC, 0x05, 0xA9, 0x50, 0x16, 0xE3, 0xFA, 0xD0, 0x30, 0x57, 0x50, 0x94, 0x6B,
        0x83, 0x1F, 0x96, 0xBC, 0x65, 0x22, 0x1A, 0x6B, 0x40, 0x9F, 0xD1, 0x32, 0x7D, 0xB5, 0x96,
        0xA5, 0xCE, 0x7A, 0x22, 0x12, 0x82, 0x88, 0xBB, 0xD9, 0xAD, 0xBE, 0x93, 0xA0, 0x17, 0x8F,
        0x0A, 0xA8, 0x1B, 0x0B, 0xC3, 0x3C, 0x6C, 0xF7, 0x85, 0xEC, 0x9D, 0xA6, 0x3C, 0x7E, 0xAB,
        0x65, 0x7C, 0x11, 0x16, 0xF6, 0xC6, 0xB6, 0x6F, 0x9A, 0x93, 0x62, 0x32, 0x10, 0x73, 0xE2,
        0x2B, 0xA4, 0x01, 0xA3, 0x7D, 0x46, 0xBF, 0xE5, 0xE2, 0x9F, 0x52, 0xE4, 0x04, 0xD7, 0x4C,
        0xD8, 0x3F, 0xE2, 0xCE, 0x49, 0x6F, 0xDB, 0x9E, 0x05, 0xB5, 0x54, 0x88, 0x3C, 0x9F, 0x62,
        0x09, 0xAB, 0x66, 0x82, 0x6B, 0x11, 0x28, 0xC4, 0x05, 0x18, 0x98, 0x1F, 0x22, 0x50, 0x87,
        0x6C, 0x75, 0xE4, 0xA8, 0xD7, 0x2C, 0x65, 0xCE, 0xAF, 0x52, 0x7A, 0xD7, 0x3D, 0x07, 0x12,
        0x9A, 0xBF, 0xDF, 0x53, 0x4C, 0x94, 0x11, 0x77, 0x83, 0x71, 0x32, 0xB6, 0xED, 0x10, 0x82,
        0xF9, 0xEF, 0xF5, 0x50, 0x61, 0x16, 0xD5, 0xB3, 0x0E, 0xE8, 0x31, 0x40, 0xF9, 0x44, 0xE8,
        0x7B, 0x23, 0xBA, 0x2D, 0x76, 0x06, 0x2B, 0x3A, 0x86, 0x70, 0xE3, 0x10, 0x6B, 0x04, 0x90,
        0xDD, 0xDD, 0x6F, 0x8F, 0xF9, 0x0D, 0x77, 0x60, 0x21, 0xE2, 0xAE, 0xA4, 0xAF, 0xC1, 0x59,
        0x84, 0x07, 0x2E, 0x86, 0x6A, 0x98, 0xFE, 0xEC, 0xEF, 0x7E, 0x80, 0x5A, 0x11, 0x96, 0xA3,
        0xE9, 0xA8, 0x90, 0xF9, 0xB6, 0xE4, 0xD4, 0x6C, 0xCB, 0x59, 0xE8, 0x15, 0x5B, 0x17, 0x5A,
        0x58, 0xB9, 0x94, 0x8D, 0xD8, 0x62, 0x53, 0x51, 0xA8, 0xDE, 0x6E, 0xBA, 0x25, 0x2D, 0x71,
        0x77, 0x0C, 0x07, 0xB0, 0xF7, 0x7D, 0xDB, 0x50, 0xC9, 0x90, 0xB6, 0x3C, 0x5D, 0x82, 0xB5,
        0x09, 0xCB, 0xA0, 0x56, 0x30, 0x54, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01,
        0x09, 0x0E, 0x31, 0x47, 0x30, 0x45, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x01, 0x01,
        0xFF, 0x04, 0x08, 0x30, 0x06, 0x01, 0x01, 0xFF, 0x02, 0x01, 0x05, 0x30, 0x0E, 0x06, 0x03,
        0x55, 0x1D, 0x0F, 0x01, 0x01, 0xFF, 0x04, 0x04, 0x03, 0x02, 0x02, 0x04, 0x30, 0x1F, 0x06,
        0x06, 0x67, 0x81, 0x05, 0x05, 0x04, 0x04, 0x04, 0x15, 0x30, 0x13, 0x04, 0x11, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    let signature: [u8; 4628] = [
        0x00, 0x2C, 0x36, 0x3A, 0x00, 0x0E, 0x17, 0x1F, 0x25, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6B, 0xF7, 0x00, 0x00, 0x98,
        0xC4, 0x0C, 0x57, 0x50, 0x51, 0x8B, 0x95, 0x25, 0x31, 0x33, 0x40, 0x5E, 0x78, 0x80, 0xA2,
        0xE4, 0x3A, 0x46, 0x4E, 0xB3, 0xC2, 0xD6, 0xDF, 0xE5, 0xEE, 0xFA, 0x25, 0x14, 0x16, 0x71,
        0xB4, 0xAB, 0xC2, 0xE2, 0x0E, 0x56, 0x5A, 0x67, 0x99, 0xBF, 0xFD, 0x0A, 0x20, 0x5E, 0x88,
        0xB3, 0xBB, 0x49, 0x4F, 0x50, 0x55, 0x06, 0x24, 0x41, 0x62, 0x26, 0xE5, 0x1C, 0xFE, 0xFF,
        0x79, 0xE4, 0xF5, 0x76, 0x6E, 0x13, 0x8E, 0x3C, 0xD4, 0x98, 0x51, 0xBB, 0x79, 0x4B, 0xE6,
        0x06, 0x51, 0xE3, 0xD7, 0x0C, 0xAC, 0xD8, 0x84, 0x62, 0xFE, 0x0C, 0x0A, 0x20, 0x24, 0x0C,
        0x87, 0x65, 0x0B, 0xC8, 0x14, 0x83, 0xA9, 0x67, 0xC7, 0x02, 0x14, 0x2E, 0x41, 0xBD, 0x59,
        0xD1, 0x00, 0x67, 0x85, 0x5D, 0xD9, 0xC1, 0x71, 0x95, 0x9C, 0x79, 0x40, 0xF8, 0x3B, 0xE6,
        0x7C, 0xD8, 0x4C, 0xE1, 0x80, 0xF5, 0x64, 0x04, 0x71, 0xAE, 0xBA, 0x58, 0xF2, 0x6A, 0xD3,
        0x30, 0x12, 0xDE, 0xBC, 0x55, 0xD5, 0x28, 0x84, 0xD6, 0x31, 0x2D, 0x83, 0xB8, 0x06, 0xB8,
        0x91, 0x5C, 0xF5, 0xF0, 0x14, 0x2C, 0xBD, 0x39, 0xF9, 0x38, 0x38, 0xA6, 0x75, 0xE7, 0x22,
        0x01, 0x40, 0x27, 0xB3, 0x2A, 0x75, 0xE7, 0x79, 0x52, 0x4E, 0x4B, 0xAC, 0x16, 0xA6, 0x9C,
        0xFE, 0x87, 0xA8, 0x3C, 0x8D, 0x66, 0x5B, 0xFB, 0x19, 0xDC, 0xBD, 0xF9, 0xE4, 0x3A, 0xBF,
        0x51, 0x8A, 0x0E, 0xF3, 0x3D, 0x80, 0x1E, 0xCD, 0xA6, 0x09, 0x48, 0xFA, 0x62, 0x02, 0x87,
        0xDF, 0xC0, 0x86, 0x1A, 0x40, 0x74, 0x68, 0xE7, 0x07, 0x5F, 0x86, 0xA6, 0xF8, 0x4C, 0x7E,
        0xAC, 0x76, 0x39, 0x1E, 0xB5, 0xBC, 0xCD, 0xD7, 0xEF, 0xBF, 0xD5, 0x55, 0x90, 0x38, 0x36,
        0x2E, 0x0C, 0xFF, 0x2C, 0x8F, 0x77, 0x71, 0x40, 0x72, 0x80, 0x0C, 0x34, 0xEA, 0x84, 0xDF,
        0x64, 0x4E, 0x1B, 0x3B, 0x7A, 0xBD, 0x4F, 0x56, 0x26, 0x50, 0xE6, 0xE3, 0x0E, 0xC0, 0xAF,
        0xFF, 0x27, 0x3B, 0xE6, 0x51, 0xCC, 0xF8, 0xE2, 0x97, 0xBF, 0x54, 0xE5, 0xCC, 0x5E, 0x10,
        0xF0, 0x75, 0x83, 0x05, 0x88, 0x68, 0xE5, 0x78, 0x76, 0x1A, 0xFC, 0x93, 0xF9, 0xC6, 0x8E,
        0x0D, 0x24, 0xE2, 0x33, 0x83, 0x40, 0xFA, 0x83, 0x3E, 0xA1, 0x2E, 0x2F, 0xE7, 0xE8, 0x92,
        0x4B, 0x5E, 0x87, 0x3C, 0xB0, 0xB9, 0x4B, 0xBF, 0x25, 0xC7, 0xA0, 0x35, 0x57, 0x4C, 0xA1,
        0x43, 0x63, 0x94, 0x20, 0x5C, 0x85, 0xB1, 0xD4, 0x50, 0x86, 0x8B, 0x5C, 0x38, 0xBD, 0x42,
        0x9E, 0xB2, 0x7E, 0xC8, 0xA3, 0x49, 0xD1, 0x21, 0x4E, 0x8E, 0x99, 0x7D, 0x26, 0x7A, 0x5E,
        0x3B, 0x18, 0x19, 0xCB, 0x3E, 0x08, 0x56, 0x8C, 0xC3, 0xDA, 0x15, 0x10, 0x19, 0x15, 0xC1,
        0xE3, 0x22, 0x2B, 0xB1, 0xF0, 0x44, 0x1E, 0xEB, 0xAD, 0x15, 0x7D, 0xC3, 0x7B, 0x99, 0xCC,
        0x76, 0xED, 0xAD, 0x79, 0x27, 0xDE, 0x8C, 0x25, 0x7A, 0xA4, 0x49, 0xB1, 0x3A, 0x02, 0x5C,
        0xB3, 0x7D, 0xE6, 0xB8, 0xCC, 0xAC, 0xCF, 0x70, 0xBA, 0xDE, 0x7C, 0x88, 0xA1, 0xD7, 0x04,
        0xA9, 0x57, 0x64, 0x28, 0xAE, 0x3C, 0x90, 0x13, 0xA2, 0x5C, 0xC9, 0xAF, 0x3F, 0x20, 0x7F,
        0x6B, 0x5D, 0x2F, 0xF3, 0xF9, 0x68, 0xEB, 0x0A, 0xB9, 0xDD, 0x0F, 0x51, 0x4C, 0x87, 0x33,
        0x55, 0xC6, 0x4E, 0x54, 0x1D, 0x77, 0xD1, 0x91, 0x6B, 0x75, 0x39, 0x3E, 0xBF, 0xE2, 0xF4,
        0x0B, 0xE5, 0xB7, 0xBC, 0x1B, 0xE5, 0x3F, 0x26, 0xBF, 0xB8, 0x8C, 0x00, 0x03, 0xCD, 0x69,
        0x9E, 0x80, 0x36, 0x10, 0x61, 0xF8, 0x27, 0x87, 0xAC, 0x03, 0x8A, 0x34, 0x68, 0xB4, 0xD4,
        0x32, 0x5D, 0xFB, 0xA2, 0xD1, 0x75, 0x40, 0x7A, 0xF5, 0xB7, 0x3C, 0x21, 0x64, 0x0C, 0xC6,
        0xCF, 0x14, 0xFF, 0xDC, 0x33, 0x5A, 0xF5, 0x40, 0x4F, 0xB1, 0x62, 0x06, 0x7D, 0xB1, 0x00,
        0x46, 0x91, 0x9D, 0x73, 0x61, 0x92, 0x8D, 0x6E, 0xB1, 0x33, 0xDC, 0xD1, 0x6C, 0x0A, 0xA2,
        0x12, 0x1C, 0x64, 0x96, 0x71, 0xC3, 0x13, 0x79, 0x34, 0x56, 0x84, 0xA5, 0x4F, 0xA5, 0x3A,
        0x25, 0xBC, 0x97, 0x85, 0xDE, 0x65, 0x43, 0x7B, 0xF3, 0x70, 0x03, 0x99, 0x50, 0x7A, 0xDA,
        0x9D, 0x72, 0x7A, 0x86, 0xA8, 0xBE, 0x2D, 0xC2, 0xE0, 0x09, 0x16, 0x20, 0x7C, 0x98, 0xB9,
        0x4F, 0x0D, 0x14, 0x42, 0xEF, 0xF9, 0x81, 0x87, 0xD1, 0xB6, 0xC5, 0x10, 0xDB, 0xA5, 0x76,
        0x67, 0x84, 0x00, 0x3E, 0x65, 0x51, 0xA3, 0x80, 0x7B, 0xEE, 0x07, 0xA9, 0xEF, 0x17, 0x7B,
        0xCA, 0x27, 0xE1, 0xA0, 0x49, 0x0C, 0xC1, 0x73, 0xE7, 0x50, 0x4A, 0x28, 0x88, 0x75, 0xE2,
        0xE6, 0x85, 0x85, 0x65, 0xFE, 0xA1, 0x76, 0xA7, 0x13, 0x1E, 0x22, 0xF3, 0x05, 0x00, 0xDA,
        0xFF, 0x51, 0xA7, 0xC2, 0x2F, 0x77, 0x5A, 0xF3, 0xB1, 0x6D, 0x6D, 0x5F, 0xE8, 0x71, 0xF9,
        0xC8, 0x8E, 0x0B, 0x80, 0xFB, 0x41, 0xDB, 0x75, 0x8B, 0xAB, 0xBC, 0x6C, 0x7F, 0xE8, 0xFD,
        0x2F, 0x11, 0x33, 0xFF, 0xE4, 0x0E, 0xA2, 0xFB, 0x99, 0x06, 0xDA, 0x0C, 0x66, 0xEC, 0xF7,
        0xD3, 0x8F, 0xD5, 0x47, 0x6D, 0xCB, 0x59, 0xF4, 0x16, 0x11, 0xBD, 0xFF, 0xFE, 0x02, 0x65,
        0x54, 0x64, 0x1E, 0x0E, 0xD7, 0x21, 0x9A, 0xAC, 0xBF, 0xCB, 0xE2, 0xB5, 0x4B, 0xA3, 0xDB,
        0xCE, 0xF5, 0x20, 0xFA, 0x84, 0x96, 0x93, 0x9B, 0x2E, 0x35, 0x51, 0xF0, 0x4A, 0x51, 0xD0,
        0x41, 0xAD, 0x75, 0x24, 0x4F, 0xBE, 0xE7, 0x50, 0x50, 0x79, 0x5A, 0xE9, 0x1F, 0xAA, 0xE6,
        0x20, 0x0E, 0xE5, 0x70, 0x67, 0x28, 0x82, 0xC6, 0x41, 0xC6, 0x08, 0xE7, 0xB1, 0xCD, 0x82,
        0x39, 0xF2, 0xA3, 0x25, 0x01, 0xE4, 0x51, 0x8E, 0x5F, 0x5D, 0x40, 0x9D, 0x40, 0x7B, 0xAC,
        0x0A, 0x99, 0xA5, 0x2D, 0x84, 0x31, 0xF5, 0x8E, 0xA8, 0xCB, 0x32, 0x42, 0xA9, 0x7D, 0xEA,
        0x4C, 0x59, 0xD4, 0x54, 0x51, 0x84, 0x6E, 0x9A, 0xB4, 0xB7, 0x45, 0xE3, 0xDF, 0xBC, 0x01,
        0x50, 0xC1, 0x54, 0xB7, 0x0D, 0xEB, 0x9E, 0x77, 0x66, 0x51, 0x5A, 0x03, 0xC1, 0x61, 0x90,
        0x1A, 0xC6, 0xC8, 0x50, 0x05, 0x44, 0x94, 0x61, 0x7B, 0x73, 0xC8, 0x32, 0x8C, 0xCF, 0x2A,
        0x1E, 0x90, 0x86, 0x39, 0x30, 0x2E, 0xD9, 0x4E, 0xA1, 0xB9, 0xF8, 0x1F, 0x96, 0x2E, 0xF9,
        0x46, 0x13, 0x2F, 0xCE, 0x85, 0x03, 0x5F, 0xC1, 0x1A, 0x0C, 0x30, 0xA3, 0x44, 0x0B, 0xD8,
        0xEB, 0xD6, 0xB1, 0xB1, 0x8F, 0x73, 0xCB, 0x98, 0xC8, 0xA0, 0x00, 0xD2, 0xE5, 0x11, 0x90,
        0x21, 0x24, 0xB9, 0x27, 0xAF, 0xA8, 0xC5, 0xFE, 0xF1, 0x81, 0x1B, 0x0F, 0xA2, 0xE7, 0x59,
        0x2E, 0xF5, 0xC1, 0x7B, 0xBC, 0xFF, 0x7B, 0x9F, 0x28, 0x5B, 0x6C, 0xEA, 0x69, 0xD3, 0xD3,
        0xE1, 0x66, 0x60, 0xE7, 0x4A, 0xA3, 0x50, 0x9A, 0x80, 0xE2, 0xBB, 0x61, 0x06, 0xC0, 0xC1,
        0x1D, 0xAE, 0x66, 0x85, 0xD0, 0x2C, 0x99, 0x34, 0x3D, 0xC7, 0x44, 0x7F, 0xAB, 0x63, 0x75,
        0xC5, 0xF5, 0x65, 0xDC, 0x5F, 0xB7, 0xAE, 0x92, 0xD4, 0x21, 0x5B, 0xF3, 0x8D, 0xAB, 0xF9,
        0x0B, 0x2B, 0x57, 0x7F, 0x68, 0x0B, 0x0A, 0xDE, 0x2F, 0x84, 0x75, 0x3E, 0xD2, 0x7F, 0x66,
        0xFE, 0x63, 0x46, 0x3B, 0x28, 0xF4, 0x1F, 0x21, 0x93, 0x49, 0x9F, 0xED, 0x1B, 0x36, 0xA8,
        0xAF, 0x69, 0xC4, 0x2A, 0x36, 0x6F, 0x51, 0xBA, 0xA9, 0x6F, 0xA7, 0x1E, 0x9D, 0x82, 0x27,
        0xC4, 0x7E, 0x69, 0x6C, 0xCA, 0xBD, 0x16, 0x0A, 0xC4, 0xBC, 0x3E, 0xAD, 0x20, 0xB8, 0x23,
        0xF5, 0xCE, 0x4A, 0xB4, 0xD2, 0xD6, 0x76, 0xE5, 0x41, 0x8F, 0xA0, 0xCA, 0x48, 0xF7, 0x2B,
        0x89, 0x89, 0x17, 0xFF, 0x6F, 0x91, 0x67, 0x6B, 0xF8, 0x11, 0xAA, 0xAA, 0xDF, 0xD7, 0xED,
        0xA2, 0x14, 0x32, 0x25, 0xE9, 0x6D, 0x42, 0x6A, 0xF4, 0x6C, 0x4A, 0xA6, 0xD1, 0x9D, 0x1D,
        0x7E, 0x2F, 0x4C, 0x54, 0xAC, 0x7D, 0xCD, 0x3D, 0x87, 0x42, 0xE5, 0xC1, 0xEA, 0xD9, 0x3D,
        0x1A, 0xA4, 0x9A, 0xF0, 0x9B, 0x4A, 0xDE, 0x97, 0xDE, 0x4B, 0x33, 0xF8, 0x4B, 0xC8, 0xA4,
        0xD6, 0x47, 0xDC, 0x43, 0xE1, 0x36, 0xDD, 0xC0, 0x8A, 0xFE, 0xAD, 0x96, 0x6D, 0x01, 0xFF,
        0x1A, 0xC3, 0xCF, 0x44, 0x71, 0x97, 0xE0, 0x24, 0xFF, 0x05, 0x45, 0x51, 0xC7, 0xF8, 0x13,
        0x8C, 0xE3, 0x7D, 0x54, 0xA8, 0x26, 0x74, 0x5B, 0x0F, 0x9E, 0x7F, 0xE8, 0x6C, 0x9F, 0x62,
        0xD3, 0x8A, 0x37, 0xCD, 0x0F, 0x02, 0xF8, 0x07, 0x76, 0x9E, 0x6F, 0xF1, 0xBB, 0x8D, 0xC3,
        0x2D, 0x51, 0x4B, 0xD6, 0xB5, 0xF2, 0x32, 0x8B, 0x64, 0x38, 0xC5, 0xE0, 0x97, 0x73, 0x94,
        0x0F, 0xE8, 0x37, 0xB4, 0xD9, 0x56, 0x5D, 0xE9, 0xAC, 0xED, 0x44, 0x4C, 0x41, 0xD4, 0x4D,
        0x14, 0x17, 0xE4, 0x38, 0x0F, 0xC8, 0x29, 0x1C, 0x3C, 0x96, 0xDB, 0xBA, 0xC2, 0x8A, 0xF2,
        0x40, 0x12, 0x0C, 0x91, 0x37, 0xA2, 0xA1, 0x7B, 0xEA, 0x7A, 0xB8, 0xF5, 0x4D, 0x8B, 0x4F,
        0x99, 0x6B, 0x0D, 0x2C, 0x43, 0x89, 0x99, 0xFC, 0x88, 0xD6, 0xC1, 0xFF, 0x98, 0xBF, 0x30,
        0x91, 0xFF, 0xB6, 0x9B, 0xAE, 0xD9, 0xD9, 0x38, 0xC1, 0xD1, 0x8D, 0xBC, 0x71, 0x53, 0xFC,
        0xC0, 0x3D, 0x3B, 0x9B, 0xA0, 0xD3, 0xD2, 0x71, 0x9C, 0xF6, 0x4B, 0x32, 0xD0, 0x38, 0x43,
        0x0D, 0xA4, 0x7F, 0xFD, 0x62, 0x6F, 0x13, 0x78, 0x2A, 0xFB, 0xAC, 0x18, 0xED, 0xD1, 0xA2,
        0x3D, 0x52, 0xFB, 0x68, 0xE9, 0x25, 0x8C, 0x45, 0x57, 0x85, 0xBA, 0x02, 0xDF, 0x34, 0x44,
        0xFF, 0xA3, 0x1B, 0x1A, 0xFC, 0xB4, 0x34, 0x71, 0x38, 0x77, 0x60, 0xA8, 0xB8, 0xD1, 0x5E,
        0x93, 0x69, 0x14, 0x69, 0x04, 0x2D, 0xCF, 0xA2, 0xDE, 0xC4, 0x6E, 0x94, 0xC5, 0xD5, 0x30,
        0x83, 0x36, 0x08, 0x2D, 0xE9, 0x4C, 0xF2, 0x25, 0xC3, 0x83, 0x06, 0x34, 0x2F, 0xCD, 0xEC,
        0xCE, 0x26, 0x92, 0x32, 0xB8, 0x32, 0xEF, 0x03, 0x22, 0x46, 0xFA, 0x23, 0xF1, 0x32, 0x95,
        0x2C, 0x49, 0x80, 0x84, 0xB6, 0x45, 0x6C, 0xFD, 0x03, 0x55, 0x87, 0x24, 0x8C, 0xC9, 0x4F,
        0x4E, 0x09, 0x47, 0x04, 0xF2, 0xD4, 0xC1, 0x76, 0x9E, 0x63, 0x3B, 0xF5, 0x87, 0xE5, 0x7C,
        0xC1, 0x5B, 0x7B, 0x05, 0x78, 0xB2, 0xCD, 0x92, 0x55, 0x4C, 0x15, 0x2A, 0xA0, 0xDA, 0x32,
        0xFF, 0xBB, 0xCE, 0xEF, 0xE3, 0xF7, 0xA9, 0xB1, 0xE8, 0xED, 0xE5, 0xAB, 0x19, 0xAE, 0x77,
        0x30, 0x24, 0x27, 0x4F, 0x10, 0xE2, 0xB6, 0xCD, 0x8E, 0x3D, 0xC8, 0xFC, 0x9B, 0xFC, 0xC6,
        0x59, 0x78, 0xBA, 0x4F, 0x2F, 0x8D, 0x38, 0x29, 0xA7, 0x50, 0x7A, 0xB6, 0x34, 0x39, 0x74,
        0x94, 0xE6, 0x18, 0xFE, 0xBD, 0x61, 0x64, 0xE7, 0x3B, 0xE8, 0x11, 0x41, 0xDA, 0x8A, 0x88,
        0x39, 0x4A, 0xA4, 0xD4, 0x19, 0x31, 0xA2, 0x6B, 0x2C, 0x93, 0x85, 0xE1, 0x4A, 0xA5, 0x07,
        0x86, 0x04, 0x06, 0x4F, 0x39, 0x5D, 0x2D, 0xBA, 0xC2, 0x4F, 0x82, 0xAA, 0x36, 0x77, 0x2E,
        0xF9, 0x1A, 0x55, 0xC5, 0x89, 0x79, 0x94, 0x80, 0xA7, 0xF8, 0x0E, 0x50, 0x4F, 0x2C, 0x5D,
        0x53, 0x51, 0x8A, 0x5E, 0x76, 0x0B, 0x91, 0xA8, 0x6D, 0xB5, 0x3A, 0x12, 0x7F, 0x14, 0x90,
        0x95, 0x8F, 0xF9, 0x9F, 0x9B, 0xC2, 0xE0, 0x01, 0xE7, 0xE0, 0x38, 0x5D, 0x26, 0x16, 0x9C,
        0xF3, 0xDC, 0xD1, 0xCD, 0x63, 0x79, 0x6E, 0xCF, 0x36, 0xAF, 0x45, 0x09, 0xF1, 0x40, 0xFE,
        0xC5, 0x5B, 0x1E, 0x4C, 0x25, 0x66, 0xB4, 0x5F, 0x98, 0x81, 0xD5, 0xE5, 0xB1, 0x69, 0x7D,
        0x83, 0x11, 0x65, 0xFB, 0xB6, 0x67, 0x8C, 0x9B, 0x3C, 0xD4, 0x7F, 0xDC, 0xF7, 0xC2, 0x0E,
        0x1E, 0xC1, 0x5E, 0xE3, 0x7E, 0x3F, 0xEC, 0xEE, 0x5F, 0xBB, 0xDE, 0xA3, 0xC0, 0xA3, 0x49,
        0xD8, 0x15, 0x21, 0xB8, 0x33, 0x08, 0x71, 0xE8, 0x97, 0x6D, 0x25, 0xB4, 0xC5, 0x76, 0x20,
        0xDC, 0xA8, 0x36, 0xA1, 0xF8, 0x1F, 0x69, 0x00, 0x28, 0xE8, 0x7B, 0x9C, 0x37, 0x11, 0x28,
        0xF5, 0x93, 0x8D, 0x4C, 0x87, 0x52, 0x20, 0xE5, 0x7F, 0x77, 0xAF, 0x3E, 0x36, 0x9A, 0x83,
        0x84, 0xA8, 0x43, 0x8C, 0x39, 0x70, 0xB4, 0x80, 0x9C, 0x69, 0x18, 0x59, 0xE8, 0x63, 0x5D,
        0x15, 0x00, 0x28, 0xAA, 0x2E, 0xF9, 0x89, 0x6E, 0x50, 0x7E, 0x06, 0xB6, 0x2E, 0x9B, 0xB1,
        0x6A, 0xAB, 0xD1, 0x06, 0xC0, 0x05, 0x70, 0x0C, 0x87, 0x29, 0xEE, 0xCA, 0xA0, 0x0F, 0xA5,
        0x81, 0xA7, 0xCA, 0x1F, 0xED, 0xE6, 0xF0, 0xBA, 0x67, 0x3C, 0x84, 0x60, 0x2D, 0xEF, 0x6D,
        0x6B, 0x20, 0x91, 0xCB, 0xDC, 0x2B, 0x27, 0x86, 0xC8, 0x0A, 0x3B, 0x43, 0x98, 0x5D, 0x66,
        0x69, 0x48, 0x20, 0x12, 0x77, 0x55, 0xCB, 0x8D, 0x8D, 0xC2, 0x8D, 0x9F, 0x6D, 0x68, 0x4D,
        0x5E, 0x44, 0x5D, 0xAA, 0x73, 0x95, 0xA9, 0x5C, 0x14, 0x4F, 0x0D, 0xEB, 0x0A, 0xEA, 0x8D,
        0x56, 0x5C, 0x36, 0x25, 0x8F, 0x26, 0x5D, 0x8F, 0x9F, 0x88, 0xDD, 0x6C, 0x84, 0x85, 0x0F,
        0x06, 0x43, 0x7E, 0xC5, 0x52, 0x91, 0xB6, 0xF8, 0x7A, 0xB5, 0x7B, 0xA9, 0xD9, 0x79, 0xED,
        0x16, 0x8A, 0x66, 0x39, 0xC7, 0x10, 0x35, 0xF9, 0xA7, 0x6D, 0x1A, 0x70, 0x2E, 0x53, 0x43,
        0xDA, 0x77, 0x8C, 0x34, 0x76, 0xC9, 0xA2, 0x77, 0x91, 0xA0, 0xBA, 0x54, 0x01, 0xE1, 0x3A,
        0x18, 0xE7, 0x13, 0xCD, 0xC5, 0xA8, 0xCD, 0xC1, 0xBE, 0x27, 0xE3, 0xC2, 0xDE, 0x06, 0xB6,
        0xBB, 0xCB, 0xDA, 0x68, 0x38, 0xF2, 0x27, 0x22, 0x96, 0x5C, 0x27, 0x10, 0x56, 0xE4, 0x5C,
        0x56, 0x27, 0xF3, 0x73, 0x03, 0xBE, 0xA8, 0xFE, 0xF5, 0xF2, 0xB2, 0x87, 0x5D, 0xB1, 0x4A,
        0x10, 0x50, 0x1E, 0x13, 0x83, 0xBC, 0x45, 0xAA, 0x6E, 0x0B, 0x6B, 0xBD, 0x46, 0x4B, 0x18,
        0x90, 0x96, 0xA6, 0x71, 0xF6, 0x5B, 0xAC, 0x4C, 0x99, 0x78, 0xB1, 0xF4, 0xC5, 0x7B, 0x55,
        0x54, 0x35, 0xAF, 0xE7, 0xAD, 0xAB, 0xA9, 0x77, 0xC2, 0x96, 0x9B, 0xCD, 0xCD, 0x9E, 0x65,
        0x09, 0xB5, 0xD9, 0x48, 0x2C, 0xB0, 0xA9, 0x26, 0x60, 0xE0, 0xDB, 0x07, 0x8A, 0x7F, 0x33,
        0x28, 0x9A, 0xD7, 0xE5, 0x7E, 0x8F, 0xAD, 0x4E, 0xA7, 0xFB, 0xC9, 0xA9, 0x86, 0x01, 0xA2,
        0x9D, 0xBF, 0xFB, 0xFA, 0x31, 0xFA, 0x0C, 0x46, 0x9A, 0xF2, 0x78, 0x91, 0x82, 0x26, 0x5B,
        0xB6, 0x3C, 0x02, 0x1C, 0x9E, 0x37, 0x7B, 0x46, 0x81, 0xC3, 0xF5, 0x03, 0x54, 0x15, 0x4D,
        0x86, 0x19, 0x01, 0x98, 0x33, 0x64, 0xF1, 0x82, 0x98, 0x8C, 0x6F, 0xEC, 0x30, 0xF5, 0xFB,
        0xE9, 0x8C, 0xAD, 0x2B, 0x4D, 0xA5, 0x5C, 0x1B, 0x3E, 0x91, 0x92, 0x16, 0x79, 0x7A, 0x7B,
        0x90, 0x64, 0x7B, 0x95, 0x28, 0x12, 0x85, 0x2B, 0x41, 0x7A, 0x12, 0x0B, 0xCC, 0xDB, 0xD8,
        0x14, 0xF3, 0xA0, 0xB3, 0x83, 0xB1, 0xFB, 0x66, 0xFB, 0x2E, 0x69, 0x71, 0x7B, 0xDA, 0xAB,
        0xFC, 0x1F, 0x90, 0xDB, 0x73, 0x5E, 0x85, 0xB6, 0x99, 0xFA, 0xAA, 0x86, 0xC9, 0xCE, 0xCC,
        0x1D, 0x0D, 0xA2, 0x63, 0xC3, 0x2D, 0x3D, 0xDC, 0xBA, 0x93, 0xAA, 0x7C, 0x43, 0x98, 0xA1,
        0xE4, 0xAD, 0xF9, 0xF8, 0x15, 0xAE, 0x57, 0x42, 0x54, 0x36, 0x6E, 0xD7, 0x30, 0x33, 0xC5,
        0xC7, 0xA9, 0xC8, 0x83, 0xDB, 0x62, 0xB9, 0x4A, 0x9B, 0xB7, 0xA4, 0x3F, 0x77, 0xBC, 0xBF,
        0xB5, 0xC2, 0x4D, 0xF7, 0x9B, 0x6B, 0x48, 0x8B, 0x24, 0x71, 0x41, 0xE5, 0x2D, 0xD8, 0x01,
        0xB9, 0xAD, 0x74, 0x2F, 0x2D, 0xF9, 0x6A, 0x24, 0xF2, 0x4B, 0xA7, 0xD2, 0xEC, 0x99, 0xBB,
        0x9C, 0x43, 0xFA, 0xD2, 0x72, 0x96, 0x29, 0xEA, 0xC7, 0x58, 0xDC, 0xD7, 0xA0, 0xDF, 0x8C,
        0x74, 0xDF, 0x01, 0x76, 0xCF, 0x47, 0x37, 0x6F, 0x8F, 0x54, 0x42, 0x10, 0xFB, 0xEC, 0x3E,
        0x37, 0x72, 0x9A, 0xB7, 0x6D, 0x20, 0x88, 0xAF, 0xA0, 0x24, 0x23, 0x83, 0x6D, 0x0F, 0x87,
        0xC4, 0xB6, 0xFE, 0x9F, 0x63, 0x6B, 0x6F, 0x00, 0xDF, 0x3F, 0x97, 0xC2, 0xCF, 0xC7, 0x22,
        0xF6, 0x91, 0x0E, 0x9D, 0x23, 0xE2, 0x9F, 0x95, 0xDF, 0x0E, 0x53, 0xCD, 0x7A, 0xA6, 0x1D,
        0x6D, 0xA7, 0xBC, 0x21, 0x0B, 0xC2, 0xC5, 0xE0, 0x0C, 0x71, 0x85, 0x9B, 0x26, 0x8D, 0xD0,
        0x70, 0x11, 0x5E, 0x46, 0x4C, 0x57, 0x32, 0x9F, 0x20, 0xF2, 0xC6, 0xE9, 0xB2, 0x9F, 0xC1,
        0x1F, 0x8D, 0xC1, 0xB6, 0xB6, 0x32, 0x4B, 0xDC, 0x68, 0xBB, 0x6B, 0x89, 0x4E, 0x3C, 0x9F,
        0x31, 0x2F, 0x5F, 0xB9, 0xB4, 0x43, 0x86, 0x38, 0xBB, 0x7F, 0x76, 0x73, 0x3F, 0x58, 0x5A,
        0xC3, 0x55, 0x69, 0x58, 0xAA, 0xC1, 0x62, 0x87, 0x2F, 0xD1, 0x9D, 0xB0, 0x25, 0xCD, 0xCD,
        0xF4, 0xD9, 0xD4, 0xFD, 0x67, 0x10, 0x33, 0x4E, 0x09, 0xE4, 0x46, 0xAC, 0x15, 0xBA, 0xE3,
        0x24, 0x00, 0x1E, 0xD4, 0x4C, 0xA1, 0x09, 0xD8, 0xCF, 0xDE, 0xF5, 0xD2, 0xE5, 0x36, 0xA0,
        0xBC, 0x8D, 0x3F, 0x72, 0x4E, 0x76, 0x06, 0x32, 0x3D, 0xE0, 0x9B, 0x1C, 0xE3, 0xA6, 0x7A,
        0xAC, 0xC4, 0x55, 0x19, 0x5A, 0xF8, 0xD5, 0xDE, 0x79, 0x03, 0xC5, 0xFD, 0x7B, 0x09, 0xA7,
        0xD9, 0xA9, 0xA4, 0x7C, 0xF3, 0x5D, 0x36, 0xD0, 0x12, 0xE3, 0xA9, 0x42, 0xBF, 0xAE, 0x3E,
        0x0D, 0x6C, 0xEA, 0x49, 0xD2, 0x55, 0xB3, 0xE6, 0xAD, 0xF1, 0x76, 0x7B, 0x4F, 0x2A, 0x75,
        0x7A, 0x6A, 0x02, 0xB8, 0x32, 0xB1, 0x6B, 0x4F, 0xC2, 0x42, 0x2A, 0x73, 0xB3, 0x4C, 0xCA,
        0xA2, 0xEE, 0x23, 0x74, 0x05, 0xE1, 0xF9, 0x14, 0xB0, 0x76, 0x5C, 0x93, 0x89, 0x23, 0xA6,
        0xF8, 0x4D, 0xFF, 0x49, 0x75, 0x80, 0x1A, 0x01, 0x04, 0x4F, 0x1A, 0x0A, 0x4C, 0x73, 0xC4,
        0x91, 0xDE, 0x72, 0x19, 0x83, 0xEA, 0x36, 0x41, 0x4F, 0xF3, 0x60, 0x74, 0xE2, 0xD2, 0x01,
        0x82, 0xA1, 0x13, 0xF8, 0xE7, 0x38, 0x41, 0x07, 0xC9, 0x5C, 0x5F, 0xD5, 0xAA, 0x06, 0xE6,
        0xD5, 0xA2, 0xF3, 0x1D, 0x28, 0xA1, 0x53, 0xD1, 0xA4, 0x16, 0x83, 0xD8, 0x66, 0xE1, 0x6B,
        0x8A, 0xC1, 0x42, 0x6A, 0xB2, 0xCA, 0x9C, 0x1E, 0x4E, 0xD4, 0xC7, 0xAD, 0x1E, 0xFE, 0x50,
        0x9C, 0x7D, 0xAE, 0xD8, 0x13, 0x7F, 0xA3, 0x59, 0x1E, 0x8F, 0xF2, 0x54, 0xF3, 0xA4, 0xDA,
        0xC9, 0x64, 0x9D, 0x37, 0x69, 0x4A, 0x7B, 0xF5, 0x33, 0xC7, 0xE9, 0x82, 0x2B, 0xE8, 0x06,
        0x06, 0xD2, 0x8D, 0xAD, 0x07, 0x55, 0x59, 0x87, 0xF9, 0x0F, 0x26, 0x01, 0xBA, 0xB0, 0x97,
        0x19, 0x33, 0x14, 0xF7, 0xC7, 0x4C, 0x37, 0x5F, 0xB9, 0xD6, 0xA1, 0x7A, 0x91, 0x0E, 0x5D,
        0x1E, 0x46, 0xAE, 0x94, 0x93, 0x62, 0x56, 0x6C, 0xA0, 0xD2, 0x48, 0x37, 0xD4, 0x47, 0x1F,
        0x44, 0x66, 0x83, 0x55, 0xE0, 0xFD, 0x05, 0x78, 0x37, 0x68, 0x27, 0xBA, 0xA5, 0xBC, 0x24,
        0xE9, 0x9D, 0xCC, 0x9F, 0x7F, 0x1A, 0x71, 0x4B, 0xB6, 0x1A, 0xB7, 0xD2, 0x15, 0x20, 0xF7,
        0xF9, 0x99, 0xBA, 0x88, 0x3D, 0xE6, 0x05, 0x2D, 0xAF, 0x1B, 0x46, 0x98, 0x49, 0xAB, 0x57,
        0x73, 0xB0, 0x03, 0xCD, 0xD6, 0x54, 0xF5, 0xC2, 0x6D, 0xFE, 0x5B, 0x47, 0x60, 0xD3, 0xC7,
        0x6E, 0x68, 0x7B, 0x81, 0x8A, 0x8F, 0xB1, 0xD1, 0x3C, 0xE2, 0xCB, 0x53, 0x8D, 0x1B, 0x5F,
        0xD6, 0xBC, 0xF9, 0x27, 0xD9, 0x0E, 0x76, 0x7F, 0x3B, 0x7D, 0x57, 0x24, 0x2B, 0xBD, 0x8D,
        0xB9, 0x56, 0x51, 0x29, 0x34, 0x7C, 0xAF, 0x3D, 0x0B, 0xD4, 0x9C, 0xD2, 0x42, 0x5B, 0x87,
        0xA6, 0x79, 0x83, 0x7D, 0x38, 0x97, 0x62, 0x42, 0x83, 0x0E, 0x6A, 0xB8, 0x1A, 0x59, 0x21,
        0xC4, 0x85, 0x72, 0xA7, 0xD0, 0x86, 0x04, 0xFE, 0x78, 0x71, 0x81, 0x44, 0x99, 0xF9, 0x1B,
        0xFB, 0xD9, 0x8D, 0xCE, 0x87, 0x74, 0xCE, 0x63, 0xE6, 0x1C, 0x66, 0x4E, 0xAE, 0x3B, 0x09,
        0xF6, 0x09, 0x09, 0x58, 0xB8, 0x06, 0xF9, 0xA7, 0x89, 0xBD, 0xB6, 0x4C, 0xC7, 0x05, 0x25,
        0xE8, 0x41, 0xA2, 0xDA, 0xC0, 0xF6, 0x78, 0x58, 0xF9, 0x73, 0x1E, 0x4A, 0xE7, 0x91, 0x15,
        0x82, 0x87, 0x62, 0x43, 0x02, 0x72, 0x32, 0xDC, 0x6F, 0xD3, 0xA8, 0xAB, 0xE4, 0x0D, 0x75,
        0xBF, 0x23, 0x31, 0x59, 0x5D, 0x9A, 0xD5, 0x0A, 0xF2, 0x74, 0x2B, 0x26, 0x4A, 0xE8, 0x4C,
        0xB9, 0xCA, 0x4A, 0x9C, 0x4B, 0x31, 0x22, 0x09, 0x7E, 0xA0, 0x3C, 0x1B, 0x45, 0x39, 0xE0,
        0xA3, 0xC5, 0xD4, 0x54, 0xB9, 0x3C, 0x8B, 0xD5, 0x84, 0x98, 0xB8, 0x55, 0x7A, 0xAD, 0x23,
        0xAC, 0x7E, 0xD7, 0x51, 0xE5, 0x4A, 0xFD, 0xF9, 0x60, 0x44, 0xC4, 0x8B, 0x89, 0x59, 0x10,
        0xB9, 0x9C, 0xC2, 0x3A, 0xE3, 0xD8, 0x08, 0xB4, 0x07, 0xAB, 0xCA, 0x56, 0x28, 0x8B, 0x1C,
        0xE5, 0x9C, 0x3B, 0xDE, 0x6B, 0x38, 0x8B, 0x97, 0x6B, 0x5A, 0x3B, 0xDD, 0x82, 0xA0, 0x5A,
        0xD2, 0xB1, 0x6D, 0x4A, 0x9C, 0x50, 0x3F, 0xF3, 0x70, 0x8E, 0xA2, 0x32, 0x6B, 0x48, 0x5F,
        0x7D, 0x5D, 0x26, 0x87, 0x50, 0x61, 0xAC, 0x3E, 0x69, 0x0F, 0xF3, 0x2C, 0xD3, 0x13, 0x6E,
        0xDE, 0x97, 0x96, 0xE1, 0x00, 0x53, 0x80, 0x0C, 0x82, 0x43, 0x8B, 0x90, 0x2C, 0x61, 0x35,
        0x23, 0xEC, 0x45, 0x10, 0x99, 0x13, 0x69, 0x59, 0x08, 0x3C, 0x6E, 0xB7, 0xE8, 0x21, 0xF6,
        0x3E, 0x41, 0xF5, 0x49, 0xBE, 0x05, 0x9D, 0x44, 0x0B, 0xF2, 0xFC, 0x4B, 0x94, 0x47, 0x63,
        0x78, 0xB5, 0xF5, 0xC6, 0x1E, 0x35, 0xFA, 0xA1, 0x3F, 0x8E, 0xCD, 0x61, 0xD9, 0xBF, 0x81,
        0x2B, 0x3D, 0x74, 0xFC, 0xEF, 0x2B, 0xA4, 0xC7, 0x82, 0x12, 0xB1, 0x8B, 0xDA, 0xFE, 0x4D,
        0xEC, 0xE5, 0x9F, 0x31, 0x3D, 0x71, 0xEE, 0xA1, 0x19, 0xEB, 0x5B, 0x22, 0x2E, 0x73, 0x28,
        0xEB, 0xF9, 0xAD, 0xF7, 0xD3, 0xFE, 0xA2, 0xC8, 0xD2, 0x22, 0x1F, 0xAA, 0x54, 0xE4, 0x0D,
        0xA8, 0x72, 0xC0, 0x54, 0xAD, 0xD6, 0x71, 0xB2, 0xAE, 0x27, 0xFF, 0x23, 0xDB, 0xE9, 0x52,
        0xC1, 0xA8, 0x75, 0xD8, 0x69, 0x94, 0x5F, 0xDC, 0xDF, 0xCC, 0x04, 0xEE, 0x86, 0xE6, 0x03,
        0xDC, 0x55, 0x43, 0x95, 0x6A, 0x01, 0x7E, 0xBE, 0x8B, 0xF7, 0x8B, 0xA0, 0x63, 0xF0, 0x4A,
        0x07, 0x22, 0xD2, 0x45, 0x30, 0xC2, 0x48, 0xD3, 0xF3, 0x97, 0xFA, 0xDE, 0x46, 0x8D, 0x10,
        0x1E, 0xD0, 0x02, 0x56, 0xB4, 0x98, 0x1F, 0x7F, 0x0B, 0x01, 0xBB, 0xAA, 0x53, 0x25, 0xFF,
        0x26, 0x60, 0xF0, 0xD6, 0x5B, 0x9A, 0xC4, 0xFB, 0x00, 0xB2, 0x22, 0xF3, 0xD6, 0x43, 0xE9,
        0x19, 0x71, 0x7C, 0xEA, 0x7E, 0xAC, 0xEA, 0xFB, 0xD1, 0xF6, 0xF0, 0x13, 0xE4, 0x37, 0x16,
        0x8A, 0x6F, 0x1C, 0x85, 0x73, 0xBE, 0x8F, 0xC4, 0x34, 0x01, 0xC6, 0xD6, 0xB6, 0xD9, 0x62,
        0x26, 0x63, 0x91, 0x6D, 0xF2, 0x92, 0x4E, 0x6A, 0x23, 0x02, 0x75, 0x03, 0x50, 0xD4, 0x17,
        0x4C, 0x8E, 0x91, 0x02, 0xBD, 0x8A, 0x1D, 0xAD, 0xBD, 0x37, 0xC6, 0x59, 0x60, 0x2A, 0x34,
        0xB4, 0x85, 0x43, 0x9E, 0x66, 0x30, 0x7A, 0xD9, 0x4B, 0x2D, 0xE2, 0x35, 0x36, 0xA3, 0x27,
        0x5D, 0xF0, 0x82, 0xB6, 0x31, 0x4A, 0x18, 0x89, 0xCB, 0xE6, 0xF6, 0x08, 0xA1, 0x7E, 0x93,
        0x9F, 0x84, 0xA8, 0x6A, 0x64, 0x5A, 0xA7, 0x24, 0x45, 0x72, 0x81, 0x46, 0x57, 0x61, 0x97,
        0xC6, 0x0A, 0x94, 0x23, 0x6B, 0xDD, 0xF8, 0xBF, 0xB0, 0x42, 0x35, 0xA7, 0x92, 0xC4, 0x1B,
        0xA3, 0xB4, 0xBD, 0x0E, 0x72, 0x88, 0x3F, 0x0A, 0x54, 0x82, 0x16, 0x00, 0xB3, 0xA8, 0x99,
        0xC5, 0x28, 0xE9, 0x92, 0xBE, 0xCC, 0xFD, 0x37, 0xAC, 0xBC, 0x25, 0x0E, 0x74, 0xC6, 0xA3,
        0xD5, 0xB1, 0x19, 0x20, 0x10, 0xB1, 0xBB, 0x75, 0x39, 0x25, 0xC6, 0xC5, 0x73, 0x75, 0x49,
        0x51, 0x18, 0xC1, 0x78, 0xA6, 0x4C, 0x11, 0x3A, 0xF0, 0x2D, 0x6B, 0x31, 0x10, 0xC9, 0xAE,
        0xCD, 0x61, 0x14, 0x22, 0x99, 0x3C, 0x72, 0xC5, 0xE6, 0x26, 0xCA, 0x06, 0x4F, 0x0B, 0x73,
        0x6C, 0x34, 0xCF, 0x53, 0xC2, 0xB0, 0x4D, 0x27, 0x7B, 0xEB, 0xC3, 0x20, 0x3E, 0x58, 0x84,
        0x51, 0xF8, 0x27, 0x1A, 0xA9, 0xA1, 0x95, 0x89, 0xA0, 0x5D, 0xD2, 0x54, 0xC6, 0x34, 0x89,
        0x08, 0x60, 0xC7, 0xF6, 0x21, 0xB8, 0x19, 0x58, 0x85, 0x2E, 0xA1, 0x11, 0x53, 0x76, 0x05,
        0x1F, 0xF0, 0x86, 0x7D, 0xC7, 0x10, 0x75, 0x1D, 0xCF, 0x95, 0xF5, 0xF7, 0xD6, 0xF1, 0x6F,
        0xC5, 0xD6, 0x22, 0xE4, 0x89, 0x0C, 0x3F, 0xC8, 0x8E, 0xE4, 0x81, 0xD2, 0x34, 0xB9, 0x1E,
        0x74, 0x52, 0x4B, 0xD7, 0x65, 0xC3, 0x77, 0xE4, 0x1B, 0xD0, 0x73, 0x13, 0x70, 0xEF, 0x52,
        0x6D, 0x34, 0xA6, 0xCE, 0x59, 0xA3, 0x29, 0xF3, 0x98, 0xCD, 0x12, 0x94, 0x69, 0xDC, 0x8B,
        0x26, 0x2D, 0x9B, 0xB0, 0x39, 0x9A, 0x46, 0x42, 0x52, 0xA3, 0xD5, 0x4B, 0x8D, 0x1C, 0x9C,
        0x24, 0xB6, 0x2D, 0xA9, 0xC5, 0x20, 0x81, 0xE3, 0xC0, 0xC2, 0x0C, 0x22, 0xC7, 0x67, 0x01,
        0x86, 0x60, 0x37, 0x04, 0x0C, 0xED, 0xCE, 0xF0, 0x90, 0xAA, 0xC8, 0xD5, 0x40, 0x4A, 0x3E,
        0xD7, 0xCD, 0x55, 0x74, 0x06, 0x3F, 0xCB, 0xDC, 0x53, 0x5C, 0x88, 0xD5, 0x48, 0x40, 0x17,
        0xE0, 0x31, 0xBD, 0x0B, 0x49, 0xA3, 0x9D, 0xE2, 0xEF, 0x63, 0x20, 0x5A, 0x4F, 0x1A, 0xD0,
        0xD4, 0x80, 0x8E, 0x14, 0x7A, 0x32, 0xA9, 0x40, 0xF5, 0xFF, 0x4F, 0xA0, 0x2E, 0xAC, 0x84,
        0xF9, 0xC6, 0xA8, 0x28, 0x5A, 0x5B, 0x54, 0xE5, 0x96, 0xFA, 0x50, 0x80, 0x97, 0xEC, 0xC7,
        0xE4, 0x8D, 0x99, 0xE9, 0xF7, 0x8A, 0x67, 0xC5, 0x58, 0x54, 0x08, 0x3C, 0x25, 0x23, 0xE9,
        0xB8, 0xB7, 0xE9, 0xF1, 0x32, 0x53, 0x93, 0x35, 0xE6, 0x8C, 0x61, 0x76, 0x74, 0xED, 0x55,
        0x4C, 0x38, 0xFA, 0xF5, 0x3C, 0x62, 0xE9, 0x66, 0x31, 0x0D, 0x4A, 0x14, 0xDD, 0xE2, 0x02,
        0x27, 0xE3, 0x89, 0xF4, 0x55, 0x76, 0xF9, 0x41, 0x4A, 0x6E, 0x94, 0x04, 0xC4, 0xEB, 0x74,
        0x0C, 0xEC, 0x34, 0x68, 0x56, 0x06, 0x93, 0xF7, 0x37, 0x62, 0x23, 0x78, 0x40, 0xED, 0xA6,
        0xC0, 0x3D, 0xC5, 0xBC, 0x77, 0x2C, 0x1A, 0xB8, 0x9D, 0xDC, 0x13, 0x06, 0x50, 0x58, 0xE8,
        0x2D, 0x6A, 0x9E, 0xB7, 0x96, 0x43, 0xE7, 0x13, 0x9C, 0x65, 0xB1, 0xAE, 0xC2, 0xA3, 0xF0,
        0x8A, 0x0B, 0x83, 0x93, 0x02, 0x82, 0x69, 0x73, 0x8C, 0xED, 0x08, 0x5A, 0xE6, 0x69, 0xC2,
        0x3C, 0xE2, 0xEA, 0xC0, 0xCA, 0x10, 0xF2, 0x46, 0x00, 0x4F, 0xDC, 0x63, 0x3D, 0x49, 0x39,
        0x23, 0x8F, 0xF3, 0x4D, 0x23, 0xF8, 0x05, 0x1D, 0xC7, 0x5F, 0xED, 0xD6, 0xFB, 0xB8, 0x19,
        0xB3, 0x29, 0xBE, 0x84, 0xAC, 0x90, 0xB5, 0x8F, 0xE6, 0xBC, 0x6B, 0x3A, 0x1F, 0xDF, 0x10,
        0x74, 0xA7, 0xDE, 0xC0, 0x9C, 0xDF, 0x65, 0x2C, 0xDC, 0x1B, 0xCA, 0x15, 0xB4, 0xE7, 0x08,
        0x33, 0x2F, 0xCA, 0x0A, 0x3F, 0x30, 0x2B, 0x62, 0x44, 0xE0, 0x18, 0xE3, 0xA1, 0x8E, 0x67,
        0x3A, 0x6C, 0xAE, 0x11, 0x3F, 0x44, 0xCC, 0x07, 0xB4, 0x3E, 0xB9, 0xB1, 0x0E, 0x0D, 0x5E,
        0x9B, 0x2E, 0xC6, 0x9C, 0x6B, 0x7E, 0xB3, 0x92, 0x49, 0xB9, 0xBB, 0x84, 0x05, 0xF3, 0x39,
        0x13, 0x1D, 0xCF, 0xF2, 0x46, 0xBA, 0x54, 0x80, 0x0E, 0x74, 0x81, 0xA4, 0x18, 0xB3, 0x0B,
        0xB4, 0xFA, 0x2D, 0x29, 0x7A, 0x0B, 0x38, 0xF8, 0x07, 0x67, 0x0E, 0x4D, 0x99, 0x3C, 0x68,
        0xF9, 0xED, 0x42, 0x25, 0xA7, 0x45, 0x21, 0xC9, 0xB4, 0xD8, 0x8A, 0x9F, 0xF5, 0xCF, 0xF6,
        0x39, 0x85, 0x11, 0x86, 0x55, 0x7F, 0x24, 0x96, 0xBB, 0x8E, 0xEF, 0xD8, 0x2E, 0xAB, 0xF3,
        0xB3, 0xEB, 0xDE, 0xF0, 0x43, 0x90, 0x40, 0xFC, 0x36, 0x9D, 0xD0, 0xE7, 0x91, 0x4C, 0xE1,
        0x9C, 0xB3, 0xDA, 0x01, 0x08, 0x0C, 0x33, 0x81, 0x4C, 0xC5, 0xE6, 0x32, 0x94, 0x2D, 0x36,
        0x85, 0x0C, 0xBF, 0x9A, 0x7E, 0x7B, 0x4C, 0xAD, 0xBA, 0xC3, 0x27, 0xCC, 0xF0, 0x81, 0x16,
        0xD8, 0xD1, 0x37, 0x78, 0x57, 0xF0, 0xC1, 0x51, 0x5E, 0xB7, 0x9C, 0xBE, 0x80, 0x8E, 0x41,
        0x3A, 0xD1, 0xBD, 0xBE, 0x44, 0x24, 0xEB, 0xDB, 0x16, 0x4B, 0x6D, 0xA5, 0x80, 0xE0, 0xB0,
        0x1D, 0x3C, 0xB6, 0x83, 0x03, 0x0E, 0x1C, 0x45, 0xB4, 0x6B, 0x79, 0xBC, 0x0F, 0xEB, 0x6B,
        0x90, 0xFF, 0x50, 0x9E, 0x8D, 0xEC, 0xC8, 0x10, 0x9E, 0xF2, 0xD9, 0x44, 0x3D, 0x15, 0x54,
        0x91, 0x8C, 0x16, 0x8A, 0x6F, 0xDB, 0xAD, 0xB3, 0xC6, 0xAF, 0xE8, 0x15, 0xB1, 0xE5, 0xB2,
        0x37, 0x4E, 0x2A, 0x9B, 0x1E, 0xAD, 0xB0, 0x91, 0x42, 0x30, 0x6C, 0x68, 0x7C, 0xBA, 0xF7,
        0x69, 0x09, 0xD4, 0x5E, 0xD2, 0x73, 0xEB, 0xB7, 0x2B, 0xFD, 0x26, 0x22, 0x38, 0x73, 0x05,
        0x37, 0xB0, 0x0E, 0x2A, 0x2B, 0x37, 0x07, 0x81, 0x8F, 0x84, 0x06, 0x3C, 0xC8, 0x4F, 0x8B,
        0x4C, 0x0A, 0xD9, 0xDE, 0xE3, 0xFC, 0x12, 0xD8, 0x42, 0x3B, 0x9E, 0x4F, 0x51, 0xC5, 0x6E,
        0xE4, 0x5E, 0x1E, 0x77, 0x67, 0x92, 0xE2, 0xA4, 0x38, 0x39, 0xA2, 0x72, 0x62, 0xE0, 0xC9,
        0x45, 0x72, 0x50, 0x24, 0xD5, 0x3E, 0xCB, 0x12, 0xB8, 0x91, 0x82, 0x30, 0xCF, 0x89, 0xC6,
        0x41, 0x68, 0x6D, 0xF5, 0xF4, 0x18, 0xC7, 0xF6, 0x4A, 0x26, 0x2C, 0x7C, 0x77, 0x29, 0x91,
        0xE6, 0x87, 0x3C, 0x7E, 0x42, 0x24, 0xE3, 0x74, 0xFF, 0x2B, 0x13, 0x88, 0x96, 0xD6, 0xF8,
        0x03, 0x8E, 0x03, 0x80, 0xA8, 0x39, 0x93, 0xEF, 0xB6, 0x32, 0x41, 0x31, 0x66, 0x2F, 0xE2,
        0x23, 0x12, 0x8B, 0x97, 0x04, 0xB9, 0x9B, 0x1B, 0xE1, 0x4B, 0x4D, 0xEE, 0xF0, 0x70, 0xA2,
        0xC8, 0xE1, 0x29, 0x78, 0x08, 0x1C, 0x99, 0x1B, 0xEA, 0xC1, 0x1C, 0x10, 0xA1, 0xA7, 0xB2,
        0x0A, 0x16, 0x1E, 0x91, 0x06, 0xE3, 0x7F, 0xA0, 0x49, 0x24, 0x65, 0x5C, 0x52, 0xB4, 0xCC,
        0xFB, 0x1C, 0xCE, 0xA6, 0xB9, 0x05, 0x91, 0x3A, 0x8D, 0xF7, 0xA3, 0x68, 0x7B, 0x3A, 0x42,
        0xB9, 0xDB, 0x76, 0x70, 0xBF, 0xFA, 0xE2, 0xB1, 0xF1, 0x68, 0x11, 0xD5, 0xB4, 0xDF, 0x43,
        0x3A, 0xF3, 0x81, 0xE9, 0xAE, 0x20, 0x6E, 0x83, 0x51, 0xFC, 0xBC, 0x82, 0xBE, 0x5F, 0x77,
        0xEE, 0xC1, 0xC7, 0xC8, 0xC5, 0x41, 0x4F, 0xEE, 0x1B, 0x8A, 0x6A, 0xE0, 0xE2, 0x37, 0x9D,
        0x1C, 0x06, 0xFA, 0x01, 0xD0, 0x01, 0xDA, 0xD9, 0xFD, 0x2A, 0x39, 0xE8, 0x96, 0x77, 0x41,
        0xDB, 0xF3, 0x9F, 0x89, 0x99, 0x64, 0xFD, 0x95, 0xFC, 0x24, 0x01, 0xB5, 0x2F, 0xD7, 0xF2,
        0x30, 0xFF, 0xAE, 0x2D, 0x4D, 0x89, 0x36, 0xBA, 0x96, 0x95, 0x3C, 0x65, 0x2E, 0x8A, 0x7A,
        0x0E, 0xAC, 0xA2, 0xCF, 0xB9, 0x22, 0xEE, 0x71, 0x64, 0x1D, 0xCF, 0x41, 0x73, 0xFE, 0x13,
        0x62, 0x29, 0xF0, 0xEA, 0xF0, 0xFD, 0xE0, 0x3B, 0x62, 0x05, 0xDB, 0x51, 0x6E, 0x96, 0x22,
        0x27, 0x46, 0x10, 0xDE, 0x97, 0x5B, 0x82, 0x6C, 0x4A, 0x50, 0xBB, 0xEB, 0x9C, 0xF8, 0x8B,
        0x81, 0x38, 0xC5, 0xBE, 0xEF, 0x93, 0xC6, 0xAE, 0xF5, 0x09, 0x95, 0x23, 0x24, 0x87, 0x92,
        0x5E, 0x80, 0x3E, 0x69, 0x6C, 0x0C, 0xAE, 0xAB, 0x2D, 0x6E, 0x7B, 0xF2, 0xA2, 0xB0, 0xD5,
        0x40, 0xE3, 0xD5, 0x96, 0x0C, 0x24, 0xB7, 0xCE, 0xB0, 0x56, 0x5A, 0x13, 0x90, 0xCD, 0x45,
        0xDC, 0x81, 0xA7, 0xD0, 0x25, 0x9E, 0xD2, 0x16, 0xD6, 0x0F, 0xE5, 0x65, 0x08, 0x7E, 0xD3,
        0x18, 0x2A, 0xA7, 0xDE, 0x28, 0x26, 0x56, 0xBF, 0x28, 0x88, 0x4F, 0xF7, 0x52, 0xDC, 0x0B,
        0x68, 0x83, 0xEE, 0x69, 0xEB, 0x71, 0x7C, 0xAF, 0xBC, 0x9E, 0x1F, 0xE8, 0xE8, 0x65, 0x18,
        0x5D, 0x64, 0xED, 0x83, 0xC4, 0xCA, 0xBC, 0x11, 0xD3, 0xFC, 0x68, 0x26, 0x79, 0xE9, 0x72,
        0xA0, 0x8E, 0x86, 0x51, 0xDF, 0x2F, 0x06, 0xA5, 0x5E, 0xC5, 0x3A, 0x5D, 0x1F, 0x87, 0x87,
        0xA4, 0xC7, 0x79, 0x0D, 0x83, 0x64, 0x4B, 0x1F, 0xA9, 0x50, 0x14, 0x9B, 0x56, 0xF8, 0x67,
        0x0E, 0x11, 0x9D, 0xEB, 0x8A, 0xA6, 0x8C, 0x9B, 0xA8, 0x42, 0x7D, 0x50, 0xC1, 0x3A, 0x4F,
        0x67, 0xA9, 0xD4, 0x7A, 0x33, 0x2A, 0xAA, 0x97, 0x74, 0x8C, 0x27, 0xFB, 0x01, 0xA2, 0xB8,
        0x5D, 0x24, 0x02, 0x6F, 0x56, 0xDC, 0xAE, 0x6E, 0x2F, 0x9F, 0xB2, 0x96, 0x0C, 0x6B, 0x48,
        0xF5, 0xA9, 0x45, 0xAF, 0xC7, 0xFE, 0x09, 0x69, 0x1C, 0x81, 0x0D, 0xB4, 0x82, 0x21, 0x93,
        0xC2, 0x2A, 0x37, 0x4A, 0x06, 0x73, 0x0B, 0x9F, 0xFC, 0x46, 0xF1, 0x34, 0xB8, 0xF3, 0x76,
        0xAB, 0xA9, 0xA1, 0x68, 0xBE, 0xFC, 0x3D, 0x23, 0x30, 0xC2, 0x0C, 0xF7, 0xB0, 0x06, 0xF8,
        0x5C, 0x32, 0xCC, 0xEA, 0x1C, 0xEE, 0xCD, 0x5C, 0xA9, 0x54, 0xD6, 0x36, 0xA0, 0x29, 0x4F,
        0xA5, 0xE0, 0x46, 0xA9, 0x15, 0x2C, 0x81, 0x8D, 0xD5, 0xCA, 0x96, 0xA2, 0x7D, 0x51, 0x39,
        0xD6, 0x83, 0xEB, 0x82, 0xC0, 0xD9, 0x54, 0x88, 0xF8, 0x53, 0xAE, 0x17, 0x1B, 0xA0, 0xD5,
        0x26, 0xC5, 0xC6, 0x52, 0x6B, 0xEB, 0x80, 0x82, 0xA1, 0x4C, 0x64, 0xDC, 0xBD, 0xE4, 0x1F,
        0x64, 0xCA, 0x68, 0xC5, 0x2D, 0x1D, 0x48, 0xF3, 0x73, 0xD7, 0x28, 0x62, 0xF9, 0x77, 0x94,
        0x33, 0x6B, 0x62, 0xEE, 0xA7, 0x85, 0xA5, 0x87, 0xDF, 0x11, 0xAB, 0xF5, 0xF2, 0xFC, 0x2C,
        0x87, 0x3C, 0x83, 0x22, 0x68, 0x13, 0x58, 0x60, 0x32, 0x85, 0x61, 0xD1, 0x74, 0xDF, 0xD1,
        0x21, 0x9C, 0xA4, 0x1C, 0xBF, 0x60, 0xB8, 0x8C, 0x7F, 0xD1, 0xE1, 0xA5, 0x81, 0x09, 0x36,
        0xA0, 0x36, 0xA8, 0xE7, 0xD3, 0xF1, 0x21, 0xB1, 0xCA, 0x00, 0x33, 0xF1, 0x1B, 0x25, 0x15,
        0xC3, 0x48, 0xBF, 0x5D, 0x49, 0xF9, 0x5F, 0x23, 0x52, 0x38, 0xAB, 0xD5, 0xC9, 0x53, 0xB2,
        0xAC, 0x93, 0xE6, 0x18, 0x4F, 0x6D, 0xE8, 0x47, 0x92, 0x40, 0xA4, 0x55, 0xF1, 0x75, 0x00,
        0xCC, 0xBD, 0x95, 0x6F, 0x1A, 0x99, 0xB1, 0x1C, 0xD0, 0x49, 0xD7, 0x63, 0x0B, 0x41, 0xC4,
        0xC7, 0xF2, 0x2C, 0xD6, 0x48, 0x15, 0xC9, 0xC3, 0x2C, 0x1E, 0x6A, 0x2B, 0xF2, 0x50, 0x08,
        0xE6, 0x5A, 0x7B, 0x0D, 0x3B, 0xC4, 0x62, 0x94,
    ];

    let mut cmd = MailboxReq::GetIdevMldsa87Cert(GetIdevMldsa87CertReq {
        hdr: MailboxReqHeader { chksum: 0 },
        tbs,
        signature,
        tbs_size: TBS_SIZE as u32,
    });
    cmd.populate_chksum().unwrap();

    let resp = model
        .mailbox_execute(
            u32::from(CommandId::GET_IDEV_MLDSA87_CERT),
            cmd.as_bytes().unwrap(),
        )
        .unwrap()
        .expect("We expected a response");

    assert!(resp.len() <= std::mem::size_of::<GetIdevCertResp>());
    assert_ne!(resp, [0u8; GetIdevMldsa87CertReq::DATA_MAX_SIZE]);
}

#[test]
fn test_idev_id_cert_size_too_big() {
    // Test with tbs_size too big.
    let mut cmd = MailboxReq::GetIdevEcc384Cert(GetIdevEcc384CertReq {
        hdr: MailboxReqHeader { chksum: 0 },
        tbs: [0u8; GetIdevEcc384CertReq::DATA_MAX_SIZE],
        signature_r: [0u8; 48],
        signature_s: [0u8; 48],
        tbs_size: GetIdevEcc384CertReq::DATA_MAX_SIZE as u32 + 1,
    });
    assert_eq!(
        cmd.populate_chksum(),
        Err(CaliptraError::RUNTIME_MAILBOX_API_REQUEST_DATA_LEN_TOO_LARGE)
    );
}

fn get_ldev_cert(model: &mut DefaultHwModel) -> GetLdevCertResp {
    let payload = MailboxReqHeader {
        chksum: caliptra_common::checksum::calc_checksum(
            u32::from(CommandId::GET_LDEV_ECC384_CERT),
            &[],
        ),
    };
    let resp = model
        .mailbox_execute(
            u32::from(CommandId::GET_LDEV_ECC384_CERT),
            payload.as_bytes(),
        )
        .unwrap()
        .unwrap();
    assert!(resp.len() <= std::mem::size_of::<GetLdevCertResp>());
    let mut ldev_resp = GetLdevCertResp::default();
    ldev_resp.as_mut_bytes()[..resp.len()].copy_from_slice(&resp);
    ldev_resp
}

#[test]
fn test_ldev_cert() {
    let mut model = run_rt_test(RuntimeTestArgs::default());

    let ldev_resp = get_ldev_cert(&mut model);
    let ldev_cert: X509 = X509::from_der(&ldev_resp.data[..ldev_resp.data_size as usize]).unwrap();

    // Get IDev public key
    let payload = MailboxReqHeader {
        chksum: caliptra_common::checksum::calc_checksum(
            u32::from(CommandId::GET_IDEV_ECC384_INFO),
            &[],
        ),
    };
    let resp = model
        .mailbox_execute(
            u32::from(CommandId::GET_IDEV_ECC384_INFO),
            payload.as_bytes(),
        )
        .unwrap()
        .unwrap();
    let idev_resp = GetIdevInfoResp::read_from_bytes(resp.as_slice()).unwrap();

    // Check the LDevID is signed by IDevID
    let group = EcGroup::from_curve_name(Nid::SECP384R1).unwrap();
    let idev_x = &BigNum::from_slice(&idev_resp.idev_pub_x).unwrap();
    let idev_y = &BigNum::from_slice(&idev_resp.idev_pub_y).unwrap();

    let idev_ec_key = EcKey::from_public_key_affine_coordinates(&group, idev_x, idev_y).unwrap();
    assert!(ldev_cert
        .verify(&PKey::from_ec_key(idev_ec_key).unwrap())
        .unwrap());
}

// [TODO][CAP2]: Verify the cert that is returned.
#[test]
fn test_get_ldev_mldsa_cert() {
    let mut model = run_rt_test(RuntimeTestArgs::default());

    let payload = MailboxReqHeader {
        chksum: caliptra_common::checksum::calc_checksum(
            u32::from(CommandId::GET_LDEV_MLDSA87_CERT),
            &[],
        ),
    };
    let resp = model
        .mailbox_execute(
            u32::from(CommandId::GET_LDEV_MLDSA87_CERT),
            payload.as_bytes(),
        )
        .unwrap()
        .unwrap();
    assert!(resp.len() <= std::mem::size_of::<GetLdevCertResp>());
    assert_ne!(resp, [0; GetLdevCertResp::DATA_MAX_SIZE]);
}

#[test]
fn test_fmc_alias_cert() {
    let mut model = run_rt_test(RuntimeTestArgs::default());

    let ldev_resp = get_ldev_cert(&mut model);
    let ldev_cert: X509 = X509::from_der(&ldev_resp.data[..ldev_resp.data_size as usize]).unwrap();

    let fmc_resp = get_ecc_fmc_alias_cert(&mut model);
    let fmc_cert: X509 = X509::from_der(&fmc_resp.data[..fmc_resp.data_size as usize]).unwrap();

    // Check the FMC is signed by LDevID and that subject/issuer names match
    assert!(fmc_cert.verify(&ldev_cert.public_key().unwrap()).unwrap());
    assert_eq!(
        fmc_cert
            .issuer_name()
            .try_cmp(ldev_cert.subject_name())
            .unwrap(),
        core::cmp::Ordering::Equal
    );
}

#[test]
fn test_rt_alias_cert() {
    let mut model = run_rt_test(RuntimeTestArgs::default());

    let fmc_resp = get_ecc_fmc_alias_cert(&mut model);
    let fmc_cert: X509 = X509::from_der(&fmc_resp.data[..fmc_resp.data_size as usize]).unwrap();

    let rt_resp = get_rt_alias_cert(&mut model);
    let rt_cert: X509 = X509::from_der(&rt_resp.data[..rt_resp.data_size as usize]).unwrap();

    // Check that RT Alias is signed by FMC and that subject/issuer names match
    assert!(rt_cert.verify(&fmc_cert.public_key().unwrap()).unwrap());
    assert_eq!(
        rt_cert
            .issuer_name()
            .try_cmp(fmc_cert.subject_name())
            .unwrap(),
        core::cmp::Ordering::Equal
    );
}

#[test]
fn test_dpe_leaf_cert() {
    let mut model = run_rt_test(RuntimeTestArgs::default());

    let rt_resp = get_rt_alias_cert(&mut model);
    let rt_cert: X509 = X509::from_der(&rt_resp.data[..rt_resp.data_size as usize]).unwrap();

    let certify_key_cmd = CertifyKeyCmd {
        handle: ContextHandle::default(),
        label: TEST_LABEL,
        flags: CertifyKeyFlags::empty(),
        format: CertifyKeyCmd::FORMAT_X509,
    };
    let resp = execute_dpe_cmd(
        &mut model,
        &mut Command::CertifyKey(&certify_key_cmd),
        DpeResult::Success,
    );
    let Some(Response::CertifyKey(certify_key_resp)) = resp else {
        panic!("Wrong response type!");
    };
    let dpe_leaf_cert: X509 =
        X509::from_der(&certify_key_resp.cert[..certify_key_resp.cert_size as usize]).unwrap();

    // Check that DPE Leaf Cert is signed by RT alias pub key and that subject/issuer names match
    assert!(dpe_leaf_cert
        .verify(&rt_cert.public_key().unwrap())
        .unwrap());
    assert_eq!(
        dpe_leaf_cert
            .issuer_name()
            .try_cmp(rt_cert.subject_name())
            .unwrap(),
        core::cmp::Ordering::Equal
    );
}

#[test]
fn test_full_cert_chain() {
    let mut model = run_rt_test(RuntimeTestArgs::default());

    let ldev_resp = get_ldev_cert(&mut model);
    let ldev_cert: X509 = X509::from_der(&ldev_resp.data[..ldev_resp.data_size as usize]).unwrap();

    let fmc_resp = get_ecc_fmc_alias_cert(&mut model);
    let fmc_cert: X509 = X509::from_der(&fmc_resp.data[..fmc_resp.data_size as usize]).unwrap();

    let rt_resp = get_rt_alias_cert(&mut model);
    let rt_cert: X509 = X509::from_der(&rt_resp.data[..rt_resp.data_size as usize]).unwrap();

    // Verify full cert chain
    let mut roots_bldr = X509StoreBuilder::new().unwrap();
    roots_bldr.add_cert(ldev_cert).unwrap();
    roots_bldr
        .set_flags(X509VerifyFlags::X509_STRICT | X509VerifyFlags::PARTIAL_CHAIN)
        .unwrap();
    let roots = roots_bldr.build();
    let mut cert_store = X509StoreContext::new().unwrap();
    let mut chain = Stack::new().unwrap();
    chain.push(fmc_cert).unwrap();
    cert_store
        .init(&roots, &rt_cert, &chain, |c| {
            let success = c.verify_cert().unwrap();
            assert_eq!(c.error(), X509VerifyResult::OK);
            assert!(success);

            Ok(())
        })
        .unwrap();
}

fn get_dpe_leaf_cert(model: &mut DefaultHwModel) -> CertifyKeyResp {
    let certify_key_cmd = CertifyKeyCmd {
        handle: ContextHandle::default(),
        label: TEST_LABEL,
        flags: CertifyKeyFlags::empty(),
        format: CertifyKeyCmd::FORMAT_X509,
    };
    let resp = execute_dpe_cmd(
        model,
        &mut Command::CertifyKey(&certify_key_cmd),
        DpeResult::Success,
    );
    let Some(Response::CertifyKey(certify_key_resp)) = resp else {
        panic!("Wrong response type!");
    };
    certify_key_resp
}

// Helper for cold reset compatible with SW emulator
// NOTE: Assumes all other boot and init params are default except for ROM and FW image
fn cold_reset(
    mut hw: DefaultHwModel,
    rom: &[u8],
    fw_image: &[u8],
    pqc_key_type: FwVerificationPqcKeyType,
) -> DefaultHwModel {
    if cfg!(any(feature = "fpga_realtime", feature = "verilator")) {
        // Re-creating the model does not seem to work for FPGA (and SW emulator cannot cold reset)
        hw.cold_reset();
    } else {
        hw = caliptra_hw_model::new_unbooted(InitParams {
            rom,
            ..Default::default()
        })
        .unwrap();
    }
    let fuses = Fuses {
        fuse_pqc_key_type: pqc_key_type as u32,
        ..Default::default()
    };
    hw.boot(BootParams {
        fw_image: Some(fw_image),
        fuses,
        ..Default::default()
    })
    .unwrap();
    hw
}

// Provide a measurement to Caliptra using each of the 3 methods
//      1. Stash measurement at ROM
//      2. Stash measurement at runtime
//      3. DPE derive context (at runtime)
// Confirm the resulting DPE leaf cert is identical in all three cases
#[test]
#[allow(dead_code)]
pub fn test_all_measurement_apis() {
    for pqc_key_type in PQC_KEY_TYPE.iter() {
        let image_options = ImageOptions {
            pqc_key_type: *pqc_key_type,
            ..Default::default()
        };
        // Shared inputs for all 3 methods
        let measurement: [u8; 48] = core::array::from_fn(|i| (i + 1) as u8);
        let tci_type: [u8; 4] = [101, 102, 103, 104];
        let rom = caliptra_builder::rom_for_fw_integration_tests().unwrap();
        let fw_image =
            caliptra_builder::build_and_sign_image(&FMC_WITH_UART, &APP_WITH_UART, image_options)
                .unwrap()
                .to_bytes()
                .unwrap();

        //
        // 1. ROM STASH MEASUREMENT
        //      Stash a measurement, boot to runtime, then get the DPE cert
        //      Start with a fresh cold boot for each method
        //
        let fuses = Fuses {
            fuse_pqc_key_type: *pqc_key_type as u32,
            ..Default::default()
        };
        let mut hw = caliptra_hw_model::new(
            InitParams {
                rom: &rom,
                ..Default::default()
            },
            BootParams {
                fuses,
                ..Default::default()
            },
        )
        .unwrap();

        // Send the stash measurement command
        let mut stash_measurement_payload = MailboxReq::StashMeasurement(StashMeasurementReq {
            hdr: MailboxReqHeader {
                chksum: caliptra_common::checksum::calc_checksum(
                    u32::from(CommandId::STASH_MEASUREMENT),
                    &[],
                ),
            },
            metadata: tci_type.as_bytes().try_into().unwrap(),
            measurement,
            ..Default::default()
        });
        stash_measurement_payload.populate_chksum().unwrap();
        let _resp = hw
            .mailbox_execute(
                u32::from(CommandId::STASH_MEASUREMENT),
                stash_measurement_payload.as_bytes().unwrap(),
            )
            .unwrap()
            .unwrap();

        // Get to runtime
        hw.upload_firmware(&fw_image).unwrap();

        // Get DPE cert
        let dpe_cert_resp = get_dpe_leaf_cert(&mut hw);
        let rom_stash_dpe_cert = &dpe_cert_resp.cert[..dpe_cert_resp.cert_size as usize];

        //
        // 2. RUNTIME STASH MEASUREMENT
        //      Boot to runtime, stash a measurement, then get the DPE cert
        //      Start with a fresh cold boot for each method
        //
        hw = cold_reset(hw, &rom, &fw_image, *pqc_key_type);

        // Send the stash measurement command
        let _resp = hw
            .mailbox_execute(
                u32::from(CommandId::STASH_MEASUREMENT),
                stash_measurement_payload.as_bytes().unwrap(),
            )
            .unwrap()
            .unwrap();

        // Get DPE cert
        let dpe_cert_resp = get_dpe_leaf_cert(&mut hw);
        let rt_stash_dpe_cert = &dpe_cert_resp.cert[..dpe_cert_resp.cert_size as usize];

        //
        // 3. DPE DERIVE CONTEXT
        //      Boot to runtime, perform DPE derive context, then get the DPE cert
        //      Start with a fresh cold boot for each method
        //
        hw = cold_reset(hw, &rom, &fw_image, *pqc_key_type);

        // Send derive context call
        let derive_context_cmd = DeriveContextCmd {
            handle: ContextHandle::default(),
            data: measurement,
            flags: DeriveContextFlags::MAKE_DEFAULT
                | DeriveContextFlags::INPUT_ALLOW_CA
                | DeriveContextFlags::INPUT_ALLOW_X509,
            tci_type: u32::read_from_bytes(&tci_type[..]).unwrap(),
            target_locality: 0,
        };
        let resp = execute_dpe_cmd(
            &mut hw,
            &mut Command::DeriveContext(&derive_context_cmd),
            DpeResult::Success,
        );
        let Some(Response::DeriveContext(_derive_ctx_resp)) = resp else {
            panic!("Wrong response type!");
        };

        // Get DPE cert
        let dpe_cert_resp = get_dpe_leaf_cert(&mut hw);
        let derive_context_dpe_cert = &dpe_cert_resp.cert[..dpe_cert_resp.cert_size as usize];

        //
        // COMPARE CERTS
        // Certs should be exactly the same regardless of method
        //
        assert_eq!(rom_stash_dpe_cert, rt_stash_dpe_cert);
        assert_eq!(rom_stash_dpe_cert, derive_context_dpe_cert);
    }
}
