use crate::common::{build_ready_runtime_model, wait_runtime_ready, BuildArgs};
use caliptra_common::{
    checksum::verify_checksum,
    mailbox_api::{
        CommandId, EcdsaVerifyReq, LmsVerifyReq, MailboxReq, MailboxReqHeader, MailboxRespHeader,
    },
};
use caliptra_hw_model::{DefaultHwModel, DeviceLifecycle, HwModel, SecurityState};
use caliptra_lms_types::{LmsPublicKey, LmsSignature};

use openssl::sha::sha384;
use zerocopy::{FromBytes, IntoBytes};

/// Build the ECDSA-verify request
fn build_ecdsa_verify_payload_bytes() -> Vec<u8> {
    // Test message and SHA-384
    let msg: &[u8] = &[
        0x9d, 0xd7, 0x89, 0xea, 0x25, 0xc0, 0x47, 0x45, 0xd5, 0x7a, 0x38, 0x1f, 0x22, 0xde, 0x01,
        0xfb, 0x0a, 0xbd, 0x3c, 0x72, 0xdb, 0xde, 0xfd, 0x44, 0xe4, 0x32, 0x13, 0xc1, 0x89, 0x58,
        0x3e, 0xef, 0x85, 0xba, 0x66, 0x20, 0x44, 0xda, 0x3d, 0xe2, 0xdd, 0x86, 0x70, 0xe6, 0x32,
        0x51, 0x54, 0x48, 0x01, 0x55, 0xbb, 0xee, 0xbb, 0x70, 0x2c, 0x75, 0x78, 0x1a, 0xc3, 0x2e,
        0x13, 0x94, 0x18, 0x60, 0xcb, 0x57, 0x6f, 0xe3, 0x7a, 0x05, 0xb7, 0x57, 0xda, 0x5b, 0x5b,
        0x41, 0x8f, 0x6d, 0xd7, 0xc3, 0x0b, 0x04, 0x2e, 0x40, 0xf4, 0x39, 0x5a, 0x34, 0x2a, 0xe4,
        0xdc, 0xe0, 0x56, 0x34, 0xc3, 0x36, 0x25, 0xe2, 0xbc, 0x52, 0x43, 0x45, 0x48, 0x1f, 0x7e,
        0x25, 0x3d, 0x95, 0x51, 0x26, 0x68, 0x23, 0x77, 0x1b, 0x25, 0x17, 0x05, 0xb4, 0xa8, 0x51,
        0x66, 0x02, 0x2a, 0x37, 0xac, 0x28, 0xf1, 0xbd,
    ];
    let hash = sha384(msg);

    let mut req = MailboxReq::EcdsaVerify(EcdsaVerifyReq {
        hdr: MailboxReqHeader { chksum: 0 },
        pub_key_x: [
            0xcb, 0x90, 0x8b, 0x1f, 0xd5, 0x16, 0xa5, 0x7b, 0x8e, 0xe1, 0xe1, 0x43, 0x83, 0x57,
            0x9b, 0x33, 0xcb, 0x15, 0x4f, 0xec, 0xe2, 0x0c, 0x50, 0x35, 0xe2, 0xb3, 0x76, 0x51,
            0x95, 0xd1, 0x95, 0x1d, 0x75, 0xbd, 0x78, 0xfb, 0x23, 0xe0, 0x0f, 0xef, 0x37, 0xd7,
            0xd0, 0x64, 0xfd, 0x9a, 0xf1, 0x44,
        ],
        pub_key_y: [
            0xcd, 0x99, 0xc4, 0x6b, 0x58, 0x57, 0x40, 0x1d, 0xdc, 0xff, 0x2c, 0xf7, 0xcf, 0x82,
            0x21, 0x21, 0xfa, 0xf1, 0xcb, 0xad, 0x9a, 0x01, 0x1b, 0xed, 0x8c, 0x55, 0x1f, 0x6f,
            0x59, 0xb2, 0xc3, 0x60, 0xf7, 0x9b, 0xfb, 0xe3, 0x2a, 0xdb, 0xca, 0xa0, 0x95, 0x83,
            0xbd, 0xfd, 0xf7, 0xc3, 0x74, 0xbb,
        ],
        signature_r: [
            0x33, 0xf6, 0x4f, 0xb6, 0x5c, 0xd6, 0xa8, 0x91, 0x85, 0x23, 0xf2, 0x3a, 0xea, 0x0b,
            0xbc, 0xf5, 0x6b, 0xba, 0x1d, 0xac, 0xa7, 0xaf, 0xf8, 0x17, 0xc8, 0x79, 0x1d, 0xc9,
            0x24, 0x28, 0xd6, 0x05, 0xac, 0x62, 0x9d, 0xe2, 0xe8, 0x47, 0xd4, 0x3c, 0xee, 0x55,
            0xba, 0x9e, 0x4a, 0x0e, 0x83, 0xba,
        ],
        signature_s: [
            0x44, 0x28, 0xbb, 0x47, 0x8a, 0x43, 0xac, 0x73, 0xec, 0xd6, 0xde, 0x51, 0xdd, 0xf7,
            0xc2, 0x8f, 0xf3, 0xc2, 0x44, 0x16, 0x25, 0xa0, 0x81, 0x71, 0x43, 0x37, 0xdd, 0x44,
            0xfe, 0xa8, 0x01, 0x1b, 0xae, 0x71, 0x95, 0x9a, 0x10, 0x94, 0x7b, 0x6e, 0xa3, 0x3f,
            0x77, 0xe1, 0x28, 0xd3, 0xc6, 0xae,
        ],
        hash,
    });
    req.populate_chksum().unwrap();
    let req_byte = req.as_bytes().unwrap().to_vec();
    req_byte
}

/// Helper to execute the command and return (raw response bytes, parsed header).
fn send_ecdsa_verify_and_get_hdr(model: &mut DefaultHwModel, req_bytes: &[u8]) {
    let resp = model
        .mailbox_execute(u32::from(CommandId::ECDSA384_SIGNATURE_VERIFY), req_bytes)
        .unwrap()
        .expect("We should have received a response");

    let resp_hdr: &MailboxRespHeader = MailboxRespHeader::ref_from_bytes(resp.as_bytes()).unwrap();

    assert_eq!(
        resp_hdr.fips_status,
        MailboxRespHeader::FIPS_STATUS_APPROVED
    );

    // checksum (over everything after the chksum field)
    assert!(verify_checksum(
        resp_hdr.chksum,
        0x0,
        &resp[core::mem::size_of_val(&resp_hdr.chksum)..],
    ));
}

#[test]
#[cfg(not(any(feature = "fpga_realtime", feature = "fpga_subsystem")))]
fn test_ecdsa384_signature_verify_after_warm_reset() {
    // Spin up runtime on the model/FPGA wrapper
    let args = BuildArgs {
        security_state: *SecurityState::default()
            .set_debug_locked(true)
            .set_device_lifecycle(DeviceLifecycle::Production),
        fmc_version: 3,
        app_version: 5,
        fw_svn: 9,
    };
    let (mut model, _, _, _) = build_ready_runtime_model(args);

    // Build request once; reuse same bytes after warm reset.
    let req_bytes = build_ecdsa_verify_payload_bytes();

    // --- Before warm reset ---
    send_ecdsa_verify_and_get_hdr(&mut model, &req_bytes);

    // Warm reset + wait for runtime ready
    model.warm_reset();
    wait_runtime_ready(&mut model);

    // --- After warm reset (same exact request bytes) ---
    send_ecdsa_verify_and_get_hdr(&mut model, &req_bytes);
}

const MSG_1: [u8; 1024] = [
    0xdf, 0xfc, 0xf1, 0xf9, 0x30, 0xa0, 0x2a, 0x25, 0x71, 0x95, 0x5e, 0x35, 0xd8, 0x00, 0x3b, 0x2d,
    0x67, 0xff, 0x29, 0xed, 0x65, 0x54, 0x30, 0x59, 0x5f, 0x39, 0xb1, 0x15, 0x62, 0xd6, 0x05, 0x0f,
    0x9c, 0x67, 0xac, 0x2e, 0x5e, 0x42, 0x0e, 0x8d, 0xc5, 0xed, 0x67, 0x88, 0x59, 0x18, 0x96, 0xc2,
    0x99, 0xba, 0xa9, 0x6d, 0x27, 0x17, 0x85, 0xf6, 0x17, 0x8d, 0xf8, 0xf8, 0x58, 0x5d, 0xd3, 0x17,
    0x88, 0x03, 0x9d, 0x1e, 0x35, 0x2d, 0x91, 0x75, 0x2d, 0xe4, 0xfc, 0x02, 0x27, 0x28, 0xbe, 0x43,
    0xe7, 0x08, 0x48, 0x20, 0xed, 0xbe, 0x8b, 0xff, 0x44, 0x48, 0x33, 0x18, 0xc6, 0x9f, 0x2d, 0x96,
    0x35, 0xae, 0xb5, 0x5c, 0xde, 0xe8, 0x10, 0x0a, 0xb7, 0x4e, 0x71, 0xb0, 0xa1, 0xeb, 0xf0, 0xdf,
    0x12, 0x76, 0x1e, 0xeb, 0xf9, 0x66, 0x14, 0x80, 0x7e, 0x44, 0x23, 0x75, 0x3e, 0x6d, 0x93, 0xf6,
    0x0e, 0x36, 0x4d, 0xcd, 0x7b, 0x85, 0xf2, 0x8d, 0x90, 0xd9, 0x83, 0x6c, 0x46, 0x27, 0x85, 0xb2,
    0xe0, 0xdf, 0x76, 0x40, 0x88, 0x6d, 0x48, 0x6d, 0x68, 0x7b, 0x1f, 0x43, 0x9e, 0x66, 0x49, 0x4e,
    0xcf, 0x66, 0xb6, 0x74, 0x6f, 0xf0, 0x77, 0x25, 0x94, 0xb7, 0x15, 0x9c, 0x3f, 0x83, 0x0e, 0x15,
    0xa7, 0x41, 0xf9, 0x78, 0x4a, 0x7d, 0x22, 0x47, 0x56, 0xef, 0xe8, 0x51, 0x31, 0x84, 0xf6, 0xe7,
    0xb2, 0x87, 0x09, 0xce, 0x13, 0x6b, 0xf7, 0x2a, 0xc4, 0x5a, 0xae, 0x91, 0xee, 0x60, 0xe9, 0xae,
    0x6c, 0x71, 0xf4, 0x32, 0xc5, 0x1b, 0x4f, 0x87, 0x0f, 0x63, 0xbc, 0x5e, 0xcb, 0x1e, 0x17, 0xad,
    0x84, 0xea, 0x72, 0xd5, 0xc7, 0xa1, 0x0f, 0xb9, 0xda, 0x49, 0x4d, 0xf5, 0x45, 0x94, 0x96, 0x13,
    0xb9, 0x9f, 0x6a, 0x0b, 0xe3, 0xb8, 0x7b, 0x3b, 0x1c, 0x31, 0x3e, 0x5a, 0x57, 0x04, 0x41, 0xa3,
    0x8a, 0x72, 0xc4, 0xf7, 0xe4, 0x72, 0x6e, 0x99, 0xf7, 0x87, 0x7c, 0x04, 0x6d, 0x6a, 0x92, 0x57,
    0x97, 0xa8, 0x28, 0xff, 0x09, 0x2b, 0xb8, 0xfa, 0xb4, 0xa8, 0xd9, 0xdd, 0xd0, 0xca, 0x89, 0x03,
    0xfe, 0xfd, 0x46, 0xee, 0x53, 0x62, 0xe3, 0xa2, 0xf0, 0x66, 0x40, 0x4c, 0x98, 0xce, 0xb4, 0x1b,
    0x94, 0x4e, 0x86, 0x6a, 0x5f, 0x3e, 0xdb, 0x48, 0xfa, 0x5e, 0x68, 0x69, 0xea, 0x36, 0xd6, 0x0f,
    0xd4, 0x88, 0x7b, 0xf6, 0x22, 0x25, 0x08, 0x47, 0x82, 0x35, 0x84, 0x1d, 0x37, 0xae, 0xa4, 0x5c,
    0x1d, 0xd5, 0x2c, 0xd0, 0x5a, 0xd2, 0xf1, 0x51, 0xf4, 0x49, 0xea, 0x70, 0x28, 0x96, 0xde, 0x0a,
    0xed, 0xb1, 0x83, 0xb1, 0x0e, 0x92, 0x3f, 0x9f, 0xf7, 0x85, 0xbd, 0xde, 0x91, 0x09, 0xf5, 0x5a,
    0x1b, 0xab, 0x89, 0xa0, 0x70, 0xdd, 0x5f, 0x76, 0xfd, 0xcb, 0x4c, 0x6d, 0x35, 0x75, 0xd8, 0xbe,
    0x5e, 0xa7, 0xb4, 0x09, 0xf6, 0xb3, 0xcd, 0xb1, 0xbe, 0x78, 0xc4, 0x23, 0xd6, 0x55, 0xae, 0x92,
    0xc1, 0xd9, 0x97, 0x41, 0x6a, 0x7f, 0x9e, 0xbc, 0x8f, 0x96, 0x37, 0xda, 0x98, 0x70, 0x3c, 0xb8,
    0x5d, 0x98, 0xa9, 0x8a, 0x96, 0x37, 0xfd, 0x44, 0xb1, 0x11, 0xc0, 0xe9, 0xdf, 0x2e, 0x2c, 0x0c,
    0xdb, 0xa6, 0x9d, 0x7f, 0x53, 0x43, 0xe8, 0x06, 0xb6, 0x9f, 0x48, 0x2f, 0x3a, 0xcb, 0x75, 0x7b,
    0xe2, 0xba, 0x8a, 0x77, 0x63, 0x9f, 0x28, 0x2c, 0x22, 0x89, 0xbb, 0xc4, 0xe4, 0xee, 0x77, 0x9e,
    0x6b, 0x61, 0x51, 0x55, 0xb4, 0xd2, 0xbf, 0x9e, 0xe4, 0xa6, 0xac, 0xa7, 0xf1, 0xee, 0xf3, 0xf4,
    0x3a, 0x16, 0x18, 0xbe, 0x03, 0xe5, 0x27, 0xe7, 0x9e, 0xd0, 0xbc, 0x90, 0xea, 0xcc, 0xa0, 0x0c,
    0x67, 0x98, 0xb3, 0x2d, 0x05, 0xe1, 0x8d, 0xb5, 0x7d, 0xd9, 0x6f, 0xd2, 0x63, 0x90, 0x6a, 0xfe,
    0x3b, 0x72, 0x26, 0xa8, 0x8b, 0xfe, 0xb6, 0xce, 0xfc, 0x66, 0xea, 0x5b, 0x1d, 0xc8, 0x9a, 0x3c,
    0x81, 0xb4, 0x2c, 0xa8, 0xc9, 0x42, 0x6b, 0xf8, 0xcb, 0xa1, 0x1e, 0x14, 0x52, 0xe5, 0xd5, 0xe9,
    0x0e, 0xb2, 0x2c, 0x10, 0xb5, 0x2c, 0x42, 0x4a, 0x7d, 0x35, 0x81, 0x86, 0x9c, 0x00, 0x8b, 0xa8,
    0x75, 0x72, 0x3a, 0xa4, 0xa9, 0x1c, 0xa4, 0x03, 0x4c, 0xab, 0x2b, 0x41, 0x65, 0x91, 0xd2, 0xa3,
    0xfe, 0xd3, 0x63, 0x45, 0x87, 0x5e, 0x37, 0x73, 0xea, 0x38, 0xf0, 0x4c, 0x9e, 0x86, 0xa1, 0xd5,
    0x4a, 0xb6, 0xa5, 0x40, 0xe9, 0x3b, 0xf5, 0x64, 0x12, 0xa7, 0x85, 0x67, 0xf2, 0xd0, 0xc9, 0xd7,
    0x33, 0x43, 0x46, 0x0e, 0x80, 0xdf, 0xc6, 0xe7, 0x33, 0x26, 0xba, 0xc3, 0x2f, 0x4a, 0x5e, 0xdb,
    0x2a, 0x3c, 0xbc, 0x2e, 0x26, 0x32, 0x59, 0x6b, 0xfa, 0xa0, 0x1d, 0x8b, 0x22, 0x08, 0x44, 0xcc,
    0x36, 0x68, 0x73, 0xc7, 0xf6, 0x4e, 0x33, 0xae, 0x2d, 0x60, 0xec, 0xea, 0x99, 0x24, 0xcc, 0x02,
    0xf6, 0x11, 0x0c, 0x09, 0x96, 0x8e, 0xe1, 0xdb, 0xce, 0x08, 0xcd, 0xef, 0x86, 0x09, 0x73, 0x4d,
    0x88, 0x99, 0x52, 0x10, 0xbe, 0x61, 0xdc, 0x49, 0x17, 0x60, 0x89, 0x39, 0x4c, 0x99, 0x2a, 0x1f,
    0xd0, 0x55, 0xae, 0xcd, 0xca, 0x24, 0x2a, 0xc3, 0x5e, 0x0a, 0xfe, 0x54, 0xe5, 0xe0, 0x9f, 0x8f,
    0x46, 0x57, 0xe6, 0xce, 0x01, 0xee, 0xca, 0x25, 0x5f, 0xa8, 0x7b, 0x21, 0xd3, 0x9a, 0x71, 0x65,
    0x90, 0x4f, 0xaa, 0x15, 0x94, 0x63, 0xbd, 0x7d, 0x79, 0xd1, 0x44, 0x3d, 0x28, 0x6b, 0x75, 0x84,
    0x86, 0x08, 0x26, 0x4b, 0x36, 0x55, 0x1c, 0x29, 0x1a, 0xea, 0x23, 0xbd, 0x84, 0xc6, 0x37, 0xc2,
    0x3c, 0x5a, 0xf8, 0xdf, 0xf1, 0x8c, 0x83, 0xf9, 0xda, 0x63, 0x1e, 0x83, 0x26, 0x00, 0x4a, 0x2f,
    0x31, 0xc2, 0x57, 0x74, 0xce, 0x7d, 0xf6, 0x5c, 0x71, 0x82, 0x4b, 0xd5, 0xf2, 0xc2, 0x22, 0x3f,
    0xd8, 0x96, 0x7a, 0xdd, 0xda, 0xf9, 0x62, 0x93, 0xf3, 0xa9, 0xa1, 0xde, 0xfd, 0xbb, 0x63, 0x9e,
    0x5a, 0xbd, 0x25, 0x44, 0x6f, 0xd1, 0x3d, 0xc6, 0x9a, 0x7f, 0x9c, 0x19, 0x54, 0x4d, 0xdb, 0xfa,
    0xf5, 0x64, 0x7f, 0xfa, 0xa0, 0x65, 0x6d, 0x25, 0x91, 0x9c, 0x2b, 0xe7, 0xee, 0xf8, 0xe6, 0x7d,
    0x91, 0xac, 0x87, 0xe3, 0xdd, 0x8c, 0x71, 0x75, 0x16, 0xd7, 0xd1, 0x19, 0x95, 0x24, 0x48, 0xf8,
    0x0e, 0xf0, 0xce, 0xf0, 0xa5, 0x21, 0x66, 0x7a, 0x73, 0x67, 0xeb, 0x3e, 0x1b, 0xd7, 0xeb, 0x6c,
    0x06, 0x3e, 0x44, 0x25, 0x3a, 0xfb, 0x07, 0xe8, 0x81, 0x3a, 0x73, 0xf4, 0xa9, 0x9d, 0xdd, 0x7d,
    0x4a, 0x8a, 0xd7, 0x02, 0x7b, 0xdf, 0x3c, 0x01, 0x3d, 0xbe, 0x46, 0x38, 0x79, 0x36, 0x34, 0xd6,
    0x83, 0x7d, 0xb7, 0xcb, 0x39, 0x5f, 0xae, 0xd5, 0xc6, 0x5c, 0x08, 0x25, 0xa6, 0xd1, 0xe4, 0x30,
    0xce, 0xa2, 0x7e, 0xed, 0x25, 0x08, 0x50, 0xd9, 0x39, 0xb2, 0x77, 0xfa, 0x4f, 0x84, 0x2f, 0x26,
    0x41, 0x05, 0xd0, 0xcf, 0x49, 0x43, 0x3a, 0x88, 0xbb, 0x50, 0xc1, 0xeb, 0x29, 0x88, 0xf5, 0x9d,
    0x93, 0x55, 0x86, 0x1f, 0x8f, 0xdb, 0xd6, 0xb3, 0x1a, 0x0a, 0x99, 0x93, 0x00, 0xf1, 0xbd, 0xa5,
    0x5d, 0x6a, 0xac, 0xf5, 0x36, 0x30, 0x3d, 0x39, 0x77, 0x15, 0x7c, 0xa0, 0x0a, 0x2a, 0x9a, 0x46,
    0xf5, 0x63, 0x6a, 0xb3, 0x12, 0xda, 0x16, 0x0f, 0x3d, 0x31, 0x8d, 0x64, 0x24, 0xb1, 0xcf, 0xdc,
    0xd0, 0xdd, 0xe1, 0x04, 0x4f, 0x1b, 0xb8, 0x3f, 0xa2, 0xe4, 0xd9, 0x11, 0xfc, 0x87, 0xc3, 0xea,
    0xa2, 0x6a, 0x2b, 0x1f, 0x7e, 0xc5, 0xd3, 0xe0, 0xb6, 0x16, 0x5b, 0xa3, 0xbb, 0x56, 0x27, 0xec,
];
const MSG_1_PUB_KEY_1: [u8; 48] = [
    0, 0, 0, 12, 0, 0, 0, 7, 163, 11, 243, 114, 230, 240, 125, 173, 49, 109, 230, 124, 106, 88,
    181, 175, 254, 105, 112, 20, 129, 2, 238, 251, 83, 151, 128, 225, 160, 163, 55, 4, 179, 145,
    211, 11, 212, 124, 207, 237,
];
const MSG_1_KEY_1_SIG_1: [u8; 1620] = [
    0, 0, 64, 31, 0, 0, 0, 7, 243, 137, 163, 140, 24, 65, 126, 88, 197, 204, 62, 74, 66, 237, 254,
    110, 215, 17, 102, 40, 70, 219, 155, 241, 27, 87, 91, 102, 109, 18, 47, 186, 188, 124, 123,
    172, 203, 169, 59, 246, 121, 92, 26, 174, 228, 214, 195, 54, 212, 201, 200, 49, 139, 85, 124,
    165, 95, 166, 210, 125, 236, 41, 114, 252, 195, 179, 155, 6, 174, 20, 35, 81, 48, 161, 39, 23,
    120, 129, 157, 93, 24, 146, 12, 81, 8, 140, 160, 54, 31, 40, 108, 211, 242, 110, 124, 18, 69,
    90, 249, 244, 159, 208, 203, 115, 188, 108, 167, 225, 71, 20, 136, 28, 201, 242, 105, 134, 155,
    148, 156, 241, 251, 137, 100, 22, 15, 100, 185, 120, 122, 173, 15, 243, 54, 77, 9, 26, 36, 76,
    234, 84, 0, 84, 167, 165, 71, 244, 205, 208, 236, 15, 100, 177, 196, 190, 108, 221, 20, 159,
    199, 119, 73, 201, 204, 82, 44, 124, 49, 232, 142, 17, 58, 85, 185, 137, 89, 241, 251, 85, 186,
    173, 119, 33, 163, 55, 11, 241, 42, 77, 94, 84, 217, 253, 98, 170, 188, 205, 57, 249, 137, 98,
    163, 71, 121, 115, 22, 163, 226, 222, 199, 33, 21, 77, 57, 151, 92, 196, 154, 181, 189, 163,
    118, 186, 148, 201, 108, 68, 217, 149, 97, 22, 95, 61, 246, 63, 192, 109, 203, 124, 81, 38, 27,
    15, 222, 12, 144, 240, 226, 82, 234, 54, 119, 254, 191, 28, 252, 236, 205, 205, 249, 228, 77,
    101, 252, 184, 75, 47, 70, 125, 185, 102, 180, 143, 60, 168, 120, 17, 160, 191, 150, 120, 29,
    226, 135, 42, 184, 90, 0, 49, 35, 217, 91, 12, 75, 110, 40, 224, 249, 92, 169, 11, 208, 231,
    88, 114, 231, 249, 78, 41, 85, 95, 223, 52, 108, 200, 230, 6, 154, 195, 197, 209, 171, 24, 27,
    12, 0, 237, 126, 132, 97, 182, 255, 30, 45, 72, 3, 162, 114, 5, 139, 127, 8, 66, 210, 29, 116,
    174, 248, 194, 91, 173, 210, 242, 175, 175, 60, 228, 178, 178, 64, 141, 127, 149, 83, 163, 27,
    151, 51, 168, 248, 158, 19, 225, 72, 164, 144, 194, 137, 208, 65, 2, 220, 133, 112, 150, 245,
    246, 202, 11, 222, 30, 80, 158, 54, 150, 240, 39, 203, 169, 141, 13, 15, 128, 247, 224, 77,
    137, 189, 236, 7, 91, 23, 179, 73, 93, 46, 249, 101, 1, 49, 169, 240, 119, 139, 222, 232, 105,
    218, 116, 27, 137, 147, 202, 196, 98, 243, 218, 196, 61, 191, 12, 232, 107, 54, 158, 90, 58,
    200, 218, 131, 114, 120, 245, 218, 177, 69, 49, 45, 218, 20, 179, 93, 248, 227, 224, 144, 229,
    235, 192, 79, 96, 129, 121, 45, 65, 143, 181, 121, 24, 73, 252, 90, 239, 154, 46, 99, 217, 153,
    86, 147, 208, 176, 246, 146, 135, 252, 105, 186, 163, 93, 150, 107, 143, 3, 74, 3, 21, 135,
    220, 127, 201, 133, 37, 192, 242, 179, 33, 240, 90, 188, 38, 210, 227, 132, 53, 61, 105, 110,
    76, 118, 60, 224, 83, 185, 94, 21, 186, 101, 212, 6, 196, 8, 235, 155, 179, 209, 38, 95, 151,
    163, 48, 15, 139, 164, 128, 225, 201, 46, 58, 228, 74, 176, 100, 101, 6, 245, 202, 88, 210,
    148, 95, 36, 230, 2, 227, 167, 161, 17, 13, 29, 202, 80, 245, 126, 211, 86, 240, 165, 147, 36,
    62, 39, 131, 112, 1, 51, 95, 197, 118, 157, 200, 117, 110, 254, 244, 53, 161, 213, 62, 232, 17,
    91, 218, 255, 171, 190, 191, 102, 127, 73, 158, 74, 18, 57, 120, 130, 139, 218, 9, 252, 65,
    189, 207, 109, 222, 231, 155, 84, 101, 102, 90, 70, 121, 29, 6, 183, 55, 198, 36, 93, 44, 174,
    184, 45, 162, 141, 130, 224, 173, 66, 252, 191, 80, 11, 137, 222, 119, 98, 126, 182, 186, 210,
    52, 75, 232, 145, 52, 233, 92, 114, 137, 75, 48, 115, 143, 3, 248, 176, 227, 176, 44, 137, 79,
    129, 144, 82, 13, 52, 201, 231, 11, 67, 87, 111, 245, 44, 209, 224, 201, 202, 98, 33, 45, 106,
    156, 183, 25, 79, 178, 212, 5, 112, 163, 58, 169, 240, 69, 126, 170, 170, 182, 153, 10, 108,
    149, 224, 98, 83, 82, 233, 254, 195, 216, 89, 80, 97, 36, 79, 244, 228, 120, 126, 122, 155, 64,
    134, 217, 12, 3, 25, 159, 253, 37, 112, 41, 255, 62, 237, 164, 106, 71, 91, 61, 212, 143, 199,
    58, 52, 98, 167, 32, 44, 225, 102, 5, 69, 249, 172, 204, 138, 77, 11, 147, 9, 245, 48, 12, 185,
    151, 198, 28, 161, 71, 53, 59, 247, 208, 11, 130, 37, 73, 241, 190, 81, 115, 236, 120, 248,
    141, 245, 231, 199, 196, 176, 64, 116, 238, 55, 195, 67, 200, 96, 10, 132, 34, 72, 114, 225,
    127, 57, 32, 125, 190, 42, 49, 2, 38, 235, 36, 177, 236, 219, 188, 154, 82, 174, 191, 229, 155,
    105, 122, 159, 109, 233, 243, 142, 182, 226, 148, 67, 156, 232, 179, 70, 174, 114, 162, 143,
    182, 11, 135, 211, 27, 176, 176, 15, 69, 222, 147, 250, 155, 134, 234, 40, 38, 159, 175, 62,
    43, 207, 3, 186, 104, 189, 13, 143, 163, 105, 229, 185, 248, 93, 55, 118, 40, 0, 86, 217, 155,
    226, 179, 245, 163, 21, 199, 150, 2, 234, 45, 253, 200, 172, 212, 236, 49, 50, 18, 121, 165,
    210, 114, 202, 224, 84, 104, 171, 179, 245, 134, 197, 140, 138, 167, 145, 207, 226, 1, 160, 94,
    206, 201, 102, 35, 60, 223, 0, 9, 82, 238, 145, 40, 253, 249, 61, 72, 113, 72, 147, 49, 89,
    150, 121, 176, 148, 120, 59, 227, 189, 232, 26, 83, 98, 86, 59, 52, 121, 162, 9, 210, 28, 199,
    247, 165, 195, 58, 122, 121, 24, 169, 1, 91, 222, 48, 48, 102, 147, 127, 255, 199, 137, 203,
    246, 157, 99, 43, 89, 246, 27, 106, 146, 20, 25, 71, 206, 10, 141, 45, 158, 186, 219, 187, 87,
    210, 253, 204, 72, 47, 164, 221, 174, 161, 224, 204, 184, 119, 138, 10, 162, 151, 63, 112, 181,
    162, 89, 169, 224, 45, 69, 146, 19, 189, 35, 182, 193, 179, 99, 104, 190, 83, 114, 203, 204,
    90, 127, 161, 189, 147, 47, 27, 81, 12, 27, 218, 62, 224, 123, 80, 131, 140, 207, 7, 62, 107,
    99, 85, 161, 95, 67, 65, 235, 168, 183, 228, 168, 225, 62, 254, 69, 39, 233, 145, 140, 69, 51,
    174, 188, 15, 218, 52, 175, 238, 146, 172, 192, 95, 89, 48, 39, 6, 65, 59, 176, 214, 203, 148,
    10, 34, 90, 158, 88, 133, 4, 147, 198, 138, 151, 237, 121, 252, 173, 231, 195, 174, 66, 74, 88,
    228, 233, 107, 27, 164, 113, 13, 11, 70, 28, 145, 141, 124, 189, 130, 203, 35, 14, 156, 14, 32,
    230, 143, 62, 230, 132, 138, 193, 75, 12, 144, 224, 140, 36, 7, 69, 89, 202, 24, 232, 123, 241,
    48, 71, 64, 202, 85, 208, 86, 175, 94, 214, 183, 250, 30, 140, 216, 81, 31, 110, 87, 154, 42,
    200, 75, 135, 63, 222, 237, 19, 65, 110, 83, 34, 76, 153, 90, 53, 7, 133, 220, 206, 82, 0, 0,
    0, 12, 234, 34, 75, 133, 111, 32, 223, 57, 192, 92, 198, 165, 13, 75, 141, 160, 198, 199, 231,
    248, 87, 121, 95, 129, 13, 181, 104, 254, 55, 4, 28, 76, 29, 128, 85, 109, 34, 136, 26, 183,
    180, 77, 133, 50, 112, 173, 168, 125, 70, 210, 222, 135, 49, 52, 187, 135, 36, 46, 63, 90, 11,
    174, 116, 189, 218, 235, 248, 4, 102, 184, 232, 46, 55, 196, 92, 165, 22, 241, 93, 69, 123, 52,
    38, 226, 49, 215, 177, 137, 63, 44, 221, 20, 37, 61, 169, 58, 27, 55, 233, 162, 70, 33, 29,
    128, 190, 131, 175, 165, 184, 148, 188, 36, 201, 164, 227, 0, 169, 33, 209, 18, 69, 176, 152,
    175, 94, 155, 115, 166, 179, 174, 95, 243, 205, 203, 26, 38, 8, 46, 47, 67, 134, 102, 16, 183,
    86, 157, 253, 9, 47, 23, 122, 158, 212, 32, 147, 186, 66, 95, 252, 58, 251, 42, 126, 144, 51,
    237, 68, 225, 244, 139, 92, 174, 206, 42, 157, 166, 76, 16, 215, 209, 154, 180, 176, 178, 127,
    193, 182, 143, 123, 222, 149, 82, 30, 55, 22, 168, 253, 205, 72, 125, 72, 9, 21, 20, 187, 28,
    198, 84, 78, 196, 135, 75, 14, 138, 119, 215, 128, 223, 31, 183, 47, 133, 204, 95, 225, 75,
    253, 226, 27, 152, 107, 120, 223, 137, 193, 191, 216, 47, 14, 233, 126, 234, 145, 107, 178, 29,
    207, 207, 17, 195, 62, 153, 145, 61, 138, 24, 191, 138, 15, 210, 183, 89, 245, 233, 150, 112,
    193, 187, 37, 5, 241, 153, 28, 135, 204, 89, 86, 241, 229, 106, 159, 17, 235, 61, 94, 103, 50,
    213, 26, 90, 88, 5, 179, 59, 253, 100, 95, 243, 17, 43, 252, 163, 243, 24, 234, 104, 255, 78,
    112, 98, 7, 44, 120, 26, 222, 203, 101, 150, 243, 85, 19, 66, 166, 179, 60, 101, 203, 79, 91,
    30, 45, 209, 48, 22, 74, 121, 31, 181, 217, 122, 55, 102, 61, 146, 129, 231, 208, 149, 173, 19,
    110, 11, 225, 243, 218, 13, 185, 244, 165, 123,
];

// Constants from fixed LMS param set
const LMS_N: usize = 6;
const LMS_P: usize = 51;
const LMS_H: usize = 15;

fn make_lms_req_bytes() -> Vec<u8> {
    let pub_key = <LmsPublicKey<LMS_N>>::read_from_bytes(&MSG_1_PUB_KEY_1).unwrap();
    let signature =
        <LmsSignature<LMS_N, LMS_P, LMS_H>>::read_from_bytes(&MSG_1_KEY_1_SIG_1).unwrap();

    let hash = sha384(&MSG_1);

    let mut req = MailboxReq::LmsVerify(LmsVerifyReq {
        hdr: MailboxReqHeader { chksum: 0 },
        pub_key_tree_type: u32::from(pub_key.tree_type.0),
        pub_key_ots_type: u32::from(pub_key.otstype.0),
        pub_key_id: pub_key.id,
        pub_key_digest: (*(pub_key.digest.as_bytes())).try_into().unwrap(),
        signature_q: u32::from(signature.q),
        signature_ots: (*(signature.ots.as_bytes())).try_into().unwrap(),
        signature_tree_type: u32::from(signature.tree_type.0),
        signature_tree_path: (*(signature.tree_path.as_bytes())).try_into().unwrap(),
        hash,
    });

    req.populate_chksum().expect("populate checksum");
    req.as_bytes().expect("serialize request").to_vec()
}

fn send_lms_verify_and_check<T: HwModel>(hw: &mut T, req_bytes: &[u8]) {
    let resp = hw
        .mailbox_execute(u32::from(CommandId::LMS_SIGNATURE_VERIFY), req_bytes)
        .expect("mailbox exec should succeed")
        .expect("expected response bytes");

    let hdr = MailboxRespHeader::read_from_bytes(resp.as_slice()).expect("parse MailboxRespHeader");

    // checksum over everything after chksum field
    assert!(
        verify_checksum(
            hdr.chksum,
            0x0,
            &resp[core::mem::size_of_val(&hdr.chksum)..],
        ),
        "LMS response checksum verification failed"
    );

    // FIPS Approved bit
    assert_eq!(
        hdr.fips_status,
        MailboxRespHeader::FIPS_STATUS_APPROVED,
        "FIPS status not APPROVED"
    );
}

#[test]
#[cfg(not(any(feature = "fpga_realtime", feature = "fpga_subsystem")))]
fn test_lms_verify_after_warm_reset() {
    // Boot time
    let args = BuildArgs {
        security_state: *SecurityState::default()
            .set_debug_locked(true)
            .set_device_lifecycle(DeviceLifecycle::Production),
        fmc_version: 3,
        app_version: 5,
        fw_svn: 9,
    };
    let (mut model, _, _, _) = build_ready_runtime_model(args);
    let req_bytes = make_lms_req_bytes();

    // before warm reset
    send_lms_verify_and_check(&mut model, &req_bytes);

    // warm reset and wait
    model.warm_reset();
    wait_runtime_ready(&mut model);

    // after warm reset
    send_lms_verify_and_check(&mut model, &req_bytes);
}
