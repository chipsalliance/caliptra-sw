/*++

Licensed under the Apache-2.0 license.

File Name:

    sha3_tests.rs

Abstract:

    File contains test cases for SHA-3 API

--*/

#![no_std]
#![no_main]

use caliptra_cfi_lib::CfiCounter;
use caliptra_drivers::{Array4x16, Array4x8, Sha3};
use caliptra_kat::Shake256Kat;
use caliptra_registers::kmac::Kmac as KmacReg;

use caliptra_test_harness::test_suite;

// All test vectors from NIST CAVP sample test vectors
// https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/secure-hashing

fn test_shake256_digest0() {
    let mut sha3 = unsafe { Sha3::new(KmacReg::new()) };
    let expected = [
        0x46, 0xb9, 0xdd, 0x2b, 0x0b, 0xa8, 0x8d, 0x13, 0x23, 0x3b, 0x3f, 0xeb, 0x74, 0x3e, 0xeb,
        0x24, 0x3f, 0xcd, 0x52, 0xea, 0x62, 0xb8, 0x1b, 0x82, 0xb5, 0x0c, 0x27, 0x64, 0x6e, 0xd5,
        0x76, 0x2f,
    ];

    let data = &[];
    let digest: Array4x8 = sha3.shake256_digest(data).unwrap();
    assert_eq!(digest, Array4x8::from(expected));
}

fn test_shake256_digest1() {
    let mut sha3 = unsafe { Sha3::new(KmacReg::new()) };
    let expected = [
        0xaa, 0xbb, 0x07, 0x48, 0x8f, 0xf9, 0xed, 0xd0, 0x5d, 0x6a, 0x60, 0x3b, 0x77, 0x91, 0xb6,
        0x0a, 0x16, 0xd4, 0x50, 0x93, 0x60, 0x8f, 0x1b, 0xad, 0xc0, 0xc9, 0xcc, 0x9a, 0x91, 0x54,
        0xf2, 0x15,
    ];
    let data = &[0x0f];
    let digest = sha3.shake256_digest(data).unwrap();
    assert_eq!(digest, Array4x8::from(expected));
}

fn test_shake256_digest2() {
    let mut sha3 = unsafe { Sha3::new(KmacReg::new()) };
    let expected = [
        0x8e, 0x2d, 0xf9, 0xd3, 0x79, 0xbb, 0x03, 0x4a, 0xee, 0x06, 0x4e, 0x96, 0x5f, 0x96, 0x0e,
        0xbb, 0x41, 0x8a, 0x9b, 0xb5, 0x35, 0x02, 0x5f, 0xb9, 0x64, 0x27, 0xf6, 0x78, 0xcf, 0x20,
        0x78, 0x77,
    ];
    let data = &[0x0d, 0xc1];
    let digest = sha3.shake256_digest(data).unwrap();
    assert_eq!(digest, Array4x8::from(expected));
}

fn test_shake256_digest3() {
    let mut sha3 = unsafe { Sha3::new(KmacReg::new()) };
    let expected = [
        0x7b, 0x7e, 0x12, 0xd2, 0xa5, 0x20, 0xe2, 0x32, 0xfd, 0xe6, 0xc4, 0x1d, 0xbb, 0xb2, 0xb8,
        0xb7, 0x4c, 0x29, 0x12, 0xfb, 0x3f, 0x15, 0x40, 0x4f, 0x73, 0x04, 0xfe, 0x46, 0x69, 0x14,
        0x30, 0xc9,
    ];
    let data = &[0x4a, 0x71, 0x96, 0x4b];
    let digest = sha3.shake256_digest(data).unwrap();
    assert_eq!(digest, Array4x8::from(expected));
}

fn test_shake256_digest4() {
    let mut sha3 = unsafe { Sha3::new(KmacReg::new()) };
    let expected = [
        0xf4, 0xbf, 0x0c, 0x76, 0xbe, 0xee, 0x2a, 0xbd, 0x61, 0x56, 0xb4, 0x1a, 0xfe, 0xf4, 0x14,
        0x2c, 0x3d, 0xba, 0xbf, 0xed, 0xe5, 0xb9, 0xce, 0x2e, 0xcd, 0x28, 0x2f, 0xb2, 0x94, 0x66,
        0x97, 0x31,
    ];
    let data = &[0xe8, 0x2f, 0x41, 0x88, 0xab];
    let digest = sha3.shake256_digest(data).unwrap();
    assert_eq!(digest, Array4x8::from(expected));
}

fn test_shake256_digest5() {
    let mut sha3 = unsafe { Sha3::new(KmacReg::new()) };
    let expected = [
        0x33, 0x3d, 0x09, 0x64, 0x75, 0xb6, 0xa6, 0xd4, 0x5c, 0x87, 0xb5, 0xaf, 0xc7, 0xe8, 0xcb,
        0x22, 0x84, 0x45, 0x6b, 0x84, 0xbd, 0x3e, 0x30, 0xa9, 0xb2, 0x64, 0x49, 0x25, 0x39, 0xed,
        0x31, 0x59,
    ];
    let data = &[
        0xaa, 0xf1, 0xf6, 0x4f, 0x3d, 0xf3, 0xfd, 0x4d, 0x42, 0x2a, 0xcb, 0xcb, 0x54, 0x91, 0xff,
        0x38, 0x35, 0xb5, 0x7e, 0x32,
    ];
    let digest = sha3.shake256_digest(data).unwrap();
    assert_eq!(digest, Array4x8::from(expected));
}

fn test_shake256_digest6() {
    let mut sha3 = unsafe { Sha3::new(KmacReg::new()) };
    let expected = [
        0x8e, 0x9a, 0x89, 0x15, 0x92, 0x44, 0x7c, 0x34, 0x61, 0xea, 0x0a, 0x23, 0x73, 0xca, 0xee,
        0xaa, 0xc8, 0xb9, 0xe5, 0xa9, 0x81, 0xd7, 0x74, 0x2f, 0x69, 0x27, 0x79, 0x37, 0x99, 0x64,
        0xeb, 0x1e,
    ];
    let data = &[
        0xa1, 0x08, 0x1e, 0x69, 0x94, 0xe1, 0xba, 0x5f, 0x96, 0x6f, 0x95, 0x81, 0x58, 0xee, 0x0a,
        0x8c, 0x36, 0x9b, 0x73, 0x46, 0x69, 0x18, 0xf7, 0x07, 0x7e, 0x11, 0xa3, 0x79, 0x06, 0x20,
        0xbc, 0x9c, 0x90, 0xee, 0x54, 0x0d, 0xd4, 0x9c, 0x1c, 0x87, 0x31, 0x61, 0x79, 0xaa, 0x5a,
        0x74, 0xda, 0xfb, 0x4c, 0x2c, 0x48, 0x2d, 0x83, 0x65, 0x3f, 0x9f, 0x6d, 0x27, 0xbc, 0x25,
        0x1f, 0x82, 0x97, 0x0b, 0x47, 0xbc, 0x13, 0x57, 0x61, 0xaf, 0xb4, 0x4f, 0x2e, 0x6c, 0x50,
        0x3b, 0x62, 0x24, 0x69, 0x6c, 0x9d, 0x49, 0xba, 0x7d, 0x9d, 0xf0, 0x10, 0xd9, 0xb2, 0x7a,
        0x5b, 0x7d, 0x72, 0x73, 0x05, 0x00, 0xad, 0xba, 0x82, 0xd0, 0xa4, 0xe2, 0x29, 0xbe, 0x75,
        0xd9, 0x42, 0xbd, 0xda, 0xc7, 0x60, 0xe6, 0x13, 0x39, 0xf1, 0xc0, 0x21, 0x7f, 0x13, 0xbf,
        0x35, 0x52, 0xa9, 0x0a, 0x68, 0xbb, 0xae, 0x81,
    ];
    let digest = sha3.shake256_digest(data).unwrap();
    assert_eq!(digest, Array4x8::from(expected));
}

fn test_shake256_digest7() {
    let mut sha3 = unsafe { Sha3::new(KmacReg::new()) };
    let expected = [
        0x00, 0x64, 0x8a, 0xfb, 0xc5, 0xe6, 0x51, 0x64, 0x9d, 0xb1, 0xfd, 0x82, 0x93, 0x6b, 0x00,
        0xdb, 0xbc, 0x12, 0x2f, 0xb4, 0xc8, 0x77, 0x86, 0x0d, 0x38, 0x5c, 0x49, 0x50, 0xd5, 0x6d,
        0xe7, 0xe0, 0x96, 0xd6, 0x13, 0xd7, 0xa3, 0xf2, 0x7e, 0xd8, 0xf2, 0x63, 0x34, 0xb0, 0xcc,
        0xc1, 0x40, 0x7b, 0x41, 0xdc, 0xcb, 0x23, 0xdf, 0xaa, 0x52, 0x98, 0x18, 0xd1, 0x12, 0x5c,
        0xd5, 0x34, 0x80, 0x92,
    ];
    let data = &[
        0xdc, 0x88, 0x6d, 0xf3, 0xf6, 0x9c, 0x49, 0x51, 0x3d, 0xe3, 0x62, 0x7e, 0x94, 0x81, 0xdb,
        0x58, 0x71, 0xe8, 0xee, 0x88, 0xeb, 0x9f, 0x99, 0x61, 0x15, 0x41, 0x93, 0x0a, 0x8b, 0xc8,
        0x85, 0xe0,
    ];
    let digest = sha3.shake256_digest(data).unwrap();
    assert_eq!(digest, Array4x16::from(expected));
}

fn test_shake256_op0() {
    let mut sha3 = unsafe { Sha3::new(KmacReg::new()) };
    let expected = [
        0x46, 0xb9, 0xdd, 0x2b, 0x0b, 0xa8, 0x8d, 0x13, 0x23, 0x3b, 0x3f, 0xeb, 0x74, 0x3e, 0xeb,
        0x24, 0x3f, 0xcd, 0x52, 0xea, 0x62, 0xb8, 0x1b, 0x82, 0xb5, 0x0c, 0x27, 0x64, 0x6e, 0xd5,
        0x76, 0x2f,
    ];
    let mut digest_op = sha3.shake256_digest_init().unwrap();
    let digest = digest_op.finalize().unwrap();
    assert_eq!(digest, Array4x8::from(expected));
}

fn test_shake256_op1() {
    let mut sha3 = unsafe { Sha3::new(KmacReg::new()) };
    let expected = [
        0x46, 0xb9, 0xdd, 0x2b, 0x0b, 0xa8, 0x8d, 0x13, 0x23, 0x3b, 0x3f, 0xeb, 0x74, 0x3e, 0xeb,
        0x24, 0x3f, 0xcd, 0x52, 0xea, 0x62, 0xb8, 0x1b, 0x82, 0xb5, 0x0c, 0x27, 0x64, 0x6e, 0xd5,
        0x76, 0x2f,
    ];
    let data = [];
    let mut digest_op = sha3.shake256_digest_init().unwrap();
    assert!(digest_op.update(&data).is_ok());
    let digest = digest_op.finalize().unwrap();
    assert_eq!(digest, Array4x8::from(expected));
}

fn test_shake256_op2() {
    let mut sha3 = unsafe { Sha3::new(KmacReg::new()) };
    let expected = [
        0x7b, 0x7e, 0x12, 0xd2, 0xa5, 0x20, 0xe2, 0x32, 0xfd, 0xe6, 0xc4, 0x1d, 0xbb, 0xb2, 0xb8,
        0xb7, 0x4c, 0x29, 0x12, 0xfb, 0x3f, 0x15, 0x40, 0x4f, 0x73, 0x04, 0xfe, 0x46, 0x69, 0x14,
        0x30, 0xc9,
    ];
    let data = &[0x4a, 0x71, 0x96, 0x4b];
    let mut digest_op = sha3.shake256_digest_init().unwrap();
    assert!(digest_op.update(data).is_ok());
    let digest = digest_op.finalize().unwrap();
    assert_eq!(digest, Array4x8::from(expected));
}

fn test_shake256_op3() {
    let mut sha3 = unsafe { Sha3::new(KmacReg::new()) };
    let expected = [
        0xdd, 0xa6, 0xa9, 0x05, 0x23, 0x4e, 0x81, 0xb4, 0x77, 0x80, 0xbb, 0x08, 0x34, 0xa7, 0x60,
        0xec, 0xd2, 0x97, 0x06, 0x8b, 0x28, 0xd4, 0xe0, 0x0f, 0xaf, 0x2c, 0x50, 0x94, 0xff, 0x86,
        0x9e, 0x72,
    ];
    let data0 = &[0x12, 0x73, 0x73];
    let data1 = &[0x35, 0x1d, 0x8e, 0xb3, 0x08, 0x29];
    let mut digest_op = sha3.shake256_digest_init().unwrap();
    assert!(digest_op.update(data0).is_ok());
    assert!(digest_op.update(data1).is_ok());
    let digest = digest_op.finalize().unwrap();
    assert_eq!(digest, Array4x8::from(expected));
}

fn test_shake256_op4() {
    let mut sha3 = unsafe { Sha3::new(KmacReg::new()) };
    let expected = [
        0x96, 0x20, 0xf7, 0xda, 0x5b, 0x74, 0x10, 0xfe, 0x8d, 0xb4, 0xe7, 0x77, 0x96, 0xf5, 0x57,
        0x0d, 0x5a, 0xde, 0xf8, 0xa3, 0x44, 0x17, 0xbc, 0x70, 0xe6, 0x0c, 0xe6, 0x8c, 0x57, 0x1e,
        0x8e, 0x1e,
    ];
    let data0 = &[0x43, 0xfa];
    let data1 = &[0x7c];
    let data2 = &[0x73, 0xc6, 0x19, 0x6e];
    let data3 = &[0xf2, 0x8d, 0x3a, 0xe7, 0x34, 0xfd, 0x80];
    let data4 = &[
        0x8c, 0x1d, 0x01, 0x7e, 0xb9, 0x64, 0xfd, 0x54, 0x18, 0xdf, 0x04, 0x1b, 0x73, 0x01, 0x4a,
        0x84, 0xc6, 0xa1, 0xdc, 0xbb, 0x99, 0xfc, 0x8e, 0x92, 0x8c, 0xfe, 0x35, 0xdb,
    ];
    let data5 = &[0x34, 0xbd, 0x17, 0x15, 0x25];
    let mut digest_op = sha3.shake256_digest_init().unwrap();
    assert!(digest_op.update(data0).is_ok());
    assert!(digest_op.update(data1).is_ok());
    assert!(digest_op.update(data2).is_ok());
    assert!(digest_op.update(data3).is_ok());
    assert!(digest_op.update(data4).is_ok());
    assert!(digest_op.update(data5).is_ok());
    let digest = digest_op.finalize().unwrap();
    assert_eq!(digest, Array4x8::from(expected));
}

fn test_kat() {
    // Init CFI
    CfiCounter::reset(&mut || Ok((0xdeadbeef, 0xdeadbeef, 0xdeadbeef, 0xdeadbeef)));

    let mut sha3 = unsafe { Sha3::new(KmacReg::new()) };

    assert_eq!(Shake256Kat::default().execute(&mut sha3).is_ok(), true);
}

test_suite! {
    test_kat,
    test_shake256_digest0,
    test_shake256_digest1,
    test_shake256_digest2,
    test_shake256_digest3,
    test_shake256_digest4,
    test_shake256_digest5,
    test_shake256_digest6,
    test_shake256_digest7,
    test_shake256_op0,
    test_shake256_op1,
    test_shake256_op2,
    test_shake256_op3,
    test_shake256_op4,
}
