/*++

Licensed under the Apache-2.0 license.

File Name:

    dma_sha384_tests.rs

Abstract:

    File contains test cases for DMA SHA384 operations

--*/

#![no_std]
#![no_main]

use caliptra_cfi_lib::CfiCounter;
use caliptra_drivers::{
    cprintln, Aes, AesGcmIv, AesKey, AesOperation, Dma, DmaReadTarget, DmaReadTransaction,
    LEArray4x8, SocIfc, Trng,
};
use caliptra_registers::aes::AesReg;
use caliptra_registers::aes_clp::AesClpReg;
use caliptra_registers::csrng::CsrngReg;
use caliptra_registers::entropy_src::EntropySrcReg;
use caliptra_registers::soc_ifc::SocIfcReg;
use caliptra_registers::soc_ifc_trng::SocIfcTrngReg;
use caliptra_test_harness::test_suite;
use zerocopy::IntoBytes;

const MCU_SRAM_OFFSET: u64 = 0xc0_0000;
const MCU_SRAM_SIZE: usize = 32 * 1024;
const KEY: LEArray4x8 = LEArray4x8::new([
    0xb4f7eaf0, 0x50f4421b, 0x05bc3506, 0x11deced9, 0x593d36a5, 0x708828a6, 0xffbc27f5, 0x046e4deb,
]);
const IV: [u8; 12] = [
    0x18, 0xf3, 0x16, 0x78, 0x10, 0x77, 0xa5, 0x95, 0xc7, 0x2d, 0x4c, 0x07,
];
const EXPECTED_CIPHERTEXT: [u8; 2080] = [
    0x3a, 0x14, 0xd4, 0xef, 0xaf, 0xc6, 0x50, 0x46, 0x6a, 0x78, 0xbd, 0xc6, 0xf3, 0xd9, 0xd2, 0x5c,
    0x71, 0x55, 0x0d, 0xa5, 0xcb, 0x94, 0xb0, 0xd4, 0xd2, 0x43, 0x1f, 0x3d, 0x00, 0x64, 0x41, 0xe2,
    0x0e, 0x9b, 0x8d, 0xa6, 0xbd, 0x55, 0x39, 0x1b, 0xf6, 0x71, 0xad, 0x6e, 0x7d, 0xf6, 0x7f, 0x89,
    0xdb, 0x63, 0x21, 0xe7, 0xab, 0xf4, 0x60, 0x57, 0x23, 0x1d, 0xe7, 0x2c, 0x3c, 0x3e, 0x8e, 0x27,
    0x86, 0x0f, 0x78, 0x2a, 0xde, 0xc2, 0xf0, 0xdd, 0xf8, 0x42, 0xea, 0x90, 0x4a, 0x03, 0x79, 0x96,
    0xaf, 0xc6, 0x25, 0x30, 0x98, 0x27, 0xc1, 0xc9, 0x53, 0x05, 0x24, 0x40, 0xd3, 0x64, 0x30, 0xd7,
    0x57, 0x9a, 0xe7, 0xbf, 0xfc, 0xe6, 0xa5, 0x3b, 0x8d, 0x9e, 0x83, 0x79, 0x65, 0xee, 0xb1, 0x9d,
    0x7d, 0xbc, 0x17, 0xcf, 0x05, 0x54, 0x50, 0x6e, 0x07, 0x5e, 0xd8, 0x2a, 0x77, 0x32, 0xd0, 0x00,
    0x02, 0x20, 0x94, 0x65, 0x0d, 0x4b, 0x07, 0x88, 0x52, 0xbf, 0x00, 0x52, 0xe5, 0x5d, 0x27, 0xf1,
    0x31, 0xd5, 0x36, 0x9d, 0x6d, 0x0e, 0x5e, 0x5f, 0x26, 0xbe, 0xd6, 0xcf, 0x6a, 0x33, 0x82, 0xcd,
    0xeb, 0x1b, 0xf6, 0x6f, 0xd4, 0x99, 0xe2, 0xab, 0x1c, 0xc1, 0xf7, 0xdc, 0x14, 0x83, 0x59, 0xe2,
    0x9e, 0x02, 0xc2, 0x25, 0x11, 0xc1, 0x08, 0x42, 0xef, 0x65, 0x38, 0x9d, 0x4c, 0xb3, 0x9c, 0xbb,
    0x61, 0x93, 0x27, 0x17, 0x7b, 0xac, 0xcf, 0xbc, 0x7b, 0x52, 0x0f, 0xff, 0x02, 0xab, 0x84, 0xe2,
    0xe4, 0x95, 0x8e, 0x79, 0x25, 0xe2, 0xc8, 0x4e, 0xf5, 0x83, 0x10, 0xc2, 0xfb, 0x27, 0x63, 0x71,
    0x74, 0x0a, 0x93, 0x78, 0xf8, 0x5f, 0xa3, 0x62, 0x72, 0x1f, 0xb0, 0xb0, 0xe9, 0x27, 0xab, 0x81,
    0x92, 0x05, 0x76, 0xdd, 0xb8, 0x6d, 0xb6, 0xe1, 0x5e, 0x97, 0x5b, 0x26, 0xc3, 0x23, 0x00, 0x7e,
    0xb8, 0xdf, 0xba, 0xed, 0xee, 0x53, 0x33, 0x5c, 0x26, 0xe1, 0x3a, 0x79, 0x6d, 0xee, 0x15, 0x67,
    0xb2, 0x7d, 0x9d, 0x53, 0xd3, 0xba, 0x96, 0xdf, 0x0e, 0xde, 0xcd, 0xbe, 0x57, 0x04, 0xb9, 0xf4,
    0xf5, 0x79, 0xcb, 0x58, 0x85, 0x28, 0x28, 0x17, 0x1d, 0xeb, 0xc8, 0x67, 0xab, 0x42, 0xa1, 0x14,
    0x67, 0xb4, 0x8d, 0xe1, 0x3b, 0x20, 0x21, 0x53, 0x42, 0xe5, 0x83, 0xcf, 0x2a, 0x99, 0x81, 0xb1,
    0xd5, 0x61, 0x83, 0x42, 0xfc, 0x4e, 0x9e, 0x74, 0x63, 0xd4, 0x76, 0x51, 0xdf, 0x8b, 0x5f, 0x92,
    0x4e, 0xc0, 0x4a, 0x01, 0xe1, 0xbc, 0x5d, 0x92, 0x27, 0x5c, 0xc9, 0x5d, 0xc2, 0xcf, 0x8f, 0xc8,
    0x3c, 0x4e, 0x76, 0x78, 0x2f, 0x2b, 0xcb, 0xb3, 0x53, 0xe5, 0x0f, 0x75, 0x4a, 0x6f, 0x0c, 0x86,
    0x9c, 0xe8, 0x2d, 0xa2, 0xee, 0xb6, 0x8c, 0x73, 0x71, 0xa4, 0x9e, 0x8b, 0x21, 0x4d, 0xea, 0x1d,
    0x56, 0x35, 0x58, 0x25, 0xd3, 0x56, 0x54, 0x9f, 0x50, 0x52, 0xbe, 0xb4, 0x9a, 0x42, 0xe3, 0xe9,
    0xe0, 0x57, 0x76, 0x1f, 0xc6, 0xa1, 0xe3, 0xff, 0xc7, 0x1e, 0xfb, 0x0f, 0x9f, 0xff, 0xd8, 0x46,
    0xaa, 0x81, 0xd9, 0x6a, 0xc2, 0xc5, 0x15, 0xa2, 0xa2, 0x0a, 0xfb, 0xc6, 0xa1, 0x89, 0x6f, 0x0b,
    0x8f, 0x37, 0x49, 0xf6, 0xec, 0x3e, 0x2c, 0x7b, 0x2d, 0xa0, 0x53, 0x35, 0xdf, 0xdf, 0x46, 0x54,
    0x96, 0xfd, 0xf4, 0x01, 0xd9, 0x99, 0x47, 0xc8, 0xa0, 0xdf, 0x34, 0xe6, 0x65, 0x7a, 0x74, 0x1e,
    0x0a, 0x57, 0xa9, 0xb2, 0x1a, 0xae, 0x3d, 0x3b, 0x66, 0x1d, 0x4e, 0x23, 0x02, 0x07, 0x06, 0x4c,
    0x27, 0x66, 0xa8, 0x5d, 0xa6, 0x1b, 0xa6, 0x08, 0xd8, 0x83, 0x33, 0x97, 0x06, 0x32, 0xe2, 0x82,
    0xb5, 0x13, 0x2e, 0x22, 0x1e, 0x01, 0x99, 0xf0, 0xc5, 0x82, 0x8d, 0xe2, 0xd3, 0x45, 0xd9, 0x45,
    0xb4, 0xed, 0x8d, 0x05, 0x26, 0x26, 0x3a, 0x24, 0x30, 0xf4, 0x74, 0x6b, 0xbb, 0x86, 0x2c, 0xf8,
    0x6d, 0x9e, 0xba, 0xc3, 0xe2, 0x72, 0x12, 0x87, 0x93, 0x38, 0x68, 0xed, 0x1d, 0x8b, 0xff, 0x03,
    0x74, 0x90, 0x74, 0x00, 0x82, 0xed, 0x7f, 0xf6, 0x07, 0x60, 0x8e, 0x6e, 0x70, 0xfa, 0x42, 0x2d,
    0x45, 0x1b, 0xd6, 0xa8, 0xfe, 0xf5, 0x2a, 0xaa, 0xfc, 0xf6, 0x92, 0xb8, 0x80, 0x58, 0xad, 0x25,
    0xfb, 0x6a, 0x13, 0x7c, 0xae, 0x39, 0x61, 0xdf, 0x56, 0xf1, 0x58, 0xc6, 0xd1, 0x95, 0xb7, 0x5f,
    0x13, 0x06, 0x8f, 0xd5, 0x97, 0x36, 0xf0, 0xaf, 0x0c, 0x78, 0x3f, 0xa4, 0x89, 0x18, 0xf4, 0x5a,
    0x4b, 0x10, 0xc6, 0x03, 0x50, 0xd6, 0x8e, 0xba, 0x38, 0xfe, 0xd9, 0xf4, 0x29, 0x58, 0xfc, 0xca,
    0x8d, 0x29, 0x79, 0xd1, 0x0e, 0xd1, 0x3b, 0x84, 0xe3, 0x09, 0xa9, 0xb2, 0x75, 0x4c, 0xd7, 0x78,
    0x1c, 0xdd, 0x7c, 0x59, 0xc9, 0x62, 0xb8, 0x74, 0xca, 0x38, 0xd1, 0x28, 0x44, 0xaa, 0x1d, 0xbb,
    0x22, 0x16, 0x67, 0x7e, 0xc0, 0x29, 0x19, 0x77, 0xa3, 0xcc, 0x83, 0x73, 0xfc, 0xba, 0x16, 0x80,
    0x6f, 0xa9, 0x45, 0xdf, 0xfa, 0xde, 0x6e, 0xf3, 0xb9, 0xa7, 0x2f, 0x87, 0x69, 0x6e, 0x1b, 0xfa,
    0x07, 0x71, 0x57, 0xb9, 0x0a, 0xf4, 0x41, 0x04, 0xfc, 0x61, 0x04, 0x21, 0x59, 0x69, 0xe1, 0xf2,
    0x57, 0x4b, 0x92, 0xfd, 0x47, 0x6f, 0x10, 0x97, 0xb1, 0x2b, 0x44, 0x68, 0x79, 0x8f, 0xe3, 0x3b,
    0x77, 0xf4, 0xc0, 0xf0, 0xac, 0x4b, 0x89, 0x0b, 0x83, 0x2d, 0xa7, 0x78, 0x25, 0x0b, 0x0b, 0xfc,
    0xbd, 0x69, 0xe9, 0x8a, 0x02, 0x04, 0xb9, 0x5d, 0x2d, 0x14, 0x70, 0xca, 0x9c, 0x03, 0x7f, 0xde,
    0x3a, 0xce, 0x6f, 0x35, 0x06, 0x52, 0xf6, 0x48, 0xfd, 0xaa, 0x87, 0xfd, 0xfd, 0x80, 0xd1, 0xb9,
    0xe2, 0x90, 0x03, 0xb4, 0xef, 0xbc, 0xe5, 0x47, 0xa0, 0x4d, 0x9c, 0x40, 0x02, 0xeb, 0x44, 0xa7,
    0x77, 0x21, 0xee, 0x95, 0xd3, 0x0a, 0x96, 0x09, 0x5c, 0x20, 0xf1, 0x45, 0x8c, 0x81, 0x4c, 0xe0,
    0xa7, 0xcf, 0x8d, 0xac, 0xf5, 0x63, 0x0c, 0xa6, 0xe4, 0xd9, 0x18, 0x22, 0xde, 0xf0, 0x5f, 0x4d,
    0xc6, 0xb5, 0xa5, 0xb9, 0x9a, 0xbc, 0x7f, 0xf8, 0xd0, 0xbc, 0xb0, 0x89, 0x52, 0x8c, 0x02, 0xd9,
    0x9b, 0x61, 0xc8, 0xaf, 0x5f, 0x43, 0x0a, 0xdb, 0xc0, 0xe3, 0xcf, 0x46, 0x67, 0x3c, 0x0b, 0x73,
    0x6f, 0x67, 0x33, 0xfd, 0xf5, 0x85, 0x3f, 0x89, 0x9e, 0x04, 0xee, 0xe7, 0x53, 0x2c, 0xf5, 0x5e,
    0x84, 0xef, 0xc1, 0x42, 0x40, 0x20, 0xe1, 0x67, 0x97, 0x49, 0xef, 0x31, 0xe7, 0x26, 0x5b, 0xa1,
    0x22, 0x6c, 0x28, 0x72, 0x8d, 0xff, 0xb8, 0x34, 0x51, 0x9d, 0x75, 0xfd, 0x07, 0x21, 0x28, 0xd4,
    0xb9, 0xb0, 0x0c, 0x1f, 0xde, 0x20, 0xa1, 0x2b, 0xf3, 0x7a, 0x5c, 0xf1, 0xb9, 0xcf, 0x10, 0x8e,
    0xc4, 0x0b, 0x43, 0x20, 0x1a, 0xe9, 0x6b, 0xb8, 0x7c, 0x5b, 0xfb, 0x21, 0x47, 0xf6, 0xcd, 0xe9,
    0xc6, 0x3d, 0xcb, 0x67, 0x2c, 0xca, 0x12, 0x36, 0xec, 0x96, 0x66, 0x03, 0xed, 0xf8, 0x56, 0x24,
    0x12, 0x84, 0x2b, 0x9b, 0xc8, 0xff, 0x24, 0xa5, 0x4c, 0x65, 0x0a, 0xbf, 0x86, 0xfe, 0x6d, 0xe4,
    0xda, 0x28, 0x7e, 0xa6, 0x52, 0x52, 0x09, 0x6c, 0x79, 0xdf, 0x2a, 0x99, 0x93, 0xf4, 0xa7, 0x6f,
    0xf1, 0x69, 0xb1, 0x59, 0x48, 0xe6, 0x0e, 0x67, 0xb1, 0xcf, 0xdb, 0x75, 0x42, 0x75, 0x12, 0x9b,
    0x03, 0x0f, 0x05, 0x69, 0xed, 0xb0, 0x26, 0x00, 0x6b, 0xfe, 0x2d, 0x19, 0xb8, 0xb4, 0x15, 0x46,
    0xf4, 0x4b, 0xfe, 0xc2, 0x07, 0x1b, 0x9f, 0x63, 0x49, 0x45, 0xe6, 0x10, 0x7b, 0xff, 0x84, 0x6d,
    0xb3, 0x86, 0xf3, 0x27, 0xd0, 0x79, 0x17, 0x33, 0xa4, 0xe5, 0x49, 0xc8, 0xa6, 0x29, 0xf3, 0x33,
    0x0b, 0xb6, 0xee, 0xfe, 0x7a, 0xe4, 0x85, 0xd3, 0x73, 0x85, 0x27, 0xa2, 0xe4, 0xf1, 0x89, 0x67,
    0x1a, 0x28, 0x79, 0xb3, 0xda, 0x17, 0xe4, 0x67, 0x3c, 0x35, 0x8e, 0x6d, 0x75, 0x97, 0x24, 0x24,
    0xb6, 0x53, 0xee, 0xf2, 0x43, 0xf2, 0x1d, 0x39, 0xd6, 0xe7, 0xa6, 0x36, 0x53, 0x83, 0x2d, 0x43,
    0x20, 0x37, 0x56, 0x4e, 0x4a, 0x0c, 0xbf, 0x09, 0xf0, 0x51, 0x40, 0xe2, 0xc4, 0xf1, 0x38, 0xe8,
    0xa6, 0x82, 0xc9, 0xed, 0xa0, 0xb5, 0x88, 0x41, 0x35, 0x1c, 0xfb, 0xae, 0xc5, 0x7b, 0x37, 0xee,
    0x6a, 0x72, 0x20, 0xc5, 0xd6, 0x0b, 0x8b, 0xbc, 0x31, 0xff, 0x33, 0xd2, 0x84, 0xcb, 0xfd, 0x24,
    0x59, 0x5e, 0x74, 0xc3, 0x96, 0x6c, 0x2e, 0x19, 0x80, 0x89, 0xcf, 0xed, 0xa9, 0xf9, 0x16, 0xa6,
    0x8c, 0xf3, 0x33, 0x2f, 0x3a, 0xaf, 0xea, 0x83, 0x74, 0xf1, 0xce, 0x35, 0xd9, 0x26, 0xd3, 0x6d,
    0x89, 0xe6, 0xaa, 0x64, 0x56, 0x4b, 0x5a, 0x77, 0x84, 0x27, 0x7d, 0xf7, 0x07, 0xf1, 0xe0, 0xcb,
    0x2b, 0x20, 0x96, 0xba, 0xa7, 0x5f, 0x03, 0x38, 0x7c, 0xc1, 0x3f, 0x2e, 0x29, 0xca, 0x77, 0x18,
    0x64, 0x3a, 0x50, 0x89, 0x0f, 0x0a, 0x5b, 0xc1, 0xf8, 0x15, 0xb8, 0xe8, 0xa7, 0xc9, 0x19, 0x9a,
    0x07, 0xaf, 0xed, 0x24, 0x5b, 0x00, 0xc7, 0x15, 0x60, 0xa6, 0x27, 0x71, 0xc6, 0x91, 0xb7, 0xbd,
    0x11, 0xed, 0xe2, 0x98, 0x68, 0xe9, 0x1a, 0x33, 0x46, 0xf6, 0xcb, 0xfe, 0x6c, 0xa1, 0x6f, 0xa7,
    0x62, 0xca, 0xca, 0x8f, 0xb8, 0x2c, 0x01, 0xe9, 0x8c, 0x95, 0xd2, 0xb6, 0x6b, 0x1f, 0x64, 0x82,
    0x9e, 0x32, 0xe6, 0x25, 0xf7, 0x07, 0x8b, 0xbf, 0xc8, 0xc4, 0xc3, 0xdd, 0x38, 0x96, 0x97, 0x47,
    0xd6, 0x53, 0x66, 0x65, 0xbc, 0x95, 0x76, 0xa8, 0xf3, 0x12, 0xcf, 0x1d, 0xc9, 0x71, 0xd6, 0xf8,
    0x89, 0xc9, 0xfc, 0x9a, 0x3c, 0x53, 0x5b, 0x04, 0x43, 0x00, 0xfd, 0x48, 0x9b, 0x53, 0xf7, 0xfc,
    0x0c, 0x31, 0xf0, 0x6c, 0x26, 0x0e, 0x2c, 0xc2, 0xb0, 0xfe, 0x34, 0x46, 0x38, 0x06, 0x2b, 0x19,
    0x03, 0x22, 0x16, 0xd2, 0xbf, 0xb0, 0xb9, 0x2c, 0x7a, 0xb3, 0xc4, 0x3e, 0xdf, 0xbd, 0xf6, 0x2f,
    0x60, 0xbf, 0xdd, 0xa2, 0x37, 0x80, 0x53, 0x80, 0xda, 0xd3, 0xb8, 0x45, 0x7b, 0xa7, 0x73, 0xd5,
    0x4f, 0xfa, 0xaa, 0x00, 0x09, 0x2c, 0x28, 0xb9, 0xe6, 0xf9, 0xcb, 0x92, 0x0b, 0x17, 0xbe, 0x02,
    0x96, 0x48, 0x23, 0x25, 0xf2, 0x68, 0x4b, 0x54, 0xdb, 0x24, 0x73, 0x45, 0x0a, 0xdb, 0x64, 0x07,
    0xba, 0xb4, 0xb7, 0x48, 0xc6, 0xc1, 0xbd, 0xa9, 0xa7, 0xeb, 0xa3, 0xfc, 0x83, 0xa0, 0xfc, 0x90,
    0xd7, 0xf6, 0x84, 0x75, 0x2f, 0xcc, 0x30, 0x1c, 0xda, 0x98, 0xcb, 0x2a, 0x4f, 0x05, 0x5e, 0x15,
    0x08, 0x7b, 0x05, 0xed, 0x51, 0xb5, 0xd3, 0xa7, 0x42, 0xfe, 0xcd, 0x45, 0x0d, 0x58, 0xef, 0x8f,
    0x29, 0x6e, 0xb5, 0x6e, 0x40, 0xa1, 0x16, 0x3e, 0xbe, 0x49, 0x12, 0xf7, 0x4d, 0xa2, 0x44, 0xd3,
    0xfc, 0xc4, 0xd3, 0x60, 0xc1, 0x28, 0x7b, 0x54, 0x08, 0x71, 0xde, 0xd0, 0xc9, 0xc4, 0x9a, 0x7b,
    0x38, 0xf7, 0x12, 0xcd, 0xdd, 0x76, 0xee, 0xed, 0x4d, 0x2d, 0x44, 0x8b, 0xb3, 0x0c, 0x83, 0x2c,
    0x46, 0xc5, 0x44, 0x6e, 0x1e, 0x17, 0xca, 0xc3, 0x06, 0x0c, 0x0a, 0xe2, 0x1b, 0xde, 0x88, 0x79,
    0x7f, 0x41, 0x53, 0x64, 0x4d, 0x28, 0x40, 0xc5, 0x49, 0xa8, 0xd9, 0x3c, 0x55, 0xf0, 0xa5, 0x61,
    0xc3, 0x6d, 0xd6, 0x62, 0x9c, 0x8a, 0x54, 0x70, 0xe3, 0xb7, 0xaf, 0xdc, 0x57, 0x46, 0xee, 0x76,
    0x0e, 0x52, 0x05, 0xef, 0x7d, 0x80, 0xe4, 0x42, 0xf9, 0xe6, 0x55, 0x82, 0x93, 0x54, 0x1c, 0x06,
    0x14, 0xc3, 0xe8, 0x42, 0x88, 0x3f, 0xbc, 0x52, 0x45, 0x50, 0x9f, 0x06, 0xa7, 0x8d, 0xf4, 0xdd,
    0xe1, 0x5b, 0x84, 0xda, 0x6b, 0xf4, 0xaf, 0xef, 0x05, 0x1d, 0xcc, 0x6d, 0x5d, 0xd6, 0x66, 0xd6,
    0x16, 0xf3, 0x38, 0x26, 0xe2, 0xfd, 0x44, 0x14, 0xb1, 0x8b, 0x2b, 0x0d, 0xf2, 0x8c, 0x48, 0x89,
    0x59, 0x17, 0x26, 0xc4, 0x88, 0xb6, 0xef, 0x70, 0xb5, 0xed, 0xed, 0x94, 0x6c, 0x3f, 0x5c, 0xe5,
    0x01, 0x33, 0x6f, 0x47, 0x99, 0x04, 0x6b, 0xda, 0x09, 0xee, 0x9f, 0x4b, 0x40, 0x5a, 0xa3, 0x99,
    0x01, 0xde, 0x69, 0x10, 0x8d, 0x43, 0x20, 0x64, 0x79, 0x1d, 0x2d, 0xd4, 0xf4, 0x85, 0xab, 0x3a,
    0xd5, 0x5b, 0x75, 0xca, 0x83, 0x39, 0x6b, 0x7b, 0xd1, 0x91, 0xbc, 0x33, 0x58, 0x0c, 0xda, 0x61,
    0x64, 0xef, 0x96, 0xe4, 0x7e, 0x83, 0xff, 0x4f, 0xd9, 0x16, 0x29, 0x50, 0x1b, 0xb0, 0xde, 0x64,
    0x92, 0xbd, 0x77, 0x9a, 0xb3, 0x13, 0x3f, 0xa9, 0x1c, 0x88, 0x21, 0x71, 0x0d, 0x0f, 0x35, 0xfe,
    0xf3, 0x44, 0x90, 0x20, 0xfb, 0xa6, 0x87, 0x5c, 0x19, 0x39, 0x37, 0xb1, 0xb8, 0xe0, 0x4d, 0x4f,
    0x94, 0xd5, 0x13, 0x1d, 0xe8, 0xac, 0xc1, 0x8a, 0x75, 0xa6, 0x70, 0x15, 0x71, 0xfd, 0x8d, 0xa3,
    0xb4, 0xf3, 0xb8, 0xd9, 0x9c, 0x4a, 0xe9, 0x20, 0x85, 0x6e, 0x9c, 0xca, 0xdb, 0x3d, 0x21, 0xfd,
    0x88, 0x14, 0xc1, 0xfe, 0x99, 0xc4, 0xbf, 0x7c, 0xe3, 0x07, 0xb5, 0x90, 0xbb, 0xe0, 0xa8, 0x78,
    0xd5, 0xbf, 0x83, 0x9a, 0x49, 0x81, 0x90, 0x36, 0xab, 0x30, 0xa0, 0xa1, 0x4e, 0x8d, 0x2d, 0xbd,
    0xf9, 0x30, 0x0b, 0xcb, 0xc9, 0xde, 0x73, 0x1b, 0x1c, 0x63, 0xc7, 0x01, 0x02, 0x55, 0x47, 0x22,
    0x1f, 0x59, 0xbf, 0x65, 0xe7, 0x4e, 0xad, 0xe5, 0xca, 0xa1, 0x12, 0xb0, 0x87, 0xb8, 0x82, 0x15,
    0xab, 0x93, 0xf5, 0xd6, 0x7c, 0x18, 0x22, 0xc3, 0xcc, 0x0d, 0x76, 0x26, 0x7f, 0x41, 0x54, 0xdd,
    0xcd, 0x30, 0x1f, 0xcc, 0x2c, 0x48, 0x91, 0xc7, 0xdb, 0xb9, 0xac, 0x8e, 0x9e, 0xa3, 0x02, 0xfc,
    0x5a, 0xe8, 0xed, 0xcf, 0x3c, 0xb8, 0x84, 0x3f, 0xac, 0xd0, 0xfe, 0x9c, 0xc5, 0x08, 0xa6, 0x2f,
    0x1e, 0xe6, 0x18, 0x4c, 0x78, 0x80, 0x93, 0xe5, 0x81, 0x65, 0xd0, 0xe3, 0xad, 0x1d, 0xd2, 0x35,
    0xe9, 0xf3, 0x58, 0x56, 0x37, 0xe4, 0x8b, 0x46, 0xe1, 0xe0, 0xd2, 0xd9, 0xab, 0x91, 0x16, 0x4b,
    0x2b, 0x35, 0xff, 0xcb, 0x39, 0x5d, 0x70, 0x2c, 0xd3, 0x4a, 0x05, 0x5e, 0xfc, 0x23, 0xb7, 0x1d,
    0x11, 0xe2, 0x58, 0xfe, 0xf0, 0x88, 0xc8, 0xf4, 0xb0, 0x60, 0x34, 0x6c, 0x64, 0x9f, 0x1c, 0x7f,
    0x50, 0xfb, 0x9b, 0xfd, 0xe4, 0x74, 0xde, 0x4a, 0x05, 0x37, 0x9f, 0xc6, 0xcb, 0x7d, 0x8e, 0x79,
    0xc3, 0xcd, 0xb0, 0xcc, 0x80, 0x37, 0x13, 0xb9, 0x30, 0x50, 0x69, 0x13, 0x06, 0xb7, 0x0b, 0x8b,
    0x04, 0xb6, 0x2e, 0x7a, 0x08, 0xdf, 0x66, 0x41, 0x5f, 0xc1, 0x11, 0x5a, 0xcf, 0x9c, 0x30, 0x9b,
    0xbe, 0xf8, 0xf2, 0x2c, 0xc4, 0xb6, 0xe2, 0xfb, 0x85, 0x9a, 0x4d, 0xf2, 0xaf, 0x41, 0xc2, 0x82,
    0x49, 0x47, 0xd3, 0x13, 0x93, 0x23, 0xd3, 0x0d, 0xc7, 0x79, 0xff, 0xdb, 0xff, 0xb7, 0x0d, 0x4b,
    0x30, 0x9c, 0xa4, 0xf6, 0x4e, 0x92, 0xad, 0x23, 0xe8, 0x51, 0x1b, 0x14, 0xb9, 0x91, 0x5c, 0x59,
    0xef, 0x97, 0x53, 0x47, 0x7d, 0xa9, 0xc7, 0xa3, 0x59, 0xe5, 0xd2, 0xdb, 0xce, 0xd0, 0x0b, 0x4b,
    0x54, 0x9f, 0x41, 0x5d, 0xb8, 0xf3, 0x8f, 0x35, 0x6e, 0xf4, 0xd9, 0xec, 0xa7, 0x83, 0x5e, 0x64,
    0x18, 0x52, 0xef, 0x9e, 0x22, 0xcc, 0x39, 0x62, 0x74, 0xbf, 0x7d, 0x4a, 0x78, 0x4e, 0xe8, 0x4a,
    0xde, 0x3e, 0x56, 0x27, 0x04, 0xbf, 0xbb, 0x81, 0x5f, 0xa2, 0x8d, 0x14, 0x50, 0x0f, 0x0b, 0x44,
];

const _: () = assert!(EXPECTED_CIPHERTEXT.len() % 4 == 0);

fn zeroize_axi(dma: &mut Dma, addr: u64, len: usize) {
    for i in (0..len).step_by(4) {
        dma.write_dword((addr + i as u64).into(), 0);
    }
}

fn run_dma_aes_test(
    dma: &mut Dma,
    aes: &mut Aes,
    trng: &mut Trng,
    src: u64,
    dst: u64,
    max_len: usize,
) {
    let mut output = [0u32; EXPECTED_CIPHERTEXT.len() / 4];

    // prep AES GCM
    let key = KEY;
    aes.initialize_aes_gcm(
        trng,
        AesGcmIv::Array(&IV),
        AesKey::Array(&key),
        &[],
        AesOperation::Encrypt,
    )
    .unwrap();
    aes.gcm_set_text(16);

    dma.setup_dma_read(
        DmaReadTransaction {
            read_addr: src.into(), // MCU SRAM, which should be zero
            fixed_addr: false,
            length: max_len as u32,
            target: DmaReadTarget::AxiWr(dst.into(), false),
            aes_mode: true,
            aes_gcm: true,
        },
        0,
    );
    dma.wait_for_dma_complete();

    dma.flush();
    dma.setup_dma_read(
        DmaReadTransaction {
            read_addr: dst.into(), // MCU SRAM, which should be encrypted output
            fixed_addr: false,
            length: max_len as u32,
            target: DmaReadTarget::AhbFifo,
            aes_mode: false,
            aes_gcm: false,
        },
        0,
    );
    dma.dma_read_fifo(&mut output[..max_len.div_ceil(4)]);
    dma.wait_for_dma_complete();

    let output: &[u8] = output.as_bytes();
    assert_eq!(&output[..max_len], &EXPECTED_CIPHERTEXT[..max_len]);
    println!("AES DMA len={} passed", max_len);
}

fn test_dma_aes_mcu_sram() {
    // Init CFI
    CfiCounter::reset(&mut || Ok((0xdeadbeef, 0xdeadbeef, 0xdeadbeef, 0xdeadbeef)));

    let mut dma = Dma::default();
    let soc = unsafe { SocIfc::new(SocIfcReg::new()) };

    // test only runs in subsystem mode
    if !soc.subsystem_mode() {
        return;
    }
    let mut aes = unsafe { Aes::new(AesReg::new(), AesClpReg::new()) };

    let mut trng = unsafe {
        Trng::new(
            CsrngReg::new(),
            EntropySrcReg::new(),
            SocIfcTrngReg::new(),
            &SocIfcReg::new(),
        )
        .unwrap()
    };

    // Read and decrypt 0s from MCU SRAM to MCU SRAM
    let mcu_base_addr = soc.mci_base_addr() + MCU_SRAM_OFFSET;

    let zeroize_mcu_sram = |dma: &mut Dma| {
        zeroize_axi(dma, mcu_base_addr, MCU_SRAM_SIZE);
    };

    let src = soc.mci_base_addr() + 0xc0_0000;
    let dst = soc.mci_base_addr() + 0xc0_0000;

    for max_len in (4..EXPECTED_CIPHERTEXT.len()).step_by(4) {
        zeroize_mcu_sram(&mut dma);
        run_dma_aes_test(&mut dma, &mut aes, &mut trng, src, dst, max_len);
    }

    cprintln!("AES DMA OK");
}

test_suite! {
    test_dma_aes_mcu_sram,
}
