/*++

Licensed under the Apache-2.0 license.

File Name:

    mlkem_tests.rs

Abstract:

    File contains test cases for ML-KEM-1024 API tests

--*/

#![no_std]
#![no_main]

use caliptra_cfi_lib::CfiCounter;
use caliptra_drivers::{
    Array4x12, Hmac, HmacData, HmacKey, HmacMode, HmacTag, KeyId, KeyReadArgs, KeyUsage,
    KeyWriteArgs, LEArray4x8, MlKem1024, MlKem1024Message, MlKem1024MessageSource, MlKem1024Seeds,
    MlKem1024SharedKey, MlKem1024SharedKeyOut, Trng,
};
use caliptra_registers::abr::AbrReg;
use caliptra_registers::csrng::CsrngReg;
use caliptra_registers::entropy_src::EntropySrcReg;
use caliptra_registers::hmac::HmacReg;
use caliptra_registers::soc_ifc::SocIfcReg;
use caliptra_registers::soc_ifc_trng::SocIfcTrngReg;
use caliptra_test_harness::test_suite;
use zerocopy::IntoBytes;

// Test vectors for ML-KEM-1024
const SEED_D: [u32; 8] = [
    0x12345678, 0x9abcdef0, 0x11223344, 0x55667788, 0xaabbccdd, 0xeeff0011, 0x22334455, 0x66778899,
];

const SEED_Z: [u32; 8] = [
    0x87654321, 0x0fedcba9, 0x44332211, 0x88776655, 0xddccbbaa, 0x1100ffee, 0x55443322, 0x99887766,
];

const MESSAGE: [u32; 8] = [
    0xdeadbeef, 0xcafebabe, 0x12345678, 0x9abcdef0, 0x11223344, 0x55667788, 0xaabbccdd, 0xeeff0011,
];

const KEY_ID: KeyId = KeyId::KeyId2;

fn test_mlkem_name() {
    let mut trng = unsafe {
        Trng::new(
            CsrngReg::new(),
            EntropySrcReg::new(),
            SocIfcTrngReg::new(),
            &SocIfcReg::new(),
        )
        .unwrap()
    };
    let mut entropy_gen = || trng.generate4();

    // This needs to happen in the first test
    CfiCounter::reset(&mut entropy_gen);

    let abr_reg = unsafe { AbrReg::new() };
    let regs = abr_reg.regs();

    let name = regs.mlkem_name().read();

    // MLKEM_CORE_NAME from RTL: 64'h32343130_4D2D4B45 representing "KEM-1024"
    assert_eq!(name, [0x4D2D4B45, 0x32343130]);
}

fn test_key_pair_generation() {
    let mut mlkem = unsafe { MlKem1024::new(AbrReg::new()) };

    // Test key pair generation with arrays
    let seed_d = LEArray4x8::from(SEED_D);
    let seed_z = LEArray4x8::from(SEED_Z);
    let seeds = MlKem1024Seeds::Arrays(&seed_d, &seed_z);
    let (encaps_key, decaps_key) = mlkem.key_pair(seeds).unwrap();

    // Keys should be non-zero (basic sanity check)
    assert_ne!(encaps_key.0, [0u32; 392]);
    assert_ne!(decaps_key.0, [0u32; 792]);

    assert_eq!(
        encaps_key.0,
        [
            0x4814898e, 0xb15b7012, 0x40445527, 0x89bef849, 0x675b39a1, 0xa9521326, 0xe68578dc,
            0x2ca846a9, 0x5ab3e598, 0x6a2205d6, 0xc82885a5, 0x4192cca4, 0x860f738f, 0xd1829988,
            0x3eb59864, 0x1e7c6912, 0xb81432e5, 0x923ab46b, 0xb6fa547, 0x96b67123, 0x6a698bc1,
            0xf28c41a8, 0x550720ca, 0x1bc9b953, 0x108c7b8e, 0x423cb260, 0x3ea0c055, 0xbd92c17f,
            0x39415d06, 0x49b3002b, 0xec77164d, 0x869f9360, 0x5d2714c4, 0xe94dacb8, 0xbc9e9433,
            0x9d891a50, 0x2435231a, 0xa8574f6c, 0xbeaac48c, 0x732b2305, 0x35d073c6, 0x6c15ec8a,
            0x4c9dd55f, 0x3ae705b5, 0x751b9519, 0x4cab896, 0xc27e46d8, 0x722b3b22, 0x4643c9e0,
            0x6b25a917, 0x4d419158, 0x903056be, 0x78a5b31, 0x295cd2bd, 0xb202f300, 0x3ca0cba1,
            0x7e08b44c, 0x9c9c3159, 0x9cb5c7ea, 0x38f6e456, 0xcc6f9ade, 0xf42a6887, 0x9455fc0d,
            0xcf451598, 0xd0c2e8, 0x8bb2df6d, 0xd4afc83c, 0x26507968, 0x3dc9b835, 0x7811bb31,
            0x87447cd9, 0x14166497, 0xbecb9706, 0xf2ab64fc, 0x4270b818, 0xc81d51dc, 0x536a4e58,
            0x8181f726, 0x3b7060d3, 0x613d2c2c, 0x56e963a2, 0x819f92f7, 0x94d7a406, 0xb9917e31,
            0xacbb058c, 0x30f07490, 0x24080842, 0xf09a604c, 0xe8286d2c, 0xb0624e24, 0xd65e0584,
            0x55397138, 0xc4510f75, 0xdfb15255, 0x2c7c06d6, 0x236785a6, 0xdd953c91, 0xec147b14,
            0x4d2c221c, 0x8787aa4c, 0xf1b02101, 0x9f241c9a, 0x1d2b686b, 0x1a6ac75b, 0xe71f7a7,
            0xbc2910c2, 0x256a0050, 0xfe7e421, 0x20852850, 0x29675bc3, 0x54e01eb9, 0x93529149,
            0x44429b64, 0x997a29c2, 0xfc2fe436, 0x599a3f05, 0x5318632f, 0xdd7fc0b2, 0x399c3b85,
            0x664b5e3f, 0x30273089, 0x18b75ed0, 0x33934615, 0x4d628b07, 0xf2880248, 0x14f79305,
            0xe74ffb98, 0xe14d5c89, 0x72860532, 0xae6b73ca, 0x25cc719a, 0xa2481604, 0x6a138055,
            0x185a0b36, 0x8156c22c, 0x2ac47024, 0xc494bbdc, 0x5050ae32, 0xb32c3aeb, 0x83b79a69,
            0x35d8395c, 0x14cc25a6, 0x8c3bbeb, 0x6ed25b87, 0xd3366672, 0xe8b56a99, 0x744a52cb,
            0x684af8e5, 0xf068adcc, 0xa5e3ec1d, 0x98cd9289, 0xc24309e6, 0xb3c6c070, 0x8d001ae2,
            0xbac9b8ba, 0xdb7c2ac, 0xf0998b6d, 0x7bda9185, 0xa204149c, 0x58400a4b, 0x5469c053,
            0x15779d79, 0xf6b09cb0, 0x17c07ed2, 0x5be86726, 0x5238a57d, 0x5a0d75b2, 0xa5f7be74,
            0x23530294, 0x158616b6, 0x49751244, 0x68959817, 0x54380769, 0xb6c54845, 0x32461948,
            0x95c008bb, 0xafbcde48, 0x92c2f5c3, 0x96f307d0, 0x1fd07219, 0x2740c41b, 0xa7f63226,
            0x83576b2f, 0xd8984c0f, 0x990553f0, 0x9d734da1, 0x1043e78c, 0x3ba21d6, 0x15e3d43b,
            0x78835bc8, 0x758e6331, 0x6b46a91b, 0xf25ba5eb, 0x4b969ec6, 0xcf4900ad, 0xaf423626,
            0xa576ba52, 0x6f65fa63, 0x890375f5, 0x4b88b8f2, 0x2e511d36, 0xb3547249, 0x16abba50,
            0x9681be17, 0x453c13d5, 0x586a5c23, 0x6d45dac3, 0x20108956, 0x23a510c4, 0x6cc43e80,
            0xc95ab937, 0xe83f1d75, 0xac9640c3, 0x7b6b3c66, 0xe78661f2, 0xc5bb3554, 0xa5260add,
            0x294fa807, 0xb4144e8b, 0x83591ba1, 0xe86db4b8, 0x23f14e3b, 0x8a41a00e, 0x9c8fa2fb,
            0x1cd87f54, 0xb4633142, 0x9c8f8154, 0x1591d05e, 0x7270cbdf, 0x94525c2a, 0xe734b15,
            0x53a01c76, 0x7dcb3a4, 0xafa0d081, 0xc1a8f711, 0x9267c753, 0xbff89aab, 0x5f4cfb0d,
            0x8a6eb8b5, 0x55858850, 0xa36dd1ca, 0xcc93c10a, 0x79e1f83b, 0x2e443271, 0x33b43113,
            0xabf9844a, 0x264399f9, 0x40faa747, 0x4d08bf4e, 0x630034fd, 0xda6921c5, 0x87a9b73b,
            0xd741d35d, 0x830f69c4, 0x3e57a43d, 0x98838ab5, 0x75dc7840, 0x8d091002, 0xe1734bc6,
            0xf065618b, 0x5f128159, 0x32dea1d, 0x43860de1, 0xbc52b08, 0x665926da, 0xab8c3df8,
            0x937790a5, 0x30a5e58e, 0x59ef9891, 0xce23e24f, 0xb77e876c, 0x8a3f9f38, 0xbdd33a18,
            0x7e4730b4, 0x9c4a42f6, 0x627971aa, 0xf6c5fb99, 0xc08e29a6, 0x6bb47ca2, 0xd01daae8,
            0x59581309, 0x44732399, 0x5f5fa281, 0xd36c6e58, 0xb7194851, 0x98b2e3c0, 0xb5cb4372,
            0x4ef0529b, 0xdb2b67e9, 0x279aa100, 0x90cbc290, 0xee1b7b93, 0x77116c81, 0x9cd1b382,
            0xc09b93fc, 0x7bea81e1, 0x3cb53161, 0xb55377e4, 0xa26a01d9, 0xafc13b66, 0x87b6cccc,
            0xb25c336a, 0xa3a80247, 0x2329e58d, 0x62dd38ca, 0xca9bbdb0, 0x2f2b396a, 0x464453f4,
            0xca5afe76, 0x414cc4d6, 0xd53ba33a, 0x3e529a0d, 0xa63a034b, 0xb41d3c56, 0x2d65b443,
            0x451af08b, 0xda1bb9aa, 0x6b9b9027, 0x13775176, 0x950b2d46, 0x4e67e399, 0x3d263cd4,
            0xa20f00b4, 0xa982bd02, 0x47595ae4, 0x252715c3, 0x6c0a9ccb, 0xd2c93ba, 0xe94467d1,
            0x1d18448, 0xbfaf87f7, 0x14715861, 0x1863263d, 0xf772d0d2, 0x24077ef9, 0x6dd1439a,
            0xb521552d, 0x83c52dea, 0xaf137114, 0xa834884a, 0xea74b94b, 0x2be1e902, 0xe94d3087,
            0x3639bba5, 0x8ba31360, 0x3a52a036, 0x140a7ecb, 0x1520a850, 0xd55e0bcc, 0x5b324252,
            0x36fc921c, 0x14abf3fd, 0x33626f41, 0x8aba09a7, 0x2492a028, 0xd1809657, 0xc543c96c,
            0x8db8349a, 0x6c9abd6a, 0xb0389d26, 0x9d7014f8, 0x1c98be57, 0x4b291a3a, 0xb2806a0c,
            0x22dc8294, 0xa5e87928, 0xa08f35fd, 0x1cce97d5, 0x2bfc2b24, 0x28708a27, 0x29a34f5a,
            0x8ed4ea9e, 0xf167462f, 0x8b3e0725, 0x2657286b, 0x13242825, 0x96564db5, 0xbe059f6a,
            0x452b280, 0xa44e0d87, 0xb21aa2cd, 0xdf6aa565, 0x3bfa112, 0x56e9348f, 0xb884d50d,
            0xd40cd04e, 0xd83ca4b2, 0xc4aa9a68, 0x5a02a685, 0x637b46b1, 0x17002fe1, 0xc65ab9f6
        ]
    );
    assert_eq!(
        decaps_key.0,
        [
            0xdac07e1, 0x16073c76, 0x71eba683, 0xfb57db5f, 0xd5d590f6, 0x7f536c03, 0x3c816829,
            0xf8188c38, 0xbd1b4f8c, 0x5e4a6b3f, 0x41890576, 0x5e2b3441, 0x4b05270a, 0xb2f4306c,
            0x8ae634ad, 0x338a029d, 0x705dceba, 0x2c9d1c6, 0xde4e4074, 0xf1079b98, 0xa6e5be2e,
            0x2d5bd4fd, 0xb00861b3, 0x48c9578c, 0xc334282c, 0x29fbbbf4, 0xb4b75cbc, 0xbe23d5dd,
            0xd6eb652a, 0x8c210916, 0xe6543b72, 0xf21f9832, 0xc3930933, 0xa2b08736, 0x88987ca0,
            0xc3b3295e, 0x528d74bc, 0x97eebd47, 0x575ef4c, 0x3cab9927, 0xf5b43d79, 0x62c85446,
            0x836e1a03, 0xc16f3c97, 0x99419cc2, 0x6e5c2363, 0x28d499da, 0x6eca2f6b, 0xcc04b476,
            0xb7d3c31b, 0x8349a7c, 0x294a67d8, 0x2011c649, 0x65296c81, 0x444b6931, 0xa2c95882,
            0x7af6a8a4, 0xee8e08f8, 0xb561ac62, 0x135453cd, 0xf587fbe9, 0x78e381eb, 0xd58e765,
            0x44c511a6, 0x3b395754, 0xad9cd4aa, 0x47cc7a71, 0x6b5bb71c, 0x92b49f4c, 0x9a6854a3,
            0xb7edce44, 0x40e6830a, 0x64c4a249, 0x931ec820, 0x4d47075b, 0x466b1551, 0x2487c5fa,
            0xe00081c, 0x889241c1, 0xa3f4cfd5, 0xa9495a59, 0x170d76b0, 0x47b2310a, 0x30523ebf,
            0xee16c9b5, 0x4bb41314, 0x510a27a5, 0x9b62f259, 0xd7bd6261, 0x2416d02f, 0xcd4fdb6b,
            0xc32939e4, 0xae121a52, 0x8491c1ad, 0x7ac59a74, 0x836abf3d, 0xd49a54e8, 0x32746645,
            0x2b6565ca, 0x979274e6, 0xb9f0cb31, 0x6e9242f, 0xe47aaadc, 0x51983377, 0x3a9a9c9f,
            0x1c60eb98, 0x1b9bbd1c, 0x3673c66f, 0xc20115a6, 0x5bb11d88, 0xc1b94a8d, 0x385147ba,
            0xf6599a34, 0x628a0e86, 0x7f112575, 0x906a2b15, 0x2426e636, 0x8968cb00, 0xea1e080b,
            0xb4450b58, 0x5beb9c3, 0x2853088, 0x63606608, 0x743a6bca, 0x9985091b, 0x8a621191,
            0xd4217410, 0x292a8734, 0x5d2c9a7d, 0x214482ad, 0x80b36035, 0x32c3d202, 0x2cc09290,
            0x99594102, 0x69751699, 0xccc7b474, 0x89a48c51, 0x7b9bb629, 0xb8c390d2, 0x27306c40,
            0x5ba9cf9c, 0xa27040fc, 0x33ca2002, 0x6b0a530, 0xcb53a47d, 0x96c36332, 0xa797ab7,
            0x862c3ca8, 0xb1426093, 0x59779495, 0x5c25f2ab, 0x2b8b186c, 0x51bb1399, 0x126cd312,
            0xe89ab39b, 0x9535af1a, 0xbc8f86c2, 0x3329b288, 0xabaf484, 0x228c7395, 0x87e812c5,
            0x56fa240a, 0xc4a5804a, 0x7bb77231, 0x40c3b022, 0xc51b793a, 0x52ce6661, 0x9b301eba,
            0xd922c874, 0xe57c5d55, 0xc9127700, 0xc403bd7, 0x62fe33f8, 0x7a00708b, 0x491a4b7b,
            0x8819e94, 0x167aeb87, 0xc16068e6, 0xb1078b51, 0xb708e673, 0x6488432f, 0x85ba3d26,
            0x64b5b43b, 0x74435c29, 0xf29131fc, 0x9996c93d, 0x4989463a, 0x41a87dd0, 0xb2c936b6,
            0x686d7b5d, 0x866d1936, 0x3f4c4869, 0xdea21c83, 0x4433b53c, 0x33313892, 0x322621a3,
            0xc2aa1d63, 0xa14128b8, 0xa5970389, 0x5faa44a, 0x2a4bb435, 0x347181d6, 0xa0ac94fc,
            0xae809714, 0xcb8ffadd, 0x70249503, 0xa56cc210, 0xe6467540, 0x88678512, 0xc4a5ca83,
            0xfc195ad3, 0x62940d0a, 0x6120f71c, 0xbfcfa4bc, 0x7bfa5f1c, 0x4101268d, 0xf87e6514,
            0xb92b7685, 0x33186507, 0xa23db6a3, 0xa11e5f42, 0x25853d56, 0x20847c56, 0x59dc90e4,
            0x32c01a9e, 0x1d2e087d, 0xe4693205, 0x420c4f08, 0x2c44b147, 0xdbada2b9, 0xacb16946,
            0x29be243f, 0x92dbcbc3, 0x8fcce1c9, 0x11976cdf, 0xa1735fd6, 0x3863a766, 0xffcf6a08,
            0x9744ae87, 0xc7e0acb6, 0xea69b692, 0x38e8c574, 0xb271fc28, 0x5986276d, 0xd90219ab,
            0x9aead799, 0x263af3f6, 0xd296a264, 0x8a58ce17, 0x698bc69c, 0x49d1c941, 0xa4bb1d29,
            0xf68f12e7, 0xb04a6fb0, 0xecc5a09, 0x146437e, 0xe2bc94b6, 0x59e3af29, 0x19bc1508,
            0xaf35bfa, 0x7bcc8605, 0x4596b40a, 0x356c9af8, 0x2414debd, 0xbb3562ca, 0xa7627017,
            0xb994b440, 0x1929d6fb, 0xfcb95226, 0xc5130112, 0x3233f659, 0x39958984, 0x1dfa9103,
            0x252224f5, 0x83e501c7, 0xa9632907, 0x4051a64f, 0xd9289dac, 0x6a6a529c, 0xa20e1636,
            0xc469890, 0x62d93041, 0x40aad658, 0x50893883, 0xbe0b3c9b, 0xbb1f3399, 0xa93c9e48,
            0x4c828a33, 0x2ea10710, 0xd7cd86e3, 0x50203a62, 0xf957b1ab, 0x6a7ec2e7, 0x39109e6f,
            0x6a76a7cf, 0x47435227, 0x4572f7d, 0xf123a02d, 0x7c692a04, 0x4f619063, 0x7c9df847,
            0x73ccb270, 0x16b4d227, 0x956f17f, 0x482f9715, 0xaf98e683, 0x715796ba, 0xbc49ad0,
            0x2c50d8bc, 0x6a6817f, 0x851c6260, 0x9c93980c, 0x999330a, 0xd66f8979, 0x3cac2cc5,
            0x304c8435, 0x29d42810, 0x4cf83a89, 0xa405b8f7, 0x27f5c8d5, 0x2887dfcb, 0xf479f25e,
            0xe0130d00, 0x121c472a, 0x53144c23, 0x77a2ba6a, 0x1661831e, 0xbb6c8167, 0xc7c09a4c,
            0x8dd89938, 0x39c5f3f6, 0x8aea5599, 0xb51af26e, 0xcb4cf585, 0xf977ba08, 0x503b754a,
            0xff1a699c, 0xa7d7847a, 0xbb58af4b, 0x3aa2e3ba, 0xc2e35ae7, 0xadf2dd4c, 0x9bb6b057,
            0xab28810a, 0x6566e802, 0x4cc9208c, 0xa9252392, 0xbda1b428, 0x21cab702, 0x40cd7b92,
            0x6b073f8f, 0x86557699, 0xa5cc330a, 0x37435528, 0xd17c91ab, 0xeac428f8, 0x31569be,
            0x808920d7, 0x322040cb, 0x6ae6175a, 0x5d874233, 0x11e7b227, 0xa1430e79, 0xb3975993,
            0xa38a4064, 0x88d1525a, 0xcaced83f, 0xa9c956f0, 0xc72c135e, 0xd6c6f45e, 0x931b96c8,
            0xce19a0bc, 0x4db8d077, 0xf86f1d51, 0x36fa936c, 0xdc1ad739, 0xa9af1388, 0x24a04655,
            0xb4ab042b, 0xb26d5ae0, 0xbe7bbdab, 0xf64f9920, 0xe6615c19, 0x327864bc, 0x4814898e,
            0xb15b7012, 0x40445527, 0x89bef849, 0x675b39a1, 0xa9521326, 0xe68578dc, 0x2ca846a9,
            0x5ab3e598, 0x6a2205d6, 0xc82885a5, 0x4192cca4, 0x860f738f, 0xd1829988, 0x3eb59864,
            0x1e7c6912, 0xb81432e5, 0x923ab46b, 0xb6fa547, 0x96b67123, 0x6a698bc1, 0xf28c41a8,
            0x550720ca, 0x1bc9b953, 0x108c7b8e, 0x423cb260, 0x3ea0c055, 0xbd92c17f, 0x39415d06,
            0x49b3002b, 0xec77164d, 0x869f9360, 0x5d2714c4, 0xe94dacb8, 0xbc9e9433, 0x9d891a50,
            0x2435231a, 0xa8574f6c, 0xbeaac48c, 0x732b2305, 0x35d073c6, 0x6c15ec8a, 0x4c9dd55f,
            0x3ae705b5, 0x751b9519, 0x4cab896, 0xc27e46d8, 0x722b3b22, 0x4643c9e0, 0x6b25a917,
            0x4d419158, 0x903056be, 0x78a5b31, 0x295cd2bd, 0xb202f300, 0x3ca0cba1, 0x7e08b44c,
            0x9c9c3159, 0x9cb5c7ea, 0x38f6e456, 0xcc6f9ade, 0xf42a6887, 0x9455fc0d, 0xcf451598,
            0xd0c2e8, 0x8bb2df6d, 0xd4afc83c, 0x26507968, 0x3dc9b835, 0x7811bb31, 0x87447cd9,
            0x14166497, 0xbecb9706, 0xf2ab64fc, 0x4270b818, 0xc81d51dc, 0x536a4e58, 0x8181f726,
            0x3b7060d3, 0x613d2c2c, 0x56e963a2, 0x819f92f7, 0x94d7a406, 0xb9917e31, 0xacbb058c,
            0x30f07490, 0x24080842, 0xf09a604c, 0xe8286d2c, 0xb0624e24, 0xd65e0584, 0x55397138,
            0xc4510f75, 0xdfb15255, 0x2c7c06d6, 0x236785a6, 0xdd953c91, 0xec147b14, 0x4d2c221c,
            0x8787aa4c, 0xf1b02101, 0x9f241c9a, 0x1d2b686b, 0x1a6ac75b, 0xe71f7a7, 0xbc2910c2,
            0x256a0050, 0xfe7e421, 0x20852850, 0x29675bc3, 0x54e01eb9, 0x93529149, 0x44429b64,
            0x997a29c2, 0xfc2fe436, 0x599a3f05, 0x5318632f, 0xdd7fc0b2, 0x399c3b85, 0x664b5e3f,
            0x30273089, 0x18b75ed0, 0x33934615, 0x4d628b07, 0xf2880248, 0x14f79305, 0xe74ffb98,
            0xe14d5c89, 0x72860532, 0xae6b73ca, 0x25cc719a, 0xa2481604, 0x6a138055, 0x185a0b36,
            0x8156c22c, 0x2ac47024, 0xc494bbdc, 0x5050ae32, 0xb32c3aeb, 0x83b79a69, 0x35d8395c,
            0x14cc25a6, 0x8c3bbeb, 0x6ed25b87, 0xd3366672, 0xe8b56a99, 0x744a52cb, 0x684af8e5,
            0xf068adcc, 0xa5e3ec1d, 0x98cd9289, 0xc24309e6, 0xb3c6c070, 0x8d001ae2, 0xbac9b8ba,
            0xdb7c2ac, 0xf0998b6d, 0x7bda9185, 0xa204149c, 0x58400a4b, 0x5469c053, 0x15779d79,
            0xf6b09cb0, 0x17c07ed2, 0x5be86726, 0x5238a57d, 0x5a0d75b2, 0xa5f7be74, 0x23530294,
            0x158616b6, 0x49751244, 0x68959817, 0x54380769, 0xb6c54845, 0x32461948, 0x95c008bb,
            0xafbcde48, 0x92c2f5c3, 0x96f307d0, 0x1fd07219, 0x2740c41b, 0xa7f63226, 0x83576b2f,
            0xd8984c0f, 0x990553f0, 0x9d734da1, 0x1043e78c, 0x3ba21d6, 0x15e3d43b, 0x78835bc8,
            0x758e6331, 0x6b46a91b, 0xf25ba5eb, 0x4b969ec6, 0xcf4900ad, 0xaf423626, 0xa576ba52,
            0x6f65fa63, 0x890375f5, 0x4b88b8f2, 0x2e511d36, 0xb3547249, 0x16abba50, 0x9681be17,
            0x453c13d5, 0x586a5c23, 0x6d45dac3, 0x20108956, 0x23a510c4, 0x6cc43e80, 0xc95ab937,
            0xe83f1d75, 0xac9640c3, 0x7b6b3c66, 0xe78661f2, 0xc5bb3554, 0xa5260add, 0x294fa807,
            0xb4144e8b, 0x83591ba1, 0xe86db4b8, 0x23f14e3b, 0x8a41a00e, 0x9c8fa2fb, 0x1cd87f54,
            0xb4633142, 0x9c8f8154, 0x1591d05e, 0x7270cbdf, 0x94525c2a, 0xe734b15, 0x53a01c76,
            0x7dcb3a4, 0xafa0d081, 0xc1a8f711, 0x9267c753, 0xbff89aab, 0x5f4cfb0d, 0x8a6eb8b5,
            0x55858850, 0xa36dd1ca, 0xcc93c10a, 0x79e1f83b, 0x2e443271, 0x33b43113, 0xabf9844a,
            0x264399f9, 0x40faa747, 0x4d08bf4e, 0x630034fd, 0xda6921c5, 0x87a9b73b, 0xd741d35d,
            0x830f69c4, 0x3e57a43d, 0x98838ab5, 0x75dc7840, 0x8d091002, 0xe1734bc6, 0xf065618b,
            0x5f128159, 0x32dea1d, 0x43860de1, 0xbc52b08, 0x665926da, 0xab8c3df8, 0x937790a5,
            0x30a5e58e, 0x59ef9891, 0xce23e24f, 0xb77e876c, 0x8a3f9f38, 0xbdd33a18, 0x7e4730b4,
            0x9c4a42f6, 0x627971aa, 0xf6c5fb99, 0xc08e29a6, 0x6bb47ca2, 0xd01daae8, 0x59581309,
            0x44732399, 0x5f5fa281, 0xd36c6e58, 0xb7194851, 0x98b2e3c0, 0xb5cb4372, 0x4ef0529b,
            0xdb2b67e9, 0x279aa100, 0x90cbc290, 0xee1b7b93, 0x77116c81, 0x9cd1b382, 0xc09b93fc,
            0x7bea81e1, 0x3cb53161, 0xb55377e4, 0xa26a01d9, 0xafc13b66, 0x87b6cccc, 0xb25c336a,
            0xa3a80247, 0x2329e58d, 0x62dd38ca, 0xca9bbdb0, 0x2f2b396a, 0x464453f4, 0xca5afe76,
            0x414cc4d6, 0xd53ba33a, 0x3e529a0d, 0xa63a034b, 0xb41d3c56, 0x2d65b443, 0x451af08b,
            0xda1bb9aa, 0x6b9b9027, 0x13775176, 0x950b2d46, 0x4e67e399, 0x3d263cd4, 0xa20f00b4,
            0xa982bd02, 0x47595ae4, 0x252715c3, 0x6c0a9ccb, 0xd2c93ba, 0xe94467d1, 0x1d18448,
            0xbfaf87f7, 0x14715861, 0x1863263d, 0xf772d0d2, 0x24077ef9, 0x6dd1439a, 0xb521552d,
            0x83c52dea, 0xaf137114, 0xa834884a, 0xea74b94b, 0x2be1e902, 0xe94d3087, 0x3639bba5,
            0x8ba31360, 0x3a52a036, 0x140a7ecb, 0x1520a850, 0xd55e0bcc, 0x5b324252, 0x36fc921c,
            0x14abf3fd, 0x33626f41, 0x8aba09a7, 0x2492a028, 0xd1809657, 0xc543c96c, 0x8db8349a,
            0x6c9abd6a, 0xb0389d26, 0x9d7014f8, 0x1c98be57, 0x4b291a3a, 0xb2806a0c, 0x22dc8294,
            0xa5e87928, 0xa08f35fd, 0x1cce97d5, 0x2bfc2b24, 0x28708a27, 0x29a34f5a, 0x8ed4ea9e,
            0xf167462f, 0x8b3e0725, 0x2657286b, 0x13242825, 0x96564db5, 0xbe059f6a, 0x452b280,
            0xa44e0d87, 0xb21aa2cd, 0xdf6aa565, 0x3bfa112, 0x56e9348f, 0xb884d50d, 0xd40cd04e,
            0xd83ca4b2, 0xc4aa9a68, 0x5a02a685, 0x637b46b1, 0x17002fe1, 0xc65ab9f6, 0xb6b26546,
            0xae6a2074, 0x7621ee62, 0xe9b7863c, 0xf0fb834f, 0x52005fb0, 0x7a5b738b, 0x77cccbea,
            0x87654321, 0xfedcba9, 0x44332211, 0x88776655, 0xddccbbaa, 0x1100ffee, 0x55443322,
            0x99887766,
        ]
    );
}

fn test_key_pair_generation_from_kv() {
    let mut trng = unsafe {
        Trng::new(
            CsrngReg::new(),
            EntropySrcReg::new(),
            SocIfcTrngReg::new(),
            &SocIfcReg::new(),
        )
        .unwrap()
    };

    let mut mlkem = unsafe { MlKem1024::new(AbrReg::new()) };
    let mut hmac = unsafe { Hmac::new(HmacReg::new()) };

    // Store seeds in key vault
    let key_out = KeyWriteArgs {
        id: KEY_ID,
        usage: KeyUsage::default().set_mlkem_seed_en(),
    };

    hmac.hmac(
        HmacKey::from(&Array4x12::default()),
        HmacData::from(&[]),
        &mut trng,
        HmacTag::Key(key_out),
        HmacMode::Hmac384,
    )
    .unwrap();

    // Test key pair generation from key vault
    let seeds = MlKem1024Seeds::Key(KeyReadArgs::new(KEY_ID));
    let (encaps_key, decaps_key) = mlkem.key_pair(seeds).unwrap();

    // Encapsulation key should be non-zero (basic sanity check)
    assert_ne!(encaps_key.0, [0u32; 392]);
    // Decapsulation key should be zero (because the seed is from the KV)
    assert_eq!(decaps_key.0, [0u32; 792]);

    assert_eq!(
        encaps_key.0,
        [
            0xffa6b869, 0x47761091, 0xb1188d91, 0x1a3a9ae9, 0xb07f01d0, 0x438c5376, 0xb4867992,
            0xdac20d39, 0x9563d5a2, 0xbdb40537, 0xda071895, 0x35abd911, 0x245e0022, 0x18bfbf98,
            0x9b576b51, 0xb64fdc37, 0xd9a31476, 0x3a03ef49, 0xd1477972, 0xa9010136, 0x6b29e7a5,
            0xc854226b, 0xc8668871, 0xb75c4f8c, 0x967d0035, 0x7e518e1, 0xbb81fa26, 0xad38b738,
            0xd6249b3b, 0x7c885d5b, 0x65a3261, 0x2b421c13, 0x4995f38f, 0x603f804a, 0xb9c9c785,
            0x36f5b2c6, 0x8cc346a6, 0xd73b7d98, 0x874b209b, 0xa50b937d, 0x26085f48, 0x4d11b1bd,
            0xf75854f1, 0x231e4e29, 0x51bc461d, 0xf471d10f, 0xf07c39d7, 0x2df8fb2e, 0xfe22bb71,
            0xc240c483, 0x83b9fd99, 0xeec3c12c, 0x5af679b4, 0x56d57057, 0xfd3dc39b, 0x304f74dc,
            0xb6b3490f, 0x5e79f86e, 0x2cce9dcb, 0x6fd6394f, 0x638ae81b, 0x2212c378, 0x39daeb15,
            0x20beea7f, 0xc91008d3, 0x9b8a6c01, 0x61374456, 0x9601258c, 0xc4cc3304, 0xe07271b3,
            0x75793b29, 0xa1f9abae, 0x613ce553, 0x2c556af5, 0x87d4500c, 0x498d1b41, 0x19fa0465,
            0x19202b1c, 0x482ea31e, 0xa5b3461a, 0x7850037a, 0x2888ece0, 0x21c70a31, 0x87981270,
            0xa437359d, 0x18238a08, 0x27fadfa7, 0x7f7ff66a, 0x4cea1ea9, 0xb467738c, 0x8c90d07e,
            0xf94b99f3, 0xcb690322, 0xf7111424, 0x9730c510, 0x13c71ccd, 0x8fa2bbdb, 0xb0ebad85,
            0x73b7d662, 0xddc64a96, 0x88574b, 0x67fcc06f, 0x9a551bae, 0xa97405fa, 0x4212f690,
            0xc995405a, 0xd138989b, 0x1d31531e, 0xc2ade71e, 0x5cec2b45, 0xa0ec766e, 0x2283d8a9,
            0xe6f159fb, 0x96006607, 0x7875912a, 0x6b5fbaf3, 0xce40fa54, 0x867ed047, 0xc52c724,
            0x5c59abaa, 0x7709d2df, 0x7a0f02cb, 0x516ad6a5, 0x26695015, 0x43200474, 0x335487c7,
            0xe5a82553, 0xa3c3be74, 0x9daa3f7a, 0xb695864d, 0x35de60cc, 0x16349c54, 0xa7cbe058,
            0x7c125f48, 0x74540d25, 0xea677afe, 0x8320a875, 0x1646e37a, 0x3f325454, 0x4374330a,
            0x167feb9, 0x127eecb6, 0xe6485ef6, 0x8de89e8a, 0x1d2c79d0, 0x16ddad40, 0x6fb898bd,
            0xf87dae4, 0x48787ec0, 0x9b0b076f, 0x4a8b151b, 0x22000b81, 0xab447e91, 0x4b39e0fe,
            0x16204748, 0xc1236a91, 0x7abd101d, 0x3173b2ca, 0x9022a0a3, 0x3e5399f7, 0x9209275,
            0xb5eca73b, 0xc11489d8, 0x11f56ee0, 0xb8f36b3d, 0x7e0107a9, 0x7533b6ba, 0x77b7c002,
            0x781608d8, 0x44ca9af5, 0xbec9cb04, 0x60b1a54f, 0x28e6aa3b, 0x3d7402a0, 0xca46f160,
            0x54368f73, 0x2d5b8034, 0x9712679f, 0x7cf0acc4, 0x47285c8b, 0x6cc433cd, 0x24336b60,
            0xbcb75e0f, 0x86c5314c, 0xa495cb52, 0x9144665b, 0x2e70d64f, 0xf45a79d3, 0x4b4d9aa,
            0x5e76c62e, 0xc3a1a6c1, 0x44d668b5, 0xa9953290, 0x98dc8522, 0x5f89dc49, 0x6764b163,
            0xa868cc56, 0x7ab1f677, 0xa53215b7, 0x90c891a8, 0x854acd1d, 0x2012978d, 0xc4821777,
            0x3cb71911, 0x2f02f06c, 0x30011ccc, 0x3f86c170, 0xda4288e5, 0x924190fb, 0x763cad5f,
            0x4978d222, 0x713859b0, 0xc7f63765, 0xd0545647, 0x4a491da9, 0x384c092, 0x9a78e2ba,
            0x87eb9ddc, 0x41cc2089, 0x531e1bb0, 0x820a9b2b, 0x3b08c621, 0x630da222, 0xd6230bbc,
            0xadc29bc8, 0xf94d619f, 0x89b98ef3, 0xbfb57209, 0x44b122a0, 0x316a2b70, 0x108a5589,
            0x850302df, 0xdcfc9262, 0x6a2a144d, 0xad35a5c9, 0xf8ed15e3, 0x5cace692, 0x5278a4d8,
            0x5a8551e3, 0x29462f9a, 0x757cd74f, 0x4bbe20cb, 0xf502865, 0xf342e07d, 0x575b3857,
            0x4e09ed0d, 0xf43a8c7, 0x9c23499c, 0x9df6302f, 0x2e0f732b, 0x5b4a3f6, 0x47881634,
            0x74be908f, 0x1b153676, 0xa823d04, 0x1c38a1b9, 0x4cb01cd3, 0x4c3c0868, 0x650a86ce,
            0xe68497b6, 0xc5377a5b, 0x366a0cb4, 0xacb2c378, 0xa345be7c, 0xaa35d2bd, 0xa5348655,
            0x4563ac85, 0x5d155b52, 0x273487fa, 0x7e78ccc0, 0xea48d3ec, 0xc6ae4608, 0x9c3b566f,
            0x8c0ba081, 0x69d92cb4, 0x2f7ad1f, 0x884c9045, 0xc1334b8b, 0x6ad0ab54, 0x2c85a09a,
            0x9a529d99, 0x66ab140a, 0x92a4445b, 0x9819360b, 0xbb67a10f, 0xb3bec443, 0xfb28b299,
            0x6bf6ee3d, 0x7da3ea22, 0x97dd7a54, 0x8317a20d, 0x3b37185a, 0xb9676da6, 0xc932ac3e,
            0x4b7c490d, 0x57408cc4, 0x638a0fb0, 0xd3c6eb8e, 0x85c13255, 0xc656bac5, 0x2f0650c9,
            0x37116601, 0x2520871a, 0xf2104a11, 0xb0742e57, 0x7d83066c, 0x387ed633, 0xf5c51f49,
            0xce2ce180, 0xd66b10e3, 0x193559eb, 0x9db9ed60, 0x1b957652, 0xe7e04839, 0x21cb70a4,
            0xdc6259a3, 0xb27f9468, 0x8fc9a444, 0x3510fc36, 0x903255, 0x91506dc2, 0xe969754a,
            0xf66228b1, 0x34c19d73, 0x41063bdf, 0xe61e7981, 0xcd3b568f, 0x574500a, 0x7669666b,
            0x228518b1, 0x54ae82e9, 0xe9f74f7b, 0xc0f0c515, 0x63ba290b, 0x29782d20, 0x79862637,
            0xf5ccd559, 0x6a86aa19, 0x51e0e8bc, 0xbd86f359, 0x6c04986c, 0xa1270c0e, 0x2e9e7cad,
            0xd7707672, 0x25e383ab, 0xa9c8f217, 0xe80506f2, 0x153bc163, 0x5cb148ce, 0xb7fa96b9,
            0x7f2b94c1, 0xfd622505, 0x285c0822, 0x121a6b4b, 0xc1a5e7b0, 0xe130cc73, 0x1d70136c,
            0xe35cf867, 0x512c0b06, 0x6dfc3f02, 0x295c0546, 0x509f2334, 0x93e7bca8, 0xc80c268,
            0x2cb5715b, 0xbd517b17, 0xcb2d65f5, 0x61f21418, 0x4df578ae, 0x8abfb66b, 0x6635249,
            0x2e99eb3e, 0x9791f18b, 0x48130e8b, 0x17e98b8f, 0x1ca8a39, 0x95131d39, 0xbecc07c1,
            0xe562e82f, 0x7a6b86c3, 0x92c14f97, 0xc09bc0fd, 0x44df72b4, 0xb0943f27, 0x4f58b8be,
            0xd0347e9b, 0xb2a479e3, 0x5a9e7a70, 0xc0d31a76, 0xddb7b29d, 0x25cfb291, 0x1013aa08,
        ]
    )
}

fn test_encapsulate_and_decapsulate() {
    let mut mlkem = unsafe { MlKem1024::new(AbrReg::new()) };

    // Generate key pair
    let seed_d = LEArray4x8::from(SEED_D);
    let seed_z = LEArray4x8::from(SEED_Z);
    let seeds = MlKem1024Seeds::Arrays(&seed_d, &seed_z);
    let (encaps_key, decaps_key) = mlkem.key_pair(seeds).unwrap();

    // Test encapsulation with array message and array output
    let message = MlKem1024Message::from(MESSAGE);
    let mut shared_key_out = MlKem1024SharedKey::default();
    let ciphertext = mlkem
        .encapsulate(
            encaps_key,
            MlKem1024MessageSource::Array(&message),
            MlKem1024SharedKeyOut::Array(&mut shared_key_out),
        )
        .unwrap();

    // Ciphertext should be non-zero
    assert_ne!(ciphertext.0, [0u32; 392]);
    // Shared key should be non-zero
    assert_ne!(shared_key_out.0, [0u32; 8]);

    // Test decapsulation
    let mut decaps_shared_key = MlKem1024SharedKey::default();
    mlkem
        .decapsulate(
            decaps_key,
            &ciphertext,
            MlKem1024SharedKeyOut::Array(&mut decaps_shared_key),
        )
        .unwrap();

    // The decapsulated shared key should match the encapsulated one
    assert_eq!(shared_key_out.0, decaps_shared_key.0);
}

fn test_encapsulate_with_kv_message() {
    let mut trng = unsafe {
        Trng::new(
            CsrngReg::new(),
            EntropySrcReg::new(),
            SocIfcTrngReg::new(),
            &SocIfcReg::new(),
        )
        .unwrap()
    };

    let mut mlkem = unsafe { MlKem1024::new(AbrReg::new()) };
    let mut hmac = unsafe { Hmac::new(HmacReg::new()) };

    // Generate key pair
    let seed_d = LEArray4x8::from(SEED_D);
    let seed_z = LEArray4x8::from(SEED_Z);
    let seeds = MlKem1024Seeds::Arrays(&seed_d, &seed_z);
    let (encaps_key, _decaps_key) = mlkem.key_pair(seeds).unwrap();

    // Store message in key vault
    let msg_key_id = KeyId::KeyId3;
    let msg_key_out = KeyWriteArgs {
        id: msg_key_id,
        usage: KeyUsage::default().set_mlkem_msg_en(),
    };

    let message_array = LEArray4x8::from(MESSAGE);
    let message_bytes = message_array.as_bytes();
    hmac.hmac(
        HmacKey::from(&Array4x12::default()),
        HmacData::from(message_bytes),
        &mut trng,
        HmacTag::Key(msg_key_out),
        HmacMode::Hmac384,
    )
    .unwrap();

    // Test encapsulation with key vault message
    let mut shared_key_out = MlKem1024SharedKey::default();
    let ciphertext = mlkem
        .encapsulate(
            encaps_key,
            MlKem1024MessageSource::Key(KeyReadArgs::new(msg_key_id)),
            MlKem1024SharedKeyOut::Array(&mut shared_key_out),
        )
        .unwrap();

    // Ciphertext should be non-zero
    assert_eq!(
        ciphertext.0,
        [
            0x4681e224, 0x71d1b46e, 0x9444853f, 0x3394715, 0xf7d97f6e, 0xb29b805c, 0xf8ee64a5,
            0x1b530da1, 0x627439a6, 0x8afbd839, 0x6badb349, 0xa2c0c50e, 0xd44b800c, 0xae621886,
            0x6310d9b5, 0x3ac60c4e, 0x35a483fd, 0x808baf32, 0x840ac264, 0x202e71bd, 0x434e07f2,
            0x3a285bbf, 0xf6a4f647, 0x8ce6b445, 0x2678c45c, 0x4808ba1e, 0x5791f175, 0x57a648a3,
            0xaaba12c6, 0x5c0f5eb2, 0xaca90159, 0x3c0e2585, 0xa8421c88, 0xa0109552, 0x7b921e0d,
            0xb0de3aff, 0xca486b47, 0xfc14f5e4, 0xf449037, 0xbe8d4d6b, 0xd2857b0c, 0x9e7ab3dc,
            0xc522ae14, 0xdb297747, 0xb54cada8, 0xaff14a4c, 0xc4f64b7a, 0x553d58f0, 0x57ba44a1,
            0x93bed2f0, 0x2806e57c, 0xfef08b84, 0x7961d495, 0x22926932, 0x7844744d, 0x961becfe,
            0x69c53292, 0xbe149e64, 0x62234417, 0x9d9b9103, 0x42747ceb, 0x70f3218a, 0x849bce15,
            0xd9dc6dbf, 0x6970ae0b, 0x3c129892, 0x937f0750, 0xeb13da81, 0x65737b78, 0xff17f102,
            0x3f381d36, 0x461d61e4, 0x6ecf41a1, 0xde48a4d4, 0xd8c6a63d, 0xbf54c324, 0x610b94eb,
            0x51d2743b, 0xf18f2d88, 0x2c45f0cd, 0x744e4a72, 0x6e64c6e7, 0xbc68ed94, 0x1f8fe44b,
            0x9eb8d8e9, 0xd4c2b296, 0xdb8c7bd7, 0xa03cd64d, 0x108d18c9, 0xd620c44e, 0xc1228af6,
            0x29efba35, 0x8cb6a650, 0x9599d69c, 0x3ffad6b1, 0x4ebecca, 0x69045b9c, 0xa56de734,
            0xa40a8b9e, 0xb08194b5, 0x37af0740, 0xfb30f8cc, 0x5186eff6, 0xca907e75, 0x25d61dd6,
            0xf88111c2, 0x3d2602f1, 0x146cc3d5, 0x15829765, 0xacac7fa7, 0x1234979d, 0xe639050a,
            0x7ba2fcc4, 0xd10e5f17, 0x6a8b4a0a, 0x549d6846, 0x8dd9d267, 0xa4f07358, 0x7c639582,
            0x6f19fcdd, 0xe8603ea0, 0x9e413d4e, 0xa67b120d, 0x8cc7f647, 0x1f9d380f, 0xb5c2f470,
            0x1e7330c6, 0x4e05083, 0xa28640c0, 0x6530de51, 0x92445734, 0xe8173355, 0xf0d517cf,
            0xb291ff64, 0xd0e5df90, 0x389299, 0x8ce93977, 0x92f26303, 0xeead9648, 0xc2fdb19b,
            0x85ee440b, 0x39367488, 0x9cb8c3a, 0xacd3bf80, 0x710c2161, 0xb3c68772, 0xf0aac68b,
            0x1baf3686, 0x75c087ba, 0xe7e7302b, 0x276ff784, 0xd283a32f, 0x15511be8, 0xefc52108,
            0xcc8d2980, 0x67870d2, 0x76d56a00, 0x8d0226ec, 0x89c89d60, 0x4541de8, 0x260a2f4c,
            0xaf5ab391, 0xf64a6286, 0xe27d0264, 0x5fa5e3e5, 0xdaa5edf9, 0xca7327e6, 0xc5def8c4,
            0x7fc3d247, 0x8f5d823b, 0x54d9c32d, 0x6dc1321d, 0xc9ef0f61, 0x25b132ed, 0x88c6914,
            0x4335680d, 0xc6763cee, 0x60f247fd, 0x10c52e03, 0x956ea682, 0xc9e507a, 0xc383b111,
            0xe308a5e6, 0xe8189b4e, 0x979f1dd7, 0x98c8a2f4, 0x49a65a02, 0xbb2309f5, 0xe910fbf3,
            0x216098, 0xf799fa21, 0xcbc33cb0, 0xc14c2ba0, 0x30bcf8be, 0xd9d142cf, 0x171fe772,
            0xe28b77c3, 0x4a895df1, 0x1c25f7ce, 0x9abc4ad, 0xb418afd7, 0x89c44ea4, 0x9c963654,
            0x31be18e8, 0x4905a225, 0xf7662598, 0x713d204, 0x60d6e86a, 0x83f40c3d, 0x4e96c2ca,
            0x7e81f40e, 0xec4945f2, 0x97fcb1dd, 0xbfb4497c, 0x890680eb, 0x70b96a2f, 0x1410a287,
            0xcf92162, 0x82e1027e, 0x4d192863, 0x1474d879, 0xec3c5d7b, 0xf7e278a6, 0xd2b5ff7,
            0xf1585880, 0x918b9eda, 0x88be0f51, 0x4333712c, 0xa0173710, 0xe7096173, 0x847d3224,
            0xba64f57, 0x1acb5725, 0x33ce4568, 0xd8ca9223, 0xb45f1a51, 0x97134080, 0xea1f02da,
            0x75c0635f, 0xb5e3c3a4, 0xcef429f6, 0x332388c6, 0x308d760, 0x1d04e0b0, 0x6f12646f,
            0x25360e7, 0xacc5efa9, 0x5c2d8851, 0x59fe70f6, 0x5e75409d, 0x3ba3eb4d, 0xd745eb3e,
            0xc6d0c290, 0x4bddb05a, 0x290a71bb, 0x6b4a72ae, 0xe863550c, 0x1fce23a2, 0x64beb483,
            0xb2ab7f55, 0x60cd192d, 0xfb8d65f, 0x4acddd9, 0x95601ae6, 0x3f86a356, 0x60dac33b,
            0xcb1faf88, 0x18e42969, 0x22676e56, 0x433a959b, 0xc398d0a7, 0x3e5eb4e4, 0xeb8f3e70,
            0x4ee0a383, 0xaf4d53e, 0x11bf1b0f, 0x4dd29751, 0x221749ea, 0xbec12360, 0x4ab1f5c2,
            0xa3c28085, 0xf651b73f, 0xc4c4213f, 0xb018e695, 0xd599214, 0x9a3a52f2, 0x741a04a,
            0xe690d8ce, 0x3df9a0d, 0xf3d6d3e6, 0x59c29223, 0x93eb5443, 0xde2f4dfe, 0xc97ff56c,
            0xb8bcbd87, 0x144915f, 0x68ba0d84, 0x5965fd26, 0x658f32f8, 0xde6d0cd6, 0xa940db02,
            0x30c39243, 0x1d30bb4c, 0x6c3d4d92, 0x5b3f9dbc, 0x2c53902c, 0x9fbb738a, 0x9ac62dd9,
            0x7ac07ace, 0xf44125eb, 0xbcd0282, 0x838246ae, 0xa997d059, 0x27b779b1, 0x6fca2d52,
            0xe231914e, 0x9493a4e7, 0xdc7bd30f, 0xf4fbfbb4, 0x3a257fd3, 0x700816fe, 0x9e669d2,
            0x2b6af1f8, 0x73c1cadd, 0x7413c519, 0x518348f3, 0xef3f7d9e, 0x3e68f25c, 0xf504446a,
            0x423e1cc6, 0xe58f2707, 0xa6cd57fc, 0x80fffb2c, 0xb5bceace, 0x93497d7f, 0x1fa7fc5f,
            0xa212d02f, 0x71d7724f, 0x442f7b68, 0x65062f31, 0xd071d954, 0x8425cafd, 0x65aa40b7,
            0xa4c03b92, 0x3490b435, 0x84583edf, 0x73739ed3, 0xadf23186, 0x40a8cb9a, 0xd2bdac98,
            0xd71641a3, 0x85a8bc6e, 0xfa5ea03b, 0xd297c870, 0x26f0a19a, 0x9695a76, 0xdaee4fdd,
            0xe3ab288, 0xe667dc6d, 0xfe620943, 0xa720cda6, 0xc2963fb2, 0x8f48fb9d, 0xed49443e,
            0xe2bdb720, 0xe1c8b932, 0xda12096d, 0xa02dc202, 0x24500fe0, 0x147c1679, 0x292bf0ee,
            0x53c80fde, 0x15e884de, 0xefca9a0c, 0xcb00914f, 0x38222c51, 0xaf5cdbb9, 0xee5a56d3,
            0xa4e6289e, 0x23b2ef58, 0x23c6e149, 0xd7c85738, 0xdb247b9e, 0x8e081677, 0x8ad84fa6,
            0x12cce4ef, 0x433e215d, 0xbf01fd84, 0x35b707d9, 0x5f076386, 0x6fa6c0de, 0xf966d1b,
        ]
    );
    // Shared key should be zero (since we are using KV)
    assert_eq!(shared_key_out.0, [0u32; 8]);

    let ciphertext = mlkem
        .encapsulate(
            encaps_key,
            MlKem1024MessageSource::Key(KeyReadArgs::new(msg_key_id)),
            MlKem1024SharedKeyOut::Key(KeyWriteArgs::new(
                msg_key_id,
                KeyUsage::default().set_aes_key_en(),
            )),
        )
        .unwrap();

    // Ciphertext should be non-zero
    assert_eq!(
        ciphertext.0,
        [
            0x4681e224, 0x71d1b46e, 0x9444853f, 0x3394715, 0xf7d97f6e, 0xb29b805c, 0xf8ee64a5,
            0x1b530da1, 0x627439a6, 0x8afbd839, 0x6badb349, 0xa2c0c50e, 0xd44b800c, 0xae621886,
            0x6310d9b5, 0x3ac60c4e, 0x35a483fd, 0x808baf32, 0x840ac264, 0x202e71bd, 0x434e07f2,
            0x3a285bbf, 0xf6a4f647, 0x8ce6b445, 0x2678c45c, 0x4808ba1e, 0x5791f175, 0x57a648a3,
            0xaaba12c6, 0x5c0f5eb2, 0xaca90159, 0x3c0e2585, 0xa8421c88, 0xa0109552, 0x7b921e0d,
            0xb0de3aff, 0xca486b47, 0xfc14f5e4, 0xf449037, 0xbe8d4d6b, 0xd2857b0c, 0x9e7ab3dc,
            0xc522ae14, 0xdb297747, 0xb54cada8, 0xaff14a4c, 0xc4f64b7a, 0x553d58f0, 0x57ba44a1,
            0x93bed2f0, 0x2806e57c, 0xfef08b84, 0x7961d495, 0x22926932, 0x7844744d, 0x961becfe,
            0x69c53292, 0xbe149e64, 0x62234417, 0x9d9b9103, 0x42747ceb, 0x70f3218a, 0x849bce15,
            0xd9dc6dbf, 0x6970ae0b, 0x3c129892, 0x937f0750, 0xeb13da81, 0x65737b78, 0xff17f102,
            0x3f381d36, 0x461d61e4, 0x6ecf41a1, 0xde48a4d4, 0xd8c6a63d, 0xbf54c324, 0x610b94eb,
            0x51d2743b, 0xf18f2d88, 0x2c45f0cd, 0x744e4a72, 0x6e64c6e7, 0xbc68ed94, 0x1f8fe44b,
            0x9eb8d8e9, 0xd4c2b296, 0xdb8c7bd7, 0xa03cd64d, 0x108d18c9, 0xd620c44e, 0xc1228af6,
            0x29efba35, 0x8cb6a650, 0x9599d69c, 0x3ffad6b1, 0x4ebecca, 0x69045b9c, 0xa56de734,
            0xa40a8b9e, 0xb08194b5, 0x37af0740, 0xfb30f8cc, 0x5186eff6, 0xca907e75, 0x25d61dd6,
            0xf88111c2, 0x3d2602f1, 0x146cc3d5, 0x15829765, 0xacac7fa7, 0x1234979d, 0xe639050a,
            0x7ba2fcc4, 0xd10e5f17, 0x6a8b4a0a, 0x549d6846, 0x8dd9d267, 0xa4f07358, 0x7c639582,
            0x6f19fcdd, 0xe8603ea0, 0x9e413d4e, 0xa67b120d, 0x8cc7f647, 0x1f9d380f, 0xb5c2f470,
            0x1e7330c6, 0x4e05083, 0xa28640c0, 0x6530de51, 0x92445734, 0xe8173355, 0xf0d517cf,
            0xb291ff64, 0xd0e5df90, 0x389299, 0x8ce93977, 0x92f26303, 0xeead9648, 0xc2fdb19b,
            0x85ee440b, 0x39367488, 0x9cb8c3a, 0xacd3bf80, 0x710c2161, 0xb3c68772, 0xf0aac68b,
            0x1baf3686, 0x75c087ba, 0xe7e7302b, 0x276ff784, 0xd283a32f, 0x15511be8, 0xefc52108,
            0xcc8d2980, 0x67870d2, 0x76d56a00, 0x8d0226ec, 0x89c89d60, 0x4541de8, 0x260a2f4c,
            0xaf5ab391, 0xf64a6286, 0xe27d0264, 0x5fa5e3e5, 0xdaa5edf9, 0xca7327e6, 0xc5def8c4,
            0x7fc3d247, 0x8f5d823b, 0x54d9c32d, 0x6dc1321d, 0xc9ef0f61, 0x25b132ed, 0x88c6914,
            0x4335680d, 0xc6763cee, 0x60f247fd, 0x10c52e03, 0x956ea682, 0xc9e507a, 0xc383b111,
            0xe308a5e6, 0xe8189b4e, 0x979f1dd7, 0x98c8a2f4, 0x49a65a02, 0xbb2309f5, 0xe910fbf3,
            0x216098, 0xf799fa21, 0xcbc33cb0, 0xc14c2ba0, 0x30bcf8be, 0xd9d142cf, 0x171fe772,
            0xe28b77c3, 0x4a895df1, 0x1c25f7ce, 0x9abc4ad, 0xb418afd7, 0x89c44ea4, 0x9c963654,
            0x31be18e8, 0x4905a225, 0xf7662598, 0x713d204, 0x60d6e86a, 0x83f40c3d, 0x4e96c2ca,
            0x7e81f40e, 0xec4945f2, 0x97fcb1dd, 0xbfb4497c, 0x890680eb, 0x70b96a2f, 0x1410a287,
            0xcf92162, 0x82e1027e, 0x4d192863, 0x1474d879, 0xec3c5d7b, 0xf7e278a6, 0xd2b5ff7,
            0xf1585880, 0x918b9eda, 0x88be0f51, 0x4333712c, 0xa0173710, 0xe7096173, 0x847d3224,
            0xba64f57, 0x1acb5725, 0x33ce4568, 0xd8ca9223, 0xb45f1a51, 0x97134080, 0xea1f02da,
            0x75c0635f, 0xb5e3c3a4, 0xcef429f6, 0x332388c6, 0x308d760, 0x1d04e0b0, 0x6f12646f,
            0x25360e7, 0xacc5efa9, 0x5c2d8851, 0x59fe70f6, 0x5e75409d, 0x3ba3eb4d, 0xd745eb3e,
            0xc6d0c290, 0x4bddb05a, 0x290a71bb, 0x6b4a72ae, 0xe863550c, 0x1fce23a2, 0x64beb483,
            0xb2ab7f55, 0x60cd192d, 0xfb8d65f, 0x4acddd9, 0x95601ae6, 0x3f86a356, 0x60dac33b,
            0xcb1faf88, 0x18e42969, 0x22676e56, 0x433a959b, 0xc398d0a7, 0x3e5eb4e4, 0xeb8f3e70,
            0x4ee0a383, 0xaf4d53e, 0x11bf1b0f, 0x4dd29751, 0x221749ea, 0xbec12360, 0x4ab1f5c2,
            0xa3c28085, 0xf651b73f, 0xc4c4213f, 0xb018e695, 0xd599214, 0x9a3a52f2, 0x741a04a,
            0xe690d8ce, 0x3df9a0d, 0xf3d6d3e6, 0x59c29223, 0x93eb5443, 0xde2f4dfe, 0xc97ff56c,
            0xb8bcbd87, 0x144915f, 0x68ba0d84, 0x5965fd26, 0x658f32f8, 0xde6d0cd6, 0xa940db02,
            0x30c39243, 0x1d30bb4c, 0x6c3d4d92, 0x5b3f9dbc, 0x2c53902c, 0x9fbb738a, 0x9ac62dd9,
            0x7ac07ace, 0xf44125eb, 0xbcd0282, 0x838246ae, 0xa997d059, 0x27b779b1, 0x6fca2d52,
            0xe231914e, 0x9493a4e7, 0xdc7bd30f, 0xf4fbfbb4, 0x3a257fd3, 0x700816fe, 0x9e669d2,
            0x2b6af1f8, 0x73c1cadd, 0x7413c519, 0x518348f3, 0xef3f7d9e, 0x3e68f25c, 0xf504446a,
            0x423e1cc6, 0xe58f2707, 0xa6cd57fc, 0x80fffb2c, 0xb5bceace, 0x93497d7f, 0x1fa7fc5f,
            0xa212d02f, 0x71d7724f, 0x442f7b68, 0x65062f31, 0xd071d954, 0x8425cafd, 0x65aa40b7,
            0xa4c03b92, 0x3490b435, 0x84583edf, 0x73739ed3, 0xadf23186, 0x40a8cb9a, 0xd2bdac98,
            0xd71641a3, 0x85a8bc6e, 0xfa5ea03b, 0xd297c870, 0x26f0a19a, 0x9695a76, 0xdaee4fdd,
            0xe3ab288, 0xe667dc6d, 0xfe620943, 0xa720cda6, 0xc2963fb2, 0x8f48fb9d, 0xed49443e,
            0xe2bdb720, 0xe1c8b932, 0xda12096d, 0xa02dc202, 0x24500fe0, 0x147c1679, 0x292bf0ee,
            0x53c80fde, 0x15e884de, 0xefca9a0c, 0xcb00914f, 0x38222c51, 0xaf5cdbb9, 0xee5a56d3,
            0xa4e6289e, 0x23b2ef58, 0x23c6e149, 0xd7c85738, 0xdb247b9e, 0x8e081677, 0x8ad84fa6,
            0x12cce4ef, 0x433e215d, 0xbf01fd84, 0x35b707d9, 0x5f076386, 0x6fa6c0de, 0xf966d1b,
        ]
    );
}

fn test_encapsulate_with_kv_output() {
    let mut mlkem = unsafe { MlKem1024::new(AbrReg::new()) };

    // Generate key pair
    let seed_d = LEArray4x8::from(SEED_D);
    let seed_z = LEArray4x8::from(SEED_Z);
    let seeds = MlKem1024Seeds::Arrays(&seed_d, &seed_z);
    let (encaps_key, _decaps_key) = mlkem.key_pair(seeds).unwrap();

    // Test encapsulation with key vault shared key output
    let shared_key_id = KeyId::KeyId4;
    let mut shared_key_usage = KeyUsage::default();
    shared_key_usage.set_hmac_key(true);
    let shared_key_out = KeyWriteArgs {
        id: shared_key_id,
        usage: shared_key_usage,
    };

    let message = MlKem1024Message::from(MESSAGE);
    let ciphertext = mlkem
        .encapsulate(
            encaps_key,
            MlKem1024MessageSource::Array(&message),
            MlKem1024SharedKeyOut::Key(shared_key_out),
        )
        .unwrap();

    // Ciphertext should be non-zero
    assert_ne!(ciphertext.0, [0u32; 392]);
}

fn test_keygen_decapsulate() {
    let mut mlkem = unsafe { MlKem1024::new(AbrReg::new()) };

    // Generate key pair for encapsulation
    let seed_d = LEArray4x8::from(SEED_D);
    let seed_z = LEArray4x8::from(SEED_Z);
    let seeds_enc = MlKem1024Seeds::Arrays(&seed_d, &seed_z);
    let (encaps_key, _) = mlkem.key_pair(seeds_enc).unwrap();

    // Encapsulate with the encaps key
    let message = MlKem1024Message::from(MESSAGE);
    let mut original_shared_key = MlKem1024SharedKey::default();
    let ciphertext = mlkem
        .encapsulate(
            encaps_key,
            MlKem1024MessageSource::Array(&message),
            MlKem1024SharedKeyOut::Array(&mut original_shared_key),
        )
        .unwrap();

    // Test keygen + decapsulate in one operation
    let seed_d2 = LEArray4x8::from(SEED_D);
    let seed_z2 = LEArray4x8::from(SEED_Z);
    let seeds_dec = MlKem1024Seeds::Arrays(&seed_d2, &seed_z2);
    let mut keygen_decaps_shared_key = MlKem1024SharedKey::default();
    mlkem
        .keygen_decapsulate(
            seeds_dec,
            &ciphertext,
            MlKem1024SharedKeyOut::Array(&mut keygen_decaps_shared_key),
        )
        .unwrap();

    // The shared keys should match since we used the same seeds
    assert_eq!(original_shared_key.0, keygen_decaps_shared_key.0);
}

fn test_keygen_decapsulate_with_kv() {
    let mut mlkem = unsafe { MlKem1024::new(AbrReg::new()) };

    // Generate key pair for encapsulation using KV
    let seeds_kv = MlKem1024Seeds::Key(KeyReadArgs::new(KEY_ID));
    let (encaps_key, _) = mlkem.key_pair(seeds_kv).unwrap();

    // Encapsulate
    let message = MlKem1024Message::from(MESSAGE);
    let mut original_shared_key = MlKem1024SharedKey::default();
    let ciphertext = mlkem
        .encapsulate(
            encaps_key,
            MlKem1024MessageSource::Array(&message),
            MlKem1024SharedKeyOut::Array(&mut original_shared_key),
        )
        .unwrap();

    // Test keygen + decapsulate with KV seeds and KV output
    let shared_key_out_id = KeyId::KeyId5;
    let mut shared_key_out_usage = KeyUsage::default();
    shared_key_out_usage.set_aes_key(true);
    let shared_key_out = KeyWriteArgs {
        id: shared_key_out_id,
        usage: shared_key_out_usage,
    };

    mlkem
        .keygen_decapsulate(
            MlKem1024Seeds::Key(KeyReadArgs::new(KEY_ID)),
            &ciphertext,
            MlKem1024SharedKeyOut::Key(shared_key_out),
        )
        .unwrap();

    // If we got here without error, the operation succeeded
}

test_suite! {
    test_mlkem_name,
    test_key_pair_generation,
    test_key_pair_generation_from_kv,
    test_encapsulate_and_decapsulate,
    test_encapsulate_with_kv_message,
    test_encapsulate_with_kv_output,
    test_keygen_decapsulate,
    test_keygen_decapsulate_with_kv,
}
