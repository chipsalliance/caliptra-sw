/*

Licensed under the Apache-2.0 license.

File Name:

lms_24_tests.rs

Abstract:

File contains test cases for LMS signature verification using SHA256/192.

--*/

#![no_std]
#![no_main]

use caliptra_drivers::{
    verify_lms_signature, HashValue, LmotsSignature, LmsIdentifier, LmsSignature, Sha192Digest,
};
use caliptra_test_harness::test_suite;

fn test_failures_lms_24() {
    let message: [u8; 33] = [
        116, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 109, 101, 115, 115, 97, 103, 101,
        32, 73, 32, 119, 97, 110, 116, 32, 115, 105, 103, 110, 101, 100,
    ];
    let lms_identifier: [u8; 16] = [
        158, 20, 249, 74, 242, 177, 66, 175, 101, 91, 176, 36, 80, 31, 240, 7,
    ];
    let q: u32 = 0;
    let lmots_type = caliptra_drivers::LmotsAlgorithmType::LmotsSha256N24W4;
    let lms_type = caliptra_drivers::LmsAlgorithmType::LmsSha256N24H15;
    let lms_public_key = HashValue::from([
        3, 42, 162, 189, 155, 49, 233, 189, 51, 75, 70, 46, 39, 121, 32, 117, 189, 173, 221, 174,
        249, 237, 177, 36,
    ]);
    let nonce: [u8; 24] = [
        180, 36, 9, 219, 221, 74, 28, 73, 252, 121, 55, 148, 117, 233, 199, 103, 28, 127, 81, 83,
        247, 83, 90, 196,
    ];
    let y = [
        Sha192Digest::from([
            114, 83, 175, 105, 200, 90, 91, 150, 16, 85, 204, 3, 183, 225, 238, 131, 171, 176, 50,
            179, 20, 88, 250, 105,
        ]),
        Sha192Digest::from([
            0, 212, 244, 252, 218, 53, 125, 201, 169, 68, 16, 35, 61, 75, 0, 180, 185, 44, 168,
            110, 240, 248, 253, 19,
        ]),
        Sha192Digest::from([
            210, 173, 126, 3, 236, 50, 192, 89, 143, 155, 100, 253, 140, 111, 130, 121, 247, 142,
            136, 231, 123, 76, 219, 137,
        ]),
        Sha192Digest::from([
            108, 228, 158, 102, 59, 50, 107, 41, 29, 229, 201, 219, 223, 171, 5, 104, 29, 181, 134,
            104, 30, 128, 230, 175,
        ]),
        Sha192Digest::from([
            186, 149, 143, 190, 28, 131, 190, 78, 26, 210, 63, 14, 14, 151, 166, 176, 232, 0, 243,
            206, 151, 181, 252, 176,
        ]),
        Sha192Digest::from([
            148, 158, 87, 237, 101, 185, 92, 44, 185, 187, 76, 132, 78, 78, 76, 227, 31, 99, 241,
            43, 1, 93, 53, 188,
        ]),
        Sha192Digest::from([
            173, 239, 177, 238, 58, 178, 196, 109, 12, 59, 82, 77, 146, 64, 237, 241, 204, 199, 9,
            167, 249, 120, 85, 19,
        ]),
        Sha192Digest::from([
            247, 140, 243, 204, 21, 225, 185, 177, 113, 169, 47, 38, 51, 71, 89, 92, 36, 242, 213,
            190, 174, 166, 151, 147,
        ]),
        Sha192Digest::from([
            74, 82, 153, 254, 76, 126, 108, 131, 48, 159, 152, 192, 94, 195, 214, 39, 157, 51, 80,
            129, 239, 167, 72, 49,
        ]),
        Sha192Digest::from([
            107, 52, 117, 125, 249, 26, 114, 57, 175, 242, 107, 70, 94, 196, 128, 158, 34, 34, 155,
            238, 121, 172, 144, 17,
        ]),
        Sha192Digest::from([
            172, 179, 238, 166, 66, 48, 179, 212, 235, 84, 26, 173, 167, 181, 109, 68, 21, 147,
            129, 122, 28, 10, 71, 59,
        ]),
        Sha192Digest::from([
            2, 2, 149, 184, 96, 65, 100, 185, 190, 219, 17, 239, 176, 57, 67, 158, 136, 163, 14,
            93, 154, 244, 128, 105,
        ]),
        Sha192Digest::from([
            22, 202, 169, 34, 236, 93, 51, 11, 9, 84, 163, 23, 141, 28, 216, 189, 210, 140, 100,
            252, 7, 158, 216, 35,
        ]),
        Sha192Digest::from([
            188, 122, 187, 66, 118, 218, 16, 88, 162, 60, 244, 0, 8, 99, 234, 32, 4, 91, 226, 242,
            184, 220, 126, 207,
        ]),
        Sha192Digest::from([
            11, 48, 194, 18, 142, 165, 55, 185, 14, 118, 75, 58, 73, 121, 214, 109, 103, 48, 113,
            144, 144, 219, 137, 91,
        ]),
        Sha192Digest::from([
            97, 187, 195, 106, 133, 55, 105, 76, 35, 79, 90, 17, 229, 195, 13, 165, 57, 123, 127,
            124, 135, 244, 236, 220,
        ]),
        Sha192Digest::from([
            214, 99, 87, 219, 160, 8, 161, 135, 138, 137, 42, 88, 12, 90, 114, 122, 242, 3, 22, 28,
            19, 84, 20, 201,
        ]),
        Sha192Digest::from([
            62, 224, 247, 169, 52, 197, 210, 43, 245, 147, 5, 3, 170, 217, 184, 109, 121, 126, 249,
            234, 206, 13, 57, 158,
        ]),
        Sha192Digest::from([
            111, 128, 183, 62, 154, 70, 169, 35, 17, 9, 161, 84, 29, 247, 33, 54, 19, 135, 63, 115,
            182, 185, 184, 202,
        ]),
        Sha192Digest::from([
            126, 102, 196, 148, 117, 216, 193, 126, 234, 244, 162, 43, 30, 156, 15, 116, 252, 90,
            176, 226, 22, 186, 84, 117,
        ]),
        Sha192Digest::from([
            176, 130, 86, 150, 54, 220, 191, 253, 216, 234, 150, 85, 183, 139, 58, 153, 29, 50,
            215, 242, 150, 122, 216, 116,
        ]),
        Sha192Digest::from([
            213, 57, 136, 146, 251, 212, 93, 186, 102, 167, 197, 1, 70, 242, 41, 124, 60, 39, 172,
            216, 140, 224, 16, 139,
        ]),
        Sha192Digest::from([
            209, 80, 45, 106, 121, 180, 147, 197, 53, 0, 194, 54, 186, 38, 171, 173, 143, 87, 145,
            35, 230, 193, 14, 201,
        ]),
        Sha192Digest::from([
            244, 160, 96, 211, 226, 133, 43, 154, 217, 127, 228, 180, 88, 112, 51, 138, 63, 204,
            71, 177, 241, 209, 12, 210,
        ]),
        Sha192Digest::from([
            253, 40, 21, 189, 33, 221, 10, 234, 120, 172, 11, 230, 217, 177, 52, 224, 194, 80, 115,
            217, 66, 91, 234, 78,
        ]),
        Sha192Digest::from([
            142, 45, 153, 40, 242, 62, 139, 243, 237, 98, 143, 248, 136, 57, 110, 116, 158, 85,
            174, 102, 245, 154, 132, 108,
        ]),
        Sha192Digest::from([
            127, 196, 123, 139, 102, 213, 211, 220, 71, 172, 127, 40, 88, 185, 59, 160, 70, 164,
            110, 130, 107, 143, 58, 169,
        ]),
        Sha192Digest::from([
            106, 155, 152, 117, 70, 4, 234, 124, 188, 200, 185, 180, 186, 185, 67, 218, 207, 96,
            33, 156, 177, 212, 237, 103,
        ]),
        Sha192Digest::from([
            28, 50, 10, 247, 174, 132, 131, 117, 235, 156, 199, 176, 236, 48, 69, 190, 121, 253,
            17, 124, 205, 38, 151, 94,
        ]),
        Sha192Digest::from([
            60, 45, 74, 53, 46, 16, 60, 61, 118, 137, 179, 172, 242, 204, 86, 208, 237, 122, 111,
            88, 118, 236, 64, 150,
        ]),
        Sha192Digest::from([
            26, 90, 173, 140, 225, 8, 167, 203, 59, 241, 27, 1, 28, 182, 14, 71, 243, 69, 135, 243,
            247, 149, 71, 114,
        ]),
        Sha192Digest::from([
            134, 229, 36, 166, 13, 250, 239, 130, 252, 108, 141, 161, 129, 149, 133, 88, 147, 39,
            246, 41, 105, 201, 119, 183,
        ]),
        Sha192Digest::from([
            233, 74, 233, 191, 174, 66, 20, 147, 252, 183, 20, 56, 71, 47, 13, 3, 124, 130, 67,
            225, 110, 41, 117, 63,
        ]),
        Sha192Digest::from([
            212, 156, 195, 221, 197, 89, 123, 35, 135, 231, 3, 169, 154, 201, 151, 115, 19, 250,
            167, 25, 91, 65, 218, 114,
        ]),
        Sha192Digest::from([
            108, 224, 2, 164, 233, 39, 114, 244, 234, 116, 244, 233, 9, 191, 128, 40, 253, 215,
            127, 138, 9, 192, 96, 81,
        ]),
        Sha192Digest::from([
            25, 199, 185, 136, 112, 88, 213, 69, 107, 186, 60, 98, 128, 39, 200, 141, 247, 168,
            247, 169, 254, 245, 166, 65,
        ]),
        Sha192Digest::from([
            154, 91, 105, 237, 196, 172, 129, 152, 31, 235, 64, 184, 199, 169, 167, 109, 28, 90,
            129, 114, 23, 203, 168, 248,
        ]),
        Sha192Digest::from([
            92, 103, 184, 153, 111, 137, 218, 113, 32, 174, 94, 230, 44, 22, 171, 89, 28, 129, 181,
            130, 198, 136, 111, 110,
        ]),
        Sha192Digest::from([
            127, 202, 249, 32, 173, 214, 230, 13, 137, 185, 249, 161, 50, 207, 105, 187, 248, 115,
            245, 128, 201, 105, 99, 244,
        ]),
        Sha192Digest::from([
            1, 157, 13, 71, 35, 221, 198, 100, 215, 125, 204, 77, 95, 91, 109, 20, 166, 154, 226,
            43, 54, 60, 97, 72,
        ]),
        Sha192Digest::from([
            127, 226, 179, 203, 161, 35, 43, 47, 148, 46, 14, 51, 4, 64, 212, 211, 27, 104, 220,
            228, 131, 74, 215, 40,
        ]),
        Sha192Digest::from([
            240, 69, 168, 105, 145, 140, 15, 127, 17, 108, 6, 247, 3, 203, 118, 155, 106, 108, 54,
            32, 119, 207, 244, 79,
        ]),
        Sha192Digest::from([
            129, 3, 237, 227, 82, 19, 203, 115, 152, 14, 21, 217, 166, 50, 219, 205, 170, 119, 168,
            219, 113, 196, 99, 215,
        ]),
        Sha192Digest::from([
            181, 31, 8, 203, 99, 129, 24, 62, 161, 53, 19, 190, 234, 53, 106, 205, 90, 53, 196, 79,
            87, 130, 220, 191,
        ]),
        Sha192Digest::from([
            210, 242, 50, 59, 187, 92, 87, 113, 114, 253, 39, 243, 112, 150, 157, 245, 145, 10,
            158, 14, 185, 156, 208, 41,
        ]),
        Sha192Digest::from([
            59, 174, 44, 13, 235, 83, 149, 32, 113, 199, 13, 213, 25, 70, 159, 85, 36, 236, 82,
            222, 131, 225, 13, 40,
        ]),
        Sha192Digest::from([
            90, 96, 155, 203, 48, 48, 231, 221, 220, 80, 48, 182, 104, 227, 251, 132, 65, 144, 24,
            63, 213, 161, 30, 228,
        ]),
        Sha192Digest::from([
            180, 206, 62, 48, 182, 36, 174, 151, 112, 95, 172, 137, 28, 126, 34, 110, 46, 13, 253,
            211, 18, 126, 254, 125,
        ]),
        Sha192Digest::from([
            128, 81, 69, 128, 98, 253, 161, 255, 110, 129, 112, 57, 67, 245, 183, 210, 57, 162,
            252, 238, 29, 210, 192, 79,
        ]),
        Sha192Digest::from([
            67, 114, 253, 57, 242, 170, 139, 118, 218, 17, 42, 183, 40, 78, 194, 255, 206, 222, 89,
            94, 135, 216, 66, 26,
        ]),
        Sha192Digest::from([
            63, 190, 96, 11, 47, 42, 15, 68, 18, 222, 207, 100, 183, 151, 183, 29, 178, 70, 252,
            221, 70, 202, 249, 17,
        ]),
    ];
    let path = [
        Sha192Digest::from([
            190, 89, 115, 188, 231, 147, 95, 83, 64, 233, 38, 169, 252, 179, 203, 157, 45, 41, 34,
            25, 40, 211, 119, 1,
        ]),
        Sha192Digest::from([
            172, 202, 32, 47, 8, 73, 117, 153, 248, 62, 212, 36, 255, 37, 210, 168, 182, 22, 241,
            226, 72, 240, 241, 186,
        ]),
        Sha192Digest::from([
            205, 216, 22, 155, 126, 134, 186, 33, 209, 89, 170, 133, 98, 46, 157, 33, 124, 116,
            118, 213, 243, 167, 205, 251,
        ]),
        Sha192Digest::from([
            235, 68, 85, 65, 167, 165, 163, 171, 120, 146, 179, 113, 129, 67, 148, 110, 160, 193,
            228, 255, 131, 127, 176, 243,
        ]),
        Sha192Digest::from([
            104, 254, 237, 32, 201, 9, 1, 193, 218, 205, 243, 11, 144, 211, 63, 111, 75, 23, 147,
            165, 87, 6, 197, 67,
        ]),
        Sha192Digest::from([
            58, 1, 130, 70, 186, 225, 3, 231, 151, 148, 252, 31, 165, 194, 3, 253, 139, 240, 199,
            119, 180, 7, 170, 222,
        ]),
        Sha192Digest::from([
            161, 99, 130, 235, 4, 157, 69, 131, 98, 247, 182, 62, 48, 4, 249, 44, 146, 102, 14, 99,
            23, 24, 247, 96,
        ]),
        Sha192Digest::from([
            8, 66, 73, 69, 87, 172, 155, 148, 122, 33, 70, 177, 34, 210, 231, 95, 58, 61, 117, 158,
            90, 186, 238, 88,
        ]),
        Sha192Digest::from([
            28, 187, 234, 135, 188, 122, 248, 254, 120, 199, 12, 102, 0, 65, 197, 62, 218, 207, 23,
            61, 149, 122, 44, 225,
        ]),
        Sha192Digest::from([
            170, 55, 124, 140, 2, 91, 180, 152, 199, 109, 150, 7, 33, 68, 130, 6, 125, 226, 181,
            74, 14, 244, 236, 236,
        ]),
        Sha192Digest::from([
            80, 134, 106, 103, 105, 230, 239, 179, 157, 175, 158, 196, 175, 108, 233, 59, 232, 114,
            61, 140, 165, 216, 152, 7,
        ]),
        Sha192Digest::from([
            75, 227, 116, 222, 161, 154, 50, 82, 249, 197, 190, 148, 55, 151, 247, 161, 1, 183, 67,
            104, 230, 111, 47, 85,
        ]),
        Sha192Digest::from([
            30, 236, 222, 182, 222, 203, 135, 45, 112, 71, 89, 147, 80, 194, 6, 175, 54, 178, 9,
            99, 185, 126, 198, 135,
        ]),
        Sha192Digest::from([
            37, 240, 17, 120, 92, 31, 226, 45, 238, 129, 232, 31, 96, 138, 118, 183, 172, 139, 185,
            195, 241, 172, 104, 79,
        ]),
        Sha192Digest::from([
            115, 214, 39, 213, 106, 242, 110, 49, 45, 191, 246, 127, 148, 10, 131, 10, 213, 56,
            103, 75, 197, 155, 78, 57,
        ]),
    ];

    let ots = LmotsSignature {
        ots_type: lmots_type,
        nonce,
        y,
    };

    let lms_sig = LmsSignature {
        q,
        lmots_signature: ots,
        sig_type: lms_type,
        lms_path: &path,
    };

    let success =
        verify_lms_signature(15, &message, &lms_identifier, q, &lms_public_key, &lms_sig).unwrap();
    assert_eq!(success, true);

    let new_message = "this is a different message".as_bytes();
    let should_fail = verify_lms_signature(
        15,
        &new_message,
        &lms_identifier,
        q,
        &lms_public_key,
        &lms_sig,
    )
    .unwrap();
    assert_eq!(should_fail, false);

    let new_lms: LmsIdentifier = [0u8; 16];
    let should_fail =
        verify_lms_signature(15, &message, &new_lms, q, &lms_public_key, &lms_sig).unwrap();
    assert_eq!(should_fail, false);

    let new_q = q + 1;
    let should_fail = verify_lms_signature(
        15,
        &message,
        &lms_identifier,
        new_q,
        &lms_public_key,
        &lms_sig,
    )
    .unwrap();
    assert_eq!(should_fail, false);

    let new_public_key = HashValue::from([0u8; 24]);
    let should_fail =
        verify_lms_signature(15, &message, &lms_identifier, q, &new_public_key, &lms_sig).unwrap();
    assert_eq!(should_fail, false);

    let new_ots = LmotsSignature {
        ots_type: lmots_type,
        nonce,
        y,
    };

    let new_lms_sig = LmsSignature {
        q,
        lmots_signature: new_ots,
        sig_type: lms_type,
        lms_path: &[HashValue::from([0u8; 24]); 15],
    };
    let should_fail = verify_lms_signature(
        15,
        &message,
        &lms_identifier,
        q,
        &lms_public_key,
        &new_lms_sig,
    )
    .unwrap();
    assert_eq!(should_fail, false);
}

test_suite! {
    test_failures_lms_24,
}
