// Licensed under the Apache-2.0 license

#![no_std]
#![no_main]

use caliptra_cfi_lib::CfiCounter;
use caliptra_drivers::{
    cprintln, Aes, AesKey, AesOperation, Array4x12, Ecc384, Ecc384PrivKeyOut, Ecc384Scalar,
    Ecc384Seed, Hmac, HmacMode, KeyId, KeyReadArgs, KeyUsage, KeyWriteArgs, LEArray4x8, Trng, Uart,
};
use caliptra_registers::aes::AesReg;
use caliptra_registers::aes_clp::AesClpReg;
use caliptra_registers::csrng::CsrngReg;
use caliptra_registers::ecc::EccReg;
use caliptra_registers::entropy_src::EntropySrcReg;
use caliptra_registers::hmac::HmacReg;
use caliptra_registers::soc_ifc::SocIfcReg;
use caliptra_registers::soc_ifc_trng::SocIfcTrngReg;
use caliptra_test_harness::test_suite;
use zerocopy::transmute;

// From NIST example vector
const KEY_EMPTY: [u8; 32] = [
    0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
    0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4,
];

const EXPECTED_MAC_EMPTY: [u8; 16] = [
    0x02, 0x89, 0x62, 0xf6, 0x1b, 0x7b, 0xf8, 0x9e, 0xfc, 0x6b, 0x55, 0x1f, 0x46, 0x67, 0xd9, 0x83,
];

// From ACVP test vector
const KEY_4256: [u8; 32] = [
    0xbb, 0x2e, 0xd8, 0x64, 0xae, 0xa7, 0xd3, 0xea, 0x26, 0x9a, 0x19, 0xda, 0x45, 0x93, 0x32, 0xff,
    0x19, 0x2e, 0x79, 0x88, 0x99, 0x32, 0xb5, 0x3e, 0xe1, 0x87, 0xa1, 0x41, 0xa3, 0xd9, 0x38, 0xd8,
];

const M_4256: [u8; 532] = [
    0x22, 0x03, 0x0e, 0x8c, 0xf9, 0xdb, 0xdb, 0x8d, 0xe4, 0x2a, 0xa1, 0xb9, 0x87, 0xf5, 0x73, 0x4f,
    0xb5, 0x33, 0x1e, 0x22, 0x44, 0xb5, 0x77, 0xec, 0xd0, 0x8e, 0xaf, 0x1b, 0x57, 0x37, 0x26, 0x4c,
    0x9c, 0x2c, 0xff, 0x11, 0x71, 0xbb, 0xae, 0xa1, 0xfb, 0x30, 0x62, 0x91, 0x01, 0xd5, 0x52, 0x28,
    0x7e, 0x12, 0xfe, 0xcc, 0xa1, 0x76, 0x4f, 0x22, 0x15, 0x7f, 0x48, 0xa7, 0x7d, 0xd6, 0xbe, 0x46,
    0xbb, 0xa3, 0x8f, 0xda, 0x1e, 0xf1, 0x61, 0xb3, 0x00, 0xc0, 0x99, 0x94, 0xd8, 0x8d, 0x6b, 0x19,
    0x36, 0x2d, 0xf2, 0x15, 0x7d, 0xe1, 0xef, 0x2b, 0x06, 0x1d, 0x03, 0xd3, 0x6f, 0xae, 0x62, 0x94,
    0xc5, 0x3a, 0x1e, 0x6d, 0xee, 0x89, 0x55, 0x70, 0x28, 0x7c, 0xae, 0x91, 0xa2, 0x56, 0x40, 0x19,
    0x52, 0xb8, 0x56, 0xdf, 0x6b, 0x83, 0x80, 0xda, 0x10, 0x7d, 0x63, 0x73, 0x62, 0x89, 0x30, 0xae,
    0x51, 0x3b, 0xeb, 0x18, 0xa6, 0xbe, 0xd1, 0x8d, 0x0c, 0x5d, 0x99, 0xfe, 0xbc, 0xff, 0xa9, 0x6a,
    0x91, 0x65, 0x5c, 0xa0, 0x5d, 0xb3, 0xd0, 0xb0, 0x52, 0xc5, 0x2b, 0xbf, 0x16, 0x62, 0xce, 0xc1,
    0x7b, 0x6a, 0x90, 0x4b, 0xc1, 0xd1, 0x7e, 0xaf, 0x58, 0xb3, 0x93, 0x3b, 0x34, 0xd3, 0x9f, 0x3b,
    0x3d, 0x7a, 0xd5, 0x30, 0x4b, 0xac, 0x19, 0xe1, 0x87, 0xac, 0xea, 0x25, 0x6d, 0x29, 0x40, 0x9f,
    0x99, 0xcd, 0xd1, 0x5c, 0x3b, 0xe6, 0xe5, 0x67, 0x95, 0xa8, 0x4c, 0x77, 0x95, 0x57, 0x5d, 0x3c,
    0xea, 0x99, 0xe9, 0x57, 0x01, 0x67, 0x8e, 0x4c, 0xc7, 0xcb, 0x32, 0xa6, 0x39, 0x14, 0x57, 0xa5,
    0x2a, 0x28, 0x93, 0x92, 0x0f, 0x8a, 0xd5, 0x26, 0xd2, 0xd7, 0x98, 0xd9, 0xf9, 0xe0, 0xad, 0xb9,
    0x53, 0x23, 0x39, 0xc5, 0xcf, 0x6b, 0xc8, 0x2d, 0x5f, 0xe1, 0xe6, 0x10, 0x0d, 0xb7, 0x3e, 0x2e,
    0x81, 0x45, 0x58, 0x43, 0x11, 0xb1, 0x5f, 0x24, 0x5e, 0xb8, 0xc3, 0xc9, 0x94, 0xee, 0x2d, 0xad,
    0xdc, 0x3f, 0x5e, 0x77, 0x42, 0xd9, 0xeb, 0x82, 0x6c, 0xa5, 0x43, 0x6f, 0xae, 0x33, 0xdf, 0x95,
    0xa1, 0x2d, 0xc8, 0x26, 0x8e, 0x8a, 0xf9, 0xb1, 0x9b, 0x7c, 0x9e, 0xba, 0xee, 0x34, 0xd2, 0xa3,
    0x50, 0x94, 0x44, 0xec, 0x4c, 0xdf, 0x5b, 0x4a, 0x6c, 0xe6, 0xce, 0x0b, 0x63, 0xfb, 0xa0, 0xfd,
    0x73, 0xb1, 0xfe, 0x67, 0x91, 0x7e, 0x42, 0x20, 0x2c, 0xaa, 0x57, 0x9d, 0x24, 0x57, 0x69, 0x3a,
    0xb0, 0xa6, 0x6a, 0x4e, 0x31, 0x52, 0x46, 0x9f, 0x94, 0x5a, 0xa5, 0xd0, 0xab, 0x26, 0x5c, 0xf3,
    0x1a, 0xc2, 0x12, 0x58, 0x6f, 0x82, 0x49, 0xba, 0xe3, 0x75, 0x3f, 0x93, 0x7f, 0xef, 0xa4, 0x12,
    0xb7, 0x79, 0x31, 0xbf, 0xee, 0xba, 0xc0, 0x85, 0x09, 0x6d, 0xe9, 0xdb, 0x39, 0x25, 0x96, 0x6c,
    0x3e, 0xd7, 0x8c, 0xc8, 0x69, 0x20, 0xb3, 0xe1, 0x66, 0x58, 0x09, 0xf1, 0xd8, 0x50, 0x0d, 0x7d,
    0x35, 0xde, 0xf6, 0x41, 0x92, 0x9a, 0xca, 0xa6, 0x8b, 0x7c, 0x79, 0x22, 0x63, 0xaf, 0x13, 0xed,
    0x66, 0x17, 0xe4, 0x8c, 0x6c, 0xda, 0xf0, 0xae, 0xba, 0xc3, 0x5a, 0xb9, 0x61, 0x4c, 0x01, 0x82,
    0x90, 0x4d, 0x8b, 0x4d, 0x13, 0xfc, 0x83, 0x22, 0x64, 0xf9, 0xa3, 0x5a, 0xcf, 0x6e, 0xa4, 0xc0,
    0x12, 0x6b, 0x3d, 0xd9, 0xd3, 0x9d, 0xca, 0xc1, 0x2b, 0x09, 0x3e, 0x15, 0xbd, 0x2f, 0xa0, 0x2f,
    0xd7, 0x48, 0x91, 0x08, 0x70, 0x25, 0x58, 0xa4, 0xf1, 0xb7, 0x2a, 0x37, 0x9c, 0x1c, 0xb8, 0xf8,
    0xd8, 0x17, 0xe8, 0x02, 0x7b, 0xd8, 0xca, 0x21, 0x55, 0xfc, 0x72, 0x6b, 0xa1, 0x75, 0xd9, 0x8f,
    0x31, 0x3f, 0x77, 0x87, 0x66, 0x7d, 0xd8, 0xfa, 0x6d, 0xb9, 0xb2, 0x9d, 0xbf, 0x1f, 0xbd, 0x9e,
    0x75, 0xdf, 0x8b, 0x96, 0xbe, 0xd1, 0x6f, 0x4e, 0xcf, 0xf7, 0x85, 0x49, 0x20, 0xc6, 0x5d, 0xa4,
    0x55, 0xea, 0x57, 0x59,
];
const EXPECTED_MAC_4256: [u8; 16] = [
    0x80, 0xea, 0x8c, 0x7c, 0xa9, 0xa5, 0xea, 0x0e, 0x86, 0x49, 0x84, 0x1b, 0xfe, 0x16, 0x67, 0x67,
];

fn test_cmac() {
    let mut aes = unsafe { Aes::new(AesReg::new(), AesClpReg::new()) };
    let mut trng = unsafe {
        Trng::new(
            CsrngReg::new(),
            EntropySrcReg::new(),
            SocIfcTrngReg::new(),
            &SocIfcReg::new(),
        )
        .unwrap()
    };
    // Init CFI
    let mut entropy_gen = || trng.generate4();
    CfiCounter::reset(&mut entropy_gen);

    let key = KEY_EMPTY.into();
    let mac = aes.cmac(AesKey::Array(&key), &[]).unwrap();
    assert_eq!(mac, EXPECTED_MAC_EMPTY.into(), "AES CMAC mismatch");

    let key = KEY_4256.into();
    let mac = aes.cmac(AesKey::Array(&key), &M_4256).unwrap();
    assert_eq!(mac, EXPECTED_MAC_4256.into(), "AES CMAC mismatch");
}

fn test_cmac_kv() {
    let mut ecc = unsafe { Ecc384::new(EccReg::new()) };
    let mut trng = unsafe {
        Trng::new(
            CsrngReg::new(),
            EntropySrcReg::new(),
            SocIfcTrngReg::new(),
            &SocIfcReg::new(),
        )
        .unwrap()
    };
    // Load a key into the key vault.
    let seed = [0u8; 48];
    let key_out_1 = KeyWriteArgs {
        id: KeyId::KeyId0,
        usage: KeyUsage::default()
            .set_ecc_key_gen_seed_en()
            .set_ecc_private_key_en()
            .set_aes_key_en(),
    };
    let result = ecc.key_pair(
        Ecc384Seed::from(&Ecc384Scalar::from(seed)),
        &Array4x12::default(),
        &mut trng,
        Ecc384PrivKeyOut::from(key_out_1),
    );
    assert!(result.is_ok());

    let mut aes = unsafe { Aes::new(AesReg::new(), AesClpReg::new()) };
    // this is the expected derived key from the above seed.
    let key: [u8; 48] = [
        0xfe, 0xee, 0xf5, 0x54, 0x4a, 0x76, 0x56, 0x49, 0x90, 0x12, 0x8a, 0xd1, 0x89, 0xe8, 0x73,
        0xf2, 0x1f, 0xd, 0xfd, 0x5a, 0xd7, 0xe2, 0xfa, 0x86, 0x11, 0x27, 0xee, 0x6e, 0x39, 0x4c,
        0xa7, 0x84, 0x87, 0x1c, 0x1a, 0xec, 0x3, 0x2c, 0x7a, 0x8b, 0x10, 0xb9, 0x3e, 0xe, 0xab,
        0x89, 0x46, 0xd6,
    ];
    let key: [u8; 32] = key[0..32].try_into().unwrap();
    let key = transmute!(key);

    let mac1 = aes.cmac(AesKey::Array(&key), &[]).unwrap();
    let mac2 = aes
        .cmac(AesKey::KV(KeyReadArgs::new(KeyId::KeyId0)), &[])
        .unwrap();

    assert_eq!(mac1, mac2, "AES CMAC mismatch");
}

fn test_aes_ecb_decrypt_kv() {
    // Init CFI
    let mut entropy_gen = || trng.generate4();
    CfiCounter::reset(&mut entropy_gen);

    let mut trng = unsafe {
        Trng::new(
            CsrngReg::new(),
            EntropySrcReg::new(),
            SocIfcTrngReg::new(),
            &SocIfcReg::new(),
        )
        .unwrap()
    };
    let mut aes = unsafe { Aes::new(AesReg::new(), AesClpReg::new()) };
    let mut hmac = unsafe { Hmac::new(HmacReg::new()) };
    let mut entropy_gen = || trng.generate4();
    CfiCounter::reset(&mut entropy_gen);

    hmac.hmac(
        caliptra_drivers::HmacKey::Array4x12(&Array4x12::default()),
        caliptra_drivers::HmacData::Slice(&[]),
        &mut trng,
        caliptra_drivers::HmacTag::Key(KeyWriteArgs::new(
            KeyId::KeyId16,
            KeyUsage::default().set_aes_key_en().set_hmac_key_en(),
        )),
        HmacMode::Hmac512,
    )
    .unwrap();

    Uart::new().write("Hmac worked");

    let key_read_args = KeyReadArgs::new(KeyId::KeyId16);
    let res = aes.aes_256_ecb_decrypt_kv(AesKey::KV(key_read_args), &[0; 64]);
    if res.is_ok() {
        Uart::new().write("Passed");
    } else {
        Uart::new().write("Failed");
    }
}

test_suite! {
    // test_cmac,
    // test_cmac_kv,
    test_aes_ecb_decrypt_kv,
}
