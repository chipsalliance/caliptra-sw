#![no_std]
#![no_main]

use caliptra_drivers::{Aes128, Aes192, Aes256, AesMode, AesOp, AesReg, AesSteal};
use caliptra_test_harness::test_suite;

const SEED: [u8; 32] = [
    0x11, 0x11, 0x00, 0x00, 0x22, 0x22, 0x00, 0x00, 0x33, 0x33, 0x00, 0x00, 0x44, 0x44, 0x00, 0x00,
    0x55, 0x55, 0x00, 0x00, 0x66, 0x66, 0x00, 0x00, 0x77, 0x77, 0x00, 0x00, 0x88, 0x88, 0x00, 0x00,
];

fn test_aes128() {
    let regs = unsafe { AesReg::steal() };
    let mut output = [0; 32];

    let key = [
        0x77, 0x23, 0xd8, 0x7d, 0x77, 0x3a, 0x8b, 0xbf, 0xe1, 0xae, 0x5b, 0x08, 0x12, 0x35, 0xb5,
        0x66,
    ];
    let pt = [
        0x1b, 0x0a, 0x69, 0xb7, 0xbc, 0x53, 0x4c, 0x16, 0xce, 0xcf, 0xfa, 0xe0, 0x2c, 0xc5, 0x32,
        0x31, 0x90, 0xce, 0xb4, 0x13, 0xf1, 0xdb, 0x3e, 0x9f, 0x0f, 0x79, 0xba, 0x65, 0x4c, 0x54,
        0xb6, 0x0e,
    ];
    let ct = [
        0xad, 0x5b, 0x08, 0x95, 0x15, 0xe7, 0x82, 0x10, 0x87, 0xc6, 0x16, 0x52, 0xdc, 0x47, 0x7a,
        0xb1, 0xf2, 0xcc, 0x63, 0x31, 0xa7, 0x0d, 0xfc, 0x59, 0xc9, 0xff, 0xb0, 0xc7, 0x23, 0xc6,
        0x82, 0xf6,
    ];

    let mut aes = Aes128::new(regs, AesOp::Enc, AesMode::ECB, Some(&key), None, SEED).unwrap();
    aes.run_core_b2b(&pt, &mut output, None).unwrap();
    assert_eq!(output, ct);
}

fn test_aes192() {
    let regs = unsafe { AesReg::steal() };
    let mut output = [0; 32];

    let key = [
        0xc9, 0xc8, 0x6a, 0x51, 0x22, 0x4e, 0x5f, 0x19, 0x16, 0xd3, 0xf3, 0x3a, 0x60, 0x2f, 0x69,
        0x7a, 0xfc, 0x85, 0x2a, 0x2c, 0x44, 0xd3, 0x0d, 0x5f,
    ];
    let pt = [
        0x64, 0x14, 0x5e, 0x61, 0xe6, 0x1c, 0xd9, 0x6f, 0x79, 0x6b, 0x18, 0x74, 0x64, 0xfa, 0xbb,
        0xde, 0x6f, 0x42, 0xe6, 0x93, 0xf5, 0x01, 0xf1, 0xd7, 0x3b, 0x3c, 0x60, 0x6f, 0x00, 0x80,
        0x15, 0x06,
    ];
    let ct = [
        0x50, 0x2a, 0x73, 0xe4, 0x05, 0x1c, 0xfa, 0xc8, 0xfe, 0x63, 0x43, 0x21, 0x1a, 0x12, 0x9f,
        0x5a, 0x5f, 0x56, 0x71, 0x0c, 0x41, 0xb3, 0x2c, 0x84, 0xda, 0x97, 0x8d, 0xda, 0x2c, 0xec,
        0x34, 0xad,
    ];

    let mut aes = Aes192::new(regs, AesOp::Enc, AesMode::ECB, Some(&key), None, SEED).unwrap();
    aes.run_core_b2b(&pt, &mut output, None).unwrap();
    assert_eq!(output, ct);
}

fn test_aes256() {
    let regs = unsafe { AesReg::steal() };
    let mut output = [0; 32];

    let key = [
        0x7a, 0x52, 0xe4, 0xd3, 0x42, 0xaa, 0x07, 0x25, 0x5a, 0x7e, 0x7c, 0x34, 0x26, 0x6c, 0xf7,
        0x30, 0x2a, 0xbe, 0x2d, 0x4d, 0xd7, 0xec, 0x44, 0x68, 0xa4, 0x61, 0x87, 0xee, 0x61, 0x82,
        0x5f, 0xfa,
    ];
    let pt = [
        0x7e, 0x77, 0x1c, 0x6e, 0xe4, 0xb2, 0x6d, 0xb8, 0x90, 0x50, 0xe9, 0x82, 0xba, 0x7e, 0x98,
        0x03, 0xc8, 0xda, 0x34, 0x60, 0x64, 0x34, 0xdd, 0x85, 0xd2, 0x91, 0x0e, 0x53, 0x80, 0x76,
        0xd0, 0x01,
    ];
    let ct = [
        0xa9, 0x1d, 0x8b, 0x2d, 0xdf, 0x37, 0x52, 0x0b, 0xc4, 0x69, 0x47, 0x0a, 0xd0, 0xdd, 0x63,
        0x94, 0x92, 0x31, 0x43, 0xce, 0x55, 0x38, 0x6b, 0xeb, 0x1f, 0x9c, 0x4b, 0xd5, 0x15, 0x84,
        0x65, 0x8e,
    ];

    let mut aes = Aes256::new(regs, AesOp::Enc, AesMode::ECB, Some(&key), None, SEED).unwrap();
    aes.run_core_b2b(&pt, &mut output, None).unwrap();
    assert_eq!(output, ct);
}

fn test_aux_key() {
    let regs = unsafe { AesReg::steal() };
    let mut output = [0; 16];

    let pt = [
        0x2f, 0x3b, 0x9d, 0xcf, 0xba, 0xe7, 0x29, 0x58, 0x3b, 0x1d, 0x1f, 0xfd, 0xd1, 0x6b, 0xb6,
        0xfe,
    ];
    let ct = [
        0xed, 0x29, 0x74, 0xe9, 0xb9, 0xc7, 0xaf, 0x4d, 0x0a, 0x20, 0xad, 0xdc, 0xdc, 0x8c, 0x43,
        0x72,
    ];

    let mut aes = Aes128::new(regs, AesOp::Enc, AesMode::ECB, None, None, SEED).unwrap();
    aes.run_core_b2b(&pt, &mut output, None).unwrap();
    assert_eq!(output, ct);
}

test_suite! {
    test_aes128,
    test_aes192,
    test_aes256,
    test_aux_key,
}
