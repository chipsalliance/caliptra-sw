/*++

Licensed under the Apache-2.0 license.

File Name:

    ldev_id.rs

Abstract:

    File contains the implementation of DICE Local Device Identity (IDEVID)
    layer.

--*/

use super::crypto::*;
use super::dice::*;
use super::x509::*;
use crate::cprint_slice;
use crate::cprintln;
use crate::rom_env::RomEnv;
use crate::rom_err_def;
use caliptra_drivers::*;
use caliptra_x509::*;

rom_err_def! {
    LocalDevId,
    LocalevIdErr
    {
        CertVerify = 0x1,
    }
}

/// Dice Local Device Identity (IDEVID) Layer
#[derive(Default)]
pub struct LocalDevIdLayer {}

impl DiceLayer for LocalDevIdLayer {
    /// Perform derivations for the DICE layer
    ///
    /// # Arguments
    ///
    /// * `env`   - ROM Environment
    /// * `input` - Dice input
    ///
    /// # Returns
    ///
    /// * `DiceOutput` - key pair, subject identifier serial number, subject key identifier
    fn derive(env: &RomEnv, input: &DiceInput) -> CaliptraResult<DiceOutput> {
        cprintln!("[ldev] ++");
        cprintln!("[ldev] CDI.KEYID = {}", input.cdi as u8);
        cprintln!("[ldev] SUBJECT.KEYID = {}", input.subj_priv_key as u8);
        cprintln!(
            "[ldev] AUTHORITY.KEYID = {}",
            input.auth_key_pair.priv_key as u8
        );
        cprintln!("[ldev] FE.KEYID = {}", input.fe_key as u8);

        // The UDS for this layer is  generated by previous layer
        // (Initial Device ID DICE Layer).
        //
        // This is the decrypted Field Entropy
        let uds = input.fe_key;

        // Derive the DICE CDI from decrypted UDS
        let cdi = Self::derive_cdi(env, uds, input.cdi)?;

        // Derive DICE Key Pair from CDI
        let key_pair = Self::derive_key_pair(env, cdi, input.subj_priv_key)?;

        // Generate the Subject Serial Number and Subject Key Identifier.
        //
        // This information will be used by the next DICE Layer while generating
        // certificates
        let subj_sn = X509::subj_sn(env, &key_pair.pub_key)?;
        let subj_key_id = X509::subj_key_id(env, &key_pair.pub_key)?;

        // Generate the output for next layer
        let output = input.to_output(key_pair, subj_sn, subj_key_id);

        // Generate Local Device ID Certificate
        Self::generate_cert_sig(env, input, &output)?;

        cprintln!("[ldev] --");

        Ok(output)
    }
}

impl LocalDevIdLayer {
    /// Derive Composite Device Identity (CDI) from Unique Device Secret (UDS)
    ///
    /// # Arguments
    ///
    /// * `env` - ROM Environment
    /// * `uds` - Key slot holding the UDS
    /// * `cdi` - Key Slot to store the generated CDI
    ///
    /// # Returns
    ///
    /// * `KeyId` - KeySlot containing the DICE CDI
    fn derive_cdi(env: &RomEnv, uds: KeyId, cdi: KeyId) -> CaliptraResult<KeyId> {
        // CDI Key
        let key = Hmac384Key::Key(KeyReadArgs::new(cdi));
        let data = Hmac384Data::Key(KeyReadArgs::new(uds));
        let cdi = Crypto::hmac384_mac(env, key, data, cdi)?;

        cprintln!("[ldev] Erasing FE.KEYID = {}", uds as u8);
        env.key_vault().map(|k| k.erase_key(uds))?;
        Ok(cdi)
    }

    /// Derive Dice Layer Key Pair
    ///
    /// # Arguments
    ///
    /// * `env`      - ROM Environment
    /// * `cdi`      - Composite Device Identity
    /// * `priv_key` - Key slot to store the private key into
    ///
    /// # Returns
    ///
    /// * `Ecc384KeyPair` - Derive DICE Layer Key Pair
    fn derive_key_pair(env: &RomEnv, cdi: KeyId, priv_key: KeyId) -> CaliptraResult<Ecc384KeyPair> {
        Crypto::ecc384_key_gen(env, cdi, priv_key)
    }

    /// Generate Local Device ID Certificate Signature
    ///
    /// # Arguments
    ///
    /// * `env`    - ROM Environment
    /// * `input`  - DICE Input
    /// * `output` - DICE Output
    fn generate_cert_sig(
        env: &RomEnv,
        input: &DiceInput,
        output: &DiceOutput,
    ) -> CaliptraResult<()> {
        let auth_priv_key = input.auth_key_pair.priv_key;
        let auth_pub_key = &input.auth_key_pair.pub_key;
        let pub_key = &output.subj_key_pair.pub_key;

        // CSR `To Be Signed` Parameters
        let params = LocalDevIdCertTbsParams {
            ueid: &X509::ueid(env)?,
            subject_sn: &output.subj_sn,
            subject_key_id: &output.subj_key_id,
            issuer_sn: &input.auth_sn,
            authority_key_id: &input.auth_key_id,
            serial_number: &X509::cert_sn(env, pub_key)?,
            public_key: &pub_key.to_der(),
        };

        // Generate the `To Be Signed` portion of the CSR
        let tbs = LocalDevIdCertTbs::new(&params);

        // Sign the the `To Be Signed` portion
        cprintln!(
            "[ldev] Signing Cert with AUTHORITY.KEYID = {}",
            auth_priv_key as u8
        );
        let sig = Crypto::ecdsa384_sign(env, auth_priv_key, tbs.tbs())?;

        // Clear the authority private key
        cprintln!("[ldev] Erasing AUTHORITY.KEYID = {}", auth_priv_key as u8);
        env.key_vault().map(|k| k.erase_key(auth_priv_key))?;

        // Verify the signature of the `To Be Signed` portion
        if !Crypto::ecdsa384_verify(env, auth_pub_key, tbs.tbs(), &sig)? {
            raise_err!(CertVerify);
        }

        let _pub_x: [u8; 48] = pub_key.x.into();
        let _pub_y: [u8; 48] = pub_key.y.into();
        cprint_slice!("[ldev] PUB.X", _pub_x);
        cprint_slice!("[ldev] PUB.Y", _pub_y);

        let _sig_r: [u8; 48] = sig.r.into();
        let _sig_s: [u8; 48] = sig.s.into();
        cprint_slice!("[ldev] SIG.R", _sig_r);
        cprint_slice!("[ldev] SIG.S", _sig_s);

        // Lock the Local Device ID cert signature in data vault until
        // cold reset
        env.data_vault().map(|d| d.set_ldev_dice_signature(&sig));

        // Lock the Local Device ID public keys in data vault until
        // cold reset
        env.data_vault().map(|d| d.set_ldev_dice_pub_key(pub_key));

        Ok(())
    }
}
