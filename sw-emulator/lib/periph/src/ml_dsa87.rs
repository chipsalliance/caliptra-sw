/*++

Licensed under the Apache-2.0 license.

File Name:

ml_dsa87.rs

Abstract:

File contains Ml_Dsa87 peripheral implementation.

--*/

use crate::helpers::{bytes_from_words_be, words_from_bytes_be, words_from_bytes_le};
use crate::{KeyUsage, KeyVault};
use caliptra_emu_bus::{ActionHandle, BusError, Clock, ReadOnlyRegister, ReadWriteRegister, Timer};
use caliptra_emu_derive::Bus;
use caliptra_emu_types::{RvData, RvSize};
// use caliptra_image_types::ImageMldsaPubKey;
use fips204::ml_dsa_87::{try_keygen_with_rng, PrivateKey, PublicKey, PK_LEN, SIG_LEN, SK_LEN};
use fips204::traits::{SerDes, Signer, Verifier};
use rand::{CryptoRng, Rng, RngCore};
use tock_registers::interfaces::{ReadWriteable, Readable, Writeable};
use tock_registers::register_bitfields;

// RNG that only allows a single call, which returns the fixed seed.
pub(crate) struct SeedOnlyRng {
    seed: [u8; 32],
    called: bool,
}

impl SeedOnlyRng {
    pub(crate) fn new(seed: [u8; 32]) -> Self {
        Self {
            seed,
            called: false,
        }
    }
}

impl RngCore for SeedOnlyRng {
    fn next_u32(&mut self) -> u32 {
        unimplemented!()
    }

    fn next_u64(&mut self) -> u64 {
        unimplemented!()
    }

    fn fill_bytes(&mut self, out: &mut [u8]) {
        if self.called {
            panic!("Can only call fill_bytes once");
        }
        assert_eq!(out.len(), 32);
        out.copy_from_slice(&self.seed[..32]);
        self.called = true;
    }

    fn try_fill_bytes(&mut self, out: &mut [u8]) -> Result<(), rand::Error> {
        self.fill_bytes(out);
        Ok(())
    }
}

impl CryptoRng for SeedOnlyRng {}

/// ML_DSA87 Initialization Vector size
const ML_DSA87_IV_SIZE: usize = 64;

/// ML_DSA87 Key Generation seed
const ML_DSA87_SEED_SIZE: usize = 32;

/// ML_DSA87 SIGN_RND size
const ML_DSA87_SIGN_RND_SIZE: usize = 32;

/// ML_DSA87 MSG size
const ML_DSA87_MSG_SIZE: usize = 64;

/// ML_DSA87 VERIFICATION size
const ML_DSA87_VERIFICATION_SIZE: usize = 64;

/// ML_DSA87 PUBKEY size
const ML_DSA87_PUBKEY_SIZE: usize = PK_LEN;

/// ML_DSA87 SIGNATURE size
// Signature len is unaligned
const ML_DSA87_SIGNATURE_SIZE: usize = SIG_LEN + 1;

/// ML_DSA87 PRIVKEY size
const ML_DSA87_PRIVKEY_SIZE: usize = SK_LEN;

/// The number of CPU clock cycles it takes to perform Ml_Dsa87 operation
const ML_DSA87_OP_TICKS: u64 = 1000;

/// The number of CPU clock cycles to read keys from key vault
const KEY_RW_TICKS: u64 = 100;

register_bitfields! [
    u32,

    /// Control Register Fields
    Control [
        CTRL OFFSET(0) NUMBITS(3) [
            NONE = 0b000,
            KEYGEN = 0b001,
            SIGNING = 0b010,
            VERIFYING = 0b011,
            KEYGEN_AND_SIGN = 0b100,
        ],
        ZEROIZE OFFSET(3) NUMBITS(1) [],
    ],

    /// Status Register Fields
    Status [
        READY OFFSET(0) NUMBITS(1) [],
        VALID OFFSET(1) NUMBITS(1) [],
    ],

    /// Key Vault Read Control Fields
    KvRdSeedCtrl [
        READ_EN OFFSET(0) NUMBITS(1) [],
        READ_ENTRY OFFSET(1) NUMBITS(5) [],
    ],

    /// Key Vault Read Status Fields
    KvRdSeedStatus [
        READY OFFSET(0) NUMBITS(1) [],
        VALID OFFSET(1) NUMBITS(1) [],
        ERROR OFFSET(2) NUMBITS(8) [
            SUCCESS = 0,
            KV_READ_FAIL = 1,
            KV_WRITE_FAIL = 2,
        ],
    ],
];

#[derive(Bus)]
#[poll_fn(poll)]
#[warm_reset_fn(warm_reset)]
#[update_reset_fn(update_reset)]
pub struct Mldsa87 {
    /// Name registers
    #[register_array(offset = 0x0000_0000)]
    name: [u32; 2],

    /// Version registers
    #[register_array(offset = 0x0000_0008)]
    version: [u32; 2],

    /// Control register
    #[register(offset = 0x0000_0010, write_fn = on_write_control)]
    control: ReadWriteRegister<u32, Control::Register>,

    /// Status register
    #[register(offset = 0x0000_0014)]
    status: ReadOnlyRegister<u32, Status::Register>,

    /// Initialization vector for blinding and counter measures
    #[register_array(offset = 0x0000_0018)]
    entropy: [u32; ML_DSA87_IV_SIZE / 4],

    /// Seed size
    #[register_array(offset = 0x0000_0058)]
    seed: [u32; ML_DSA87_SEED_SIZE / 4],

    /// Sign RND
    #[register_array(offset = 0x0000_0078)]
    sign_rnd: [u32; ML_DSA87_SIGN_RND_SIZE / 4],

    /// Message
    #[register_array(offset = 0x0000_0098)]
    msg: [u32; ML_DSA87_MSG_SIZE / 4],

    /// Verification result
    #[register_array(offset = 0x0000_00d8, write_fn = write_access_fault)]
    verify_res: [u32; ML_DSA87_VERIFICATION_SIZE / 4],

    /// Public key
    #[register_array(offset = 0x0000_1000)]
    pubkey: [u32; ML_DSA87_PUBKEY_SIZE / 4],

    /// Signature
    #[register_array(offset = 0x0000_2000)]
    signature: [u32; ML_DSA87_SIGNATURE_SIZE / 4],

    // Private Key In & Out (We don't want to use this)
    /// Key Vault Read Control
    #[register(offset = 0x0000_8000, write_fn = on_write_kv_rd_seed_ctrl)]
    kv_rd_seed_ctrl: ReadWriteRegister<u32, KvRdSeedCtrl::Register>,

    /// Key Vault Read Status
    #[register(offset = 0x0000_8004)]
    kv_rd_seed_status: ReadOnlyRegister<u32, KvRdSeedStatus::Register>,

    /// Error Global Intr register
    #[register(offset = 0x0000_810c)]
    error_global_intr: ReadOnlyRegister<u32>,

    /// Error Internal Intr register
    #[register(offset = 0x0000_8114)]
    error_internal_intr: ReadOnlyRegister<u32>,

    private_key: [u8; ML_DSA87_PRIVKEY_SIZE],

    /// Timer
    timer: Timer,

    /// Key Vault
    key_vault: KeyVault,

    /// Operation complete callback
    op_complete_action: Option<ActionHandle>,

    /// Seed read complete action
    op_seed_read_complete_action: Option<ActionHandle>,
}

impl Mldsa87 {
    /// NAME0 Register Value TODO update when known
    const NAME0_VAL: RvData = 0x73656370; //0x63737065; // secp

    /// NAME1 Register Value TODO update when known
    const NAME1_VAL: RvData = 0x2D333834; // -384

    /// VERSION0 Register Value TODO update when known
    const VERSION0_VAL: RvData = 0x30302E31; // 1.0

    /// VERSION1 Register Value TODO update when known
    const VERSION1_VAL: RvData = 0x00000000;

    pub fn new(clock: &Clock, key_vault: KeyVault) -> Self {
        Self {
            name: [Self::NAME0_VAL, Self::NAME1_VAL],
            version: [Self::VERSION0_VAL, Self::VERSION1_VAL],
            control: ReadWriteRegister::new(0),
            status: ReadOnlyRegister::new(Status::READY::SET.value),
            entropy: Default::default(),
            seed: Default::default(),
            sign_rnd: Default::default(),
            msg: Default::default(),
            verify_res: Default::default(),
            pubkey: [0; ML_DSA87_PUBKEY_SIZE / 4],
            signature: [0; ML_DSA87_SIGNATURE_SIZE / 4],
            kv_rd_seed_ctrl: ReadWriteRegister::new(0),
            kv_rd_seed_status: ReadOnlyRegister::new(0),
            error_global_intr: ReadOnlyRegister::new(0),
            error_internal_intr: ReadOnlyRegister::new(0),
            private_key: [0; ML_DSA87_PRIVKEY_SIZE],
            timer: Timer::new(clock),
            key_vault,
            op_complete_action: None,
            op_seed_read_complete_action: None,
        }
    }

    fn write_access_fault(
        &self,
        _size: RvSize,
        _index: usize,
        _val: RvData,
    ) -> Result<(), BusError> {
        Err(BusError::StoreAccessFault)
    }

    fn zeroize(&mut self) {
        self.control.reg.set(0);
        self.seed = Default::default();
        self.sign_rnd = Default::default();
        self.msg = Default::default();
        self.verify_res = Default::default();
        self.pubkey = [0; ML_DSA87_PUBKEY_SIZE / 4];
        self.signature = [0; ML_DSA87_SIGNATURE_SIZE / 4];
        self.kv_rd_seed_ctrl.reg.set(0);
        self.kv_rd_seed_status.reg.write(KvRdSeedStatus::READY::SET);
        self.private_key = [0; ML_DSA87_PRIVKEY_SIZE];
        // Stop actions
        self.op_complete_action = None;
        self.op_seed_read_complete_action = None;
    }

    /// On Write callback for `control` register
    ///
    /// # Arguments
    ///
    /// * `size` - Size of the write
    /// * `val` - Data to write
    ///
    /// # Error
    ///
    /// * `BusError` - Exception with cause `BusError::StoreAccessFault` or `BusError::StoreAddrMisaligned`
    pub fn on_write_control(&mut self, size: RvSize, val: RvData) -> Result<(), BusError> {
        // Writes have to be Word aligned
        if size != RvSize::Word {
            Err(BusError::StoreAccessFault)?
        }

        // Set the control register
        self.control.reg.set(val);

        match self.control.reg.read_as_enum(Control::CTRL) {
            Some(Control::CTRL::Value::KEYGEN)
            | Some(Control::CTRL::Value::SIGNING)
            | Some(Control::CTRL::Value::VERIFYING)
            | Some(Control::CTRL::Value::KEYGEN_AND_SIGN) => {
                // Reset the Ready and Valid status bits
                self.status
                    .reg
                    .modify(Status::READY::CLEAR + Status::VALID::CLEAR);

                self.op_complete_action = Some(self.timer.schedule_poll_in(ML_DSA87_OP_TICKS));
            }
            _ => {}
        }

        if self.control.reg.is_set(Control::ZEROIZE) {
            self.zeroize();
        }

        Ok(())
    }

    /// On Write callback for `kv_rd_seed_ctrl` register
    ///
    /// # Arguments
    ///
    /// * `size` - Size of the write
    /// * `val` - Data to write
    ///
    /// # Error
    ///
    /// * `BusError` - Exception with cause `BusError::StoreAccessFault` or `BusError::StoreAddrMisaligned`
    pub fn on_write_kv_rd_seed_ctrl(&mut self, size: RvSize, val: RvData) -> Result<(), BusError> {
        // Writes have to be Word aligned
        if size != RvSize::Word {
            Err(BusError::StoreAccessFault)?
        }

        self.kv_rd_seed_ctrl.reg.set(val);

        if self.kv_rd_seed_ctrl.reg.is_set(KvRdSeedCtrl::READ_EN) {
            self.kv_rd_seed_status.reg.modify(
                KvRdSeedStatus::READY::CLEAR
                    + KvRdSeedStatus::VALID::CLEAR
                    + KvRdSeedStatus::ERROR::CLEAR,
            );

            self.op_seed_read_complete_action = Some(self.timer.schedule_poll_in(KEY_RW_TICKS));
        }

        Ok(())
    }

    fn gen_key(&mut self) {
        let seed = bytes_from_words_be(&self.seed);
        let mut rng = SeedOnlyRng::new(seed);
        let (pk, sk) = try_keygen_with_rng(&mut rng).unwrap();

        self.pubkey = words_from_bytes_be(&pk.into_bytes());
        self.private_key = sk.into_bytes();
    }

    fn sign(&mut self) {
        let secret_key = PrivateKey::try_from_bytes(self.private_key).unwrap();
        let message = &bytes_from_words_be(&self.msg);

        // The Ml_Dsa87 signature is 4595 len but the reg is one byte longer
        let signature = secret_key
            .try_sign_with_seed(&[0u8; 32], message, &[])
            .unwrap();
        let signature_extended = {
            let mut sig = [0; SIG_LEN + 1];
            sig[..SIG_LEN].copy_from_slice(&signature);
            sig
        };
        self.signature = words_from_bytes_be(&signature_extended);
    }

    fn verify(&mut self) {
        let message = &bytes_from_words_be(&self.msg);

        let public_key = {
            let key_bytes = bytes_from_words_be(&self.pubkey);
            PublicKey::try_from_bytes(key_bytes).unwrap()
        };

        let signature = &bytes_from_words_be(&self.signature);

        let success = public_key.verify(message, &signature[..SIG_LEN].try_into().unwrap(), &[]);

        if success {
            self.verify_res
                .copy_from_slice(&self.signature[..ML_DSA87_VERIFICATION_SIZE / 4]);
        } else {
            self.verify_res = rand::thread_rng().gen::<[u32; 16]>();
        }
    }

    fn op_complete(&mut self) {
        match self.control.reg.read_as_enum(Control::CTRL) {
            Some(Control::CTRL::Value::KEYGEN) => self.gen_key(),
            Some(Control::CTRL::Value::SIGNING) => {
                self.sign();
                todo!()
            } // NOT used?
            Some(Control::CTRL::Value::VERIFYING) => self.verify(),
            Some(Control::CTRL::Value::KEYGEN_AND_SIGN) => {
                self.gen_key();
                self.sign()
            }
            _ => panic!("Invalid value in ML-DSA Control"),
        }

        self.status
            .reg
            .modify(Status::READY::SET + Status::VALID::SET);
    }

    fn seed_read_complete(&mut self) {
        let key_id = self.kv_rd_seed_ctrl.reg.read(KvRdSeedCtrl::READ_ENTRY);

        let mut key_usage = KeyUsage::default();
        key_usage.set_mldsa_seed(true);

        let result = self.key_vault.read_key(key_id, key_usage);
        let (seed_read_result, seed) = match result.err() {
            Some(BusError::LoadAccessFault)
            | Some(BusError::LoadAddrMisaligned)
            | Some(BusError::InstrAccessFault) => (KvRdSeedStatus::ERROR::KV_READ_FAIL.value, None),
            Some(BusError::StoreAccessFault) | Some(BusError::StoreAddrMisaligned) => {
                (KvRdSeedStatus::ERROR::KV_WRITE_FAIL.value, None)
            }
            None => (KvRdSeedStatus::ERROR::SUCCESS.value, Some(result.unwrap())),
        };

        // Read the first 32 bytes from KV?
        // Key vault already stores seed in hardware format
        if let Some(seed) = seed {
            self.seed = words_from_bytes_le(
                &<[u8; ML_DSA87_SEED_SIZE]>::try_from(&seed[..ML_DSA87_SEED_SIZE]).unwrap(),
            );
        }

        self.kv_rd_seed_status.reg.modify(
            KvRdSeedStatus::READY::SET
                + KvRdSeedStatus::VALID::SET
                + KvRdSeedStatus::ERROR.val(seed_read_result),
        );
    }

    /// Called by Bus::poll() to indicate that time has passed
    fn poll(&mut self) {
        if self.timer.fired(&mut self.op_complete_action) {
            self.op_complete();
        }
        if self.timer.fired(&mut self.op_seed_read_complete_action) {
            self.seed_read_complete();
        }
    }

    /// Called by Bus::warm_reset() to indicate a warm reset
    fn warm_reset(&mut self) {
        // TODO: Reset registers
    }

    /// Called by Bus::update_reset() to indicate an update reset
    fn update_reset(&mut self) {
        // TODO: Reset registers
    }
}

#[cfg(test)]
mod tests {
    use caliptra_emu_bus::Bus;
    use caliptra_emu_crypto::EndianessTransform;
    use caliptra_emu_types::RvAddr;
    use rand::Rng;
    use tock_registers::registers::InMemoryRegister;

    use super::*;

    const OFFSET_NAME0: RvAddr = 0x0;
    const OFFSET_NAME1: RvAddr = 0x4;
    const OFFSET_VERSION0: RvAddr = 0x8;
    const OFFSET_VERSION1: RvAddr = 0xC;
    const OFFSET_CONTROL: RvAddr = 0x10;
    const OFFSET_STATUS: RvAddr = 0x14;
    const OFFSET_SEED: RvAddr = 0x58;
    const OFFSET_SIGN_RND: RvAddr = 0x78;
    const OFFSET_MSG: RvAddr = 0x98;
    const OFFSET_PK: RvAddr = 0x1000;
    const OFFSET_SIGNATURE: RvAddr = 0x2000;
    const OFFSET_KV_RD_SEED_CONTROL: RvAddr = 0x8000;
    const OFFSET_KV_RD_SEED_STATUS: RvAddr = 0x8004;

    fn make_word(idx: usize, arr: &[u8]) -> RvData {
        let mut res: RvData = 0;
        for i in 0..4 {
            res |= (arr[idx + i] as RvData) << (i * 8);
        }
        res
    }

    #[test]
    fn test_name() {
        let clock = Clock::new();
        let key_vault = KeyVault::new();

        let mut ml_dsa87 = Mldsa87::new(&clock, key_vault);

        let name0 = ml_dsa87.read(RvSize::Word, OFFSET_NAME0).unwrap();
        let name0 = String::from_utf8_lossy(&name0.to_be_bytes()).to_string();
        assert_eq!(name0, "secp");

        let name1 = ml_dsa87.read(RvSize::Word, OFFSET_NAME1).unwrap();
        let name1 = String::from_utf8_lossy(&name1.to_be_bytes()).to_string();
        assert_eq!(name1, "-384");
    }

    #[test]
    fn test_version() {
        let clock = Clock::new();
        let key_vault = KeyVault::new();

        let mut ml_dsa87 = Mldsa87::new(&clock, key_vault);

        let version0 = ml_dsa87.read(RvSize::Word, OFFSET_VERSION0).unwrap();
        let version0 = String::from_utf8_lossy(&version0.to_le_bytes()).to_string();
        assert_eq!(version0, "1.00");

        let version1 = ml_dsa87.read(RvSize::Word, OFFSET_VERSION1).unwrap();
        let version1 = String::from_utf8_lossy(&version1.to_le_bytes()).to_string();
        assert_eq!(version1, "\0\0\0\0");
    }

    #[test]
    fn test_control() {
        let clock = Clock::new();
        let key_vault = KeyVault::new();

        let mut ml_dsa87 = Mldsa87::new(&clock, key_vault);
        assert_eq!(ml_dsa87.read(RvSize::Word, OFFSET_CONTROL).unwrap(), 0);
    }

    #[test]
    fn test_status() {
        let clock = Clock::new();
        let key_vault = KeyVault::new();

        let mut ml_dsa87 = Mldsa87::new(&clock, key_vault);
        assert_eq!(ml_dsa87.read(RvSize::Word, OFFSET_STATUS).unwrap(), 1);
    }

    #[test]
    fn test_gen_key() {
        let clock = Clock::new();
        let key_vault = KeyVault::new();

        let mut ml_dsa87 = Mldsa87::new(&clock, key_vault);

        let mut seed = rand::thread_rng().gen::<[u8; 32]>();
        seed.to_big_endian(); // Change DWORDs to big-endian. TODO is this needed?
        for i in (0..seed.len()).step_by(4) {
            ml_dsa87
                .write(RvSize::Word, OFFSET_SEED + i as RvAddr, make_word(i, &seed))
                .unwrap();
        }

        ml_dsa87
            .write(RvSize::Word, OFFSET_CONTROL, Control::CTRL::KEYGEN.into())
            .unwrap();

        loop {
            let status = InMemoryRegister::<u32, Status::Register>::new(
                ml_dsa87.read(RvSize::Word, OFFSET_STATUS).unwrap(),
            );

            if status.is_set(Status::VALID) && status.is_set(Status::READY) {
                break;
            }

            clock.increment_and_process_timer_actions(1, &mut ml_dsa87);
        }

        let public_key = bytes_from_words_be(&ml_dsa87.pubkey);

        // Swap endianness again
        seed.to_big_endian();
        let mut rng = SeedOnlyRng::new(seed);
        let (pk, _sk) = try_keygen_with_rng(&mut rng).unwrap();
        assert_eq!(&public_key, &pk.into_bytes());
    }

    #[test]
    fn test_sign_from_seed() {
        let clock = Clock::new();
        let key_vault = KeyVault::new();

        let mut ml_dsa87 = Mldsa87::new(&clock, key_vault);

        let mut seed = rand::thread_rng().gen::<[u8; 32]>();
        seed.to_big_endian(); // Change DWORDs to big-endian.
        for i in (0..seed.len()).step_by(4) {
            ml_dsa87
                .write(RvSize::Word, OFFSET_SEED + i as RvAddr, make_word(i, &seed))
                .unwrap();
        }

        let mut msg: [u8; 64] = {
            let part0 = rand::thread_rng().gen::<[u8; 32]>();
            let part1 = rand::thread_rng().gen::<[u8; 32]>();
            let concat: Vec<u8> = part0.iter().chain(part1.iter()).copied().collect();
            concat.as_slice().try_into().unwrap()
        };
        msg.to_big_endian(); // Change DWORDs to big-endian.

        for i in (0..msg.len()).step_by(4) {
            ml_dsa87
                .write(RvSize::Word, OFFSET_MSG + i as RvAddr, make_word(i, &msg))
                .unwrap();
        }

        let mut sign_rnd = rand::thread_rng().gen::<[u8; 32]>();
        sign_rnd.to_big_endian(); // Change DWORDs to big-endian.

        for i in (0..sign_rnd.len()).step_by(4) {
            ml_dsa87
                .write(
                    RvSize::Word,
                    OFFSET_SIGN_RND + i as RvAddr,
                    make_word(i, &sign_rnd),
                )
                .unwrap();
        }

        ml_dsa87
            .write(
                RvSize::Word,
                OFFSET_CONTROL,
                Control::CTRL::KEYGEN_AND_SIGN.into(),
            )
            .unwrap();

        loop {
            let status = InMemoryRegister::<u32, Status::Register>::new(
                ml_dsa87.read(RvSize::Word, OFFSET_STATUS).unwrap(),
            );

            if status.is_set(Status::VALID) && status.is_set(Status::READY) {
                break;
            }

            clock.increment_and_process_timer_actions(1, &mut ml_dsa87);
        }

        let signature = bytes_from_words_be(&ml_dsa87.signature);

        // Swap endianness again to restore original endianness.
        seed.to_big_endian();
        msg.to_big_endian();
        sign_rnd.to_big_endian();
        let mut keygen_rng = SeedOnlyRng::new(seed);
        let (_pk, sk) = try_keygen_with_rng(&mut keygen_rng).unwrap();
        let test_signature = sk.try_sign_with_seed(&[0u8; 32], &msg, &[]).unwrap();

        assert_eq!(&signature[..SIG_LEN], &test_signature);
    }

    #[test]
    fn test_verify() {
        let clock = Clock::new();
        let key_vault = KeyVault::new();

        let mut ml_dsa87 = Mldsa87::new(&clock, key_vault);

        let mut msg: [u8; 64] = {
            let part0 = rand::thread_rng().gen::<[u8; 32]>();
            let part1 = rand::thread_rng().gen::<[u8; 32]>();
            let concat: Vec<u8> = part0.iter().chain(part1.iter()).copied().collect();
            concat.as_slice().try_into().unwrap()
        };

        let seed = rand::thread_rng().gen::<[u8; 32]>();
        let mut keygen_rng = SeedOnlyRng::new(seed);
        let (pk, sk) = try_keygen_with_rng(&mut keygen_rng).unwrap();
        let test_signature = sk.try_sign_with_seed(&[0u8; 32], &msg, &[]).unwrap();

        msg.to_big_endian(); // Change DWORDs to big-endian.
        for i in (0..msg.len()).step_by(4) {
            ml_dsa87
                .write(RvSize::Word, OFFSET_MSG + i as RvAddr, make_word(i, &msg))
                .unwrap();
        }

        let mut pub_key = pk.into_bytes();
        pub_key.to_big_endian();
        for i in (0..pub_key.len()).step_by(4) {
            ml_dsa87
                .write(
                    RvSize::Word,
                    OFFSET_PK + i as RvAddr,
                    make_word(i, &pub_key),
                )
                .unwrap();
        }

        // Good signature
        let mut signature = {
            let mut sig = [0; SIG_LEN + 1];
            sig[..SIG_LEN].copy_from_slice(&test_signature);
            sig
        };
        signature.to_big_endian();

        for i in (0..signature.len()).step_by(4) {
            ml_dsa87
                .write(
                    RvSize::Word,
                    OFFSET_SIGNATURE + i as RvAddr,
                    make_word(i, &signature),
                )
                .unwrap();
        }

        ml_dsa87
            .write(
                RvSize::Word,
                OFFSET_CONTROL,
                Control::CTRL::VERIFYING.into(),
            )
            .unwrap();

        loop {
            let status = InMemoryRegister::<u32, Status::Register>::new(
                ml_dsa87.read(RvSize::Word, OFFSET_STATUS).unwrap(),
            );

            if status.is_set(Status::VALID) && status.is_set(Status::READY) {
                break;
            }

            clock.increment_and_process_timer_actions(1, &mut ml_dsa87);
        }

        let result = bytes_from_words_be(&ml_dsa87.verify_res);
        assert_eq!(result, &test_signature[..ML_DSA87_VERIFICATION_SIZE]);

        // Bad signature
        let mut rng = rand::thread_rng();
        let mut signature = [0u8; SIG_LEN + 1];

        rng.fill(&mut signature[..64]);

        signature.to_big_endian();

        for i in (0..signature.len()).step_by(4) {
            ml_dsa87
                .write(
                    RvSize::Word,
                    OFFSET_SIGNATURE + i as RvAddr,
                    make_word(i, &signature),
                )
                .unwrap();
        }

        ml_dsa87
            .write(
                RvSize::Word,
                OFFSET_CONTROL,
                Control::CTRL::VERIFYING.into(),
            )
            .unwrap();

        loop {
            let status = InMemoryRegister::<u32, Status::Register>::new(
                ml_dsa87.read(RvSize::Word, OFFSET_STATUS).unwrap(),
            );

            if status.is_set(Status::VALID) && status.is_set(Status::READY) {
                break;
            }

            clock.increment_and_process_timer_actions(1, &mut ml_dsa87);
        }

        let result = bytes_from_words_be(&ml_dsa87.verify_res);
        assert_ne!(result, &test_signature[..ML_DSA87_VERIFICATION_SIZE]);
    }

    #[test]
    fn test_gen_key_kv_seed() {
        // Test for getting the seed from the key-vault.
        for key_id in 0..KeyVault::KEY_COUNT {
            let clock = Clock::new();
            let mut seed = rand::thread_rng().gen::<[u8; 32]>();
            let mut keygen_rng = SeedOnlyRng::new(seed);
            let (pk, _sk) = try_keygen_with_rng(&mut keygen_rng).unwrap();
            seed.to_big_endian(); // Change DWORDs to big-endian.

            let mut key_vault = KeyVault::new();
            let mut key_usage = KeyUsage::default();
            key_usage.set_mldsa_seed(true);

            key_vault
                .write_key(key_id, &seed, u32::from(key_usage))
                .unwrap();

            let mut ml_dsa87 = Mldsa87::new(&clock, key_vault);

            // We expect the output to match the generated random seed.
            // Write a different seed first to make sure the Kv seed is used
            let mut seed = [0xABu8; 32];
            seed.to_big_endian(); // Change DWORDs to big-endian.
            for i in (0..seed.len()).step_by(4) {
                ml_dsa87
                    .write(RvSize::Word, OFFSET_SEED + i as RvAddr, make_word(i, &seed))
                    .unwrap();
            }

            // Instruct seed to be read from key-vault.
            let seed_ctrl = InMemoryRegister::<u32, KvRdSeedCtrl::Register>::new(0);
            seed_ctrl.modify(KvRdSeedCtrl::READ_ENTRY.val(key_id) + KvRdSeedCtrl::READ_EN.val(1));

            ml_dsa87
                .write(RvSize::Word, OFFSET_KV_RD_SEED_CONTROL, seed_ctrl.get())
                .unwrap();

            // Wait for ml_dsa87 periph to retrieve the seed from key-vault.
            loop {
                let seed_read_status = InMemoryRegister::<u32, KvRdSeedStatus::Register>::new(
                    ml_dsa87
                        .read(RvSize::Word, OFFSET_KV_RD_SEED_STATUS)
                        .unwrap(),
                );

                if seed_read_status.is_set(KvRdSeedStatus::VALID) {
                    assert_eq!(
                        seed_read_status.read(KvRdSeedStatus::ERROR),
                        KvRdSeedStatus::ERROR::SUCCESS.value
                    );
                    break;
                }
                clock.increment_and_process_timer_actions(1, &mut ml_dsa87);
            }

            ml_dsa87
                .write(RvSize::Word, OFFSET_CONTROL, Control::CTRL::KEYGEN.into())
                .unwrap();

            loop {
                let status = InMemoryRegister::<u32, Status::Register>::new(
                    ml_dsa87.read(RvSize::Word, OFFSET_STATUS).unwrap(),
                );
                if status.is_set(Status::VALID) && status.is_set(Status::READY) {
                    break;
                }
                clock.increment_and_process_timer_actions(1, &mut ml_dsa87);
            }

            let public_key = bytes_from_words_be(&ml_dsa87.pubkey);
            assert_eq!(&public_key, &pk.into_bytes());
        }
    }

    // const MLDSA87_PUB_KEY_BYTE_SIZE: usize = 2592;
    // const MLDSA87_PUB_KEY_WORD_SIZE: usize = 648;
    // const MLDSA87_PRIV_KEY_BYTE_SIZE: usize = 4896;
    // const MLDSA87_PRIV_KEY_WORD_SIZE: usize = 1224;
    // const MLDSA87_SIGNATURE_BYTE_SIZE: usize = 4628;
    // const MLDSA87_SIGNATURE_WORD_SIZE: usize = 1157;
    // const MLDSA87_MSG_BYTE_SIZE: usize = 64;

    // fn from_hw_format(value: &[u32; MLDSA87_PUB_KEY_WORD_SIZE]) -> [u8; MLDSA87_PUB_KEY_BYTE_SIZE] {
    //     let mut result = [0u8; MLDSA87_PUB_KEY_BYTE_SIZE];
    //     for i in 0..value.len() {
    //         *<&mut [u8; 4]>::try_from(&mut result[i * 4..][..4]).unwrap() = value[i].to_be_bytes();
    //     }
    //     result
    // }

    // pub priv digest sig
    // #[test]
    // fn test_mtimkovich() {
    //     // let pk_bytes = [
    //     //     0x0b, 0x7e, 0xf5, 0xca, 0xcd, 0x20, 0xe0, 0x6a, 0x2e, 0x68, 0x01, 0xb8, 0x73, 0x0e,
    //     //     0x3a, 0xe1, 0x7f, 0x0c, 0xee, 0x89, 0x46, 0x54, 0x85, 0x7c, 0x49, 0xe2, 0x1a, 0xfe,
    //     //     0x7a, 0x52, 0x36, 0xef, 0xb3, 0x46, 0x3c, 0x87, 0x43, 0xaf, 0x36, 0x50, 0xb0, 0xfe,
    //     //     0x98, 0x46, 0xe6, 0xd1, 0xff, 0xdc, 0xed, 0xdf, 0x5f, 0x2a, 0xce, 0x44, 0x03, 0xf6,
    //     //     0xe7, 0xcc, 0x93, 0xa8, 0x9a, 0xa5, 0xb1, 0xa0, 0x71, 0x56, 0xe4, 0x82, 0x63, 0xf2,
    //     //     0xae, 0xf9, 0xe1, 0xd7, 0xf2, 0x12, 0x6f, 0xef, 0x2c, 0x00, 0x26, 0x84, 0x41, 0xe2,
    //     //     0x53, 0x1f, 0x17, 0x49, 0x1d, 0x5b, 0x5e, 0xb3, 0x9c, 0x48, 0x0e, 0x67, 0xad, 0xb7,
    //     //     0x87, 0xbd, 0x62, 0xe0, 0x83, 0x3f, 0xa2, 0x3b, 0x1f, 0x1c, 0x3b, 0x77, 0x6f, 0x12,
    //     //     0x3a, 0xf4, 0x95, 0xda, 0x0f, 0xce, 0xe3, 0x69, 0xbe, 0x3b, 0x29, 0xf0, 0xe9, 0x55,
    //     //     0xc5, 0x7a, 0x8c, 0x38, 0x1c, 0xe7, 0xf9, 0x07, 0x68, 0x5f, 0x57, 0x35, 0xd0, 0x56,
    //     //     0x8d, 0x48, 0xf9, 0xd0, 0x23, 0x47, 0x3d, 0x31, 0x21, 0x4e, 0x53, 0x0f, 0xfa, 0x26,
    //     //     0x75, 0x37, 0x7c, 0x58, 0xaf, 0xb7, 0x9a, 0x88, 0x5b, 0xa9, 0x48, 0xd5, 0x38, 0x91,
    //     //     0xbe, 0x2a, 0x52, 0x64, 0x4e, 0x81, 0x62, 0xf2, 0x85, 0x6b, 0xf0, 0xd6, 0x4b, 0x22,
    //     //     0x06, 0x5b, 0x72, 0x27, 0x0c, 0x2c, 0x14, 0xae, 0x5e, 0x8c, 0x0d, 0xf5, 0x96, 0x22,
    //     //     0x8b, 0xf0, 0x69, 0xd5, 0xd7, 0x65, 0x63, 0x28, 0x03, 0xd3, 0xe8, 0xa7, 0xf5, 0xf0,
    //     //     0xca, 0xe9, 0x0b, 0x7e, 0x66, 0x19, 0x63, 0x8f, 0xc6, 0x77, 0x89, 0x01, 0x30, 0x21,
    //     //     0x85, 0xea, 0x0a, 0xef, 0x31, 0x04, 0xfc, 0x03, 0xc1, 0x73, 0xda, 0x74, 0x50, 0x4a,
    //     //     0x50, 0xaa, 0x49, 0xc3, 0x45, 0x81, 0xb1, 0xb2, 0xe7, 0x25, 0x35, 0xf4, 0xc6, 0x24,
    //     //     0xf6, 0x66, 0x25, 0xd4, 0x3e, 0x13, 0xbd, 0xfe, 0x5e, 0x5c, 0xdf, 0x8e, 0x5c, 0x65,
    //     //     0x4b, 0x5f, 0xdc, 0x28, 0xaa, 0xc8, 0x19, 0x08, 0x08, 0xb9, 0x9b, 0x01, 0x60, 0x28,
    //     //     0xa1, 0x49, 0x03, 0xcb, 0xc4, 0x3c, 0x5e, 0x8f, 0xea, 0x62, 0x38, 0x97, 0x47, 0x4f,
    //     //     0x30, 0x0b, 0x87, 0x90, 0xc6, 0xab, 0x6d, 0x3c, 0xa6, 0x45, 0xd3, 0x13, 0x6b, 0xdf,
    //     //     0xd3, 0x8e, 0x05, 0x0f, 0xb5, 0xbc, 0x05, 0xcd, 0x35, 0x3b, 0x07, 0x81, 0x41, 0x94,
    //     //     0xaf, 0x36, 0xb9, 0x11, 0x1e, 0xf6, 0xbb, 0xe7, 0x66, 0xfa, 0x3d, 0x50, 0x25, 0x22,
    //     //     0x21, 0xd1, 0x80, 0x30, 0x1b, 0x8a, 0x56, 0xb4, 0x92, 0xf6, 0x76, 0x9e, 0xa9, 0x6a,
    //     //     0x19, 0xff, 0xe3, 0xa3, 0xbf, 0xf8, 0x07, 0x8d, 0xef, 0x97, 0xbb, 0xb4, 0xa6, 0x52,
    //     //     0xc0, 0x65, 0x0a, 0x38, 0xbc, 0x2c, 0x25, 0x3a, 0xed, 0x73, 0xed, 0x45, 0xc0, 0x23,
    //     //     0x6e, 0x9f, 0x8f, 0x2c, 0x1a, 0xca, 0x3d, 0x76, 0x73, 0x91, 0x18, 0x7c, 0x08, 0xed,
    //     //     0xff, 0x42, 0x1e, 0x59, 0x8d, 0xa0, 0xc6, 0xc7, 0xd3, 0xf4, 0xa8, 0xf5, 0xfb, 0x3a,
    //     //     0x30, 0x11, 0x37, 0x7f, 0x60, 0xe4, 0x6c, 0x4b, 0x72, 0xa0, 0xc8, 0xbf, 0xb8, 0xed,
    //     //     0x51, 0x8d, 0xe2, 0x1b, 0x30, 0x4a, 0xac, 0xfd, 0xc2, 0xc8, 0x34, 0x9c, 0x9a, 0x4c,
    //     //     0x0a, 0x3f, 0x68, 0xe0, 0xf7, 0x34, 0xd0, 0x36, 0xbd, 0xde, 0x50, 0x79, 0xca, 0x4a,
    //     //     0x48, 0x21, 0xe9, 0xda, 0x6a, 0xfd, 0x4d, 0x57, 0xe3, 0x9e, 0x8b, 0x4a, 0xd0, 0x22,
    //     //     0xf4, 0xb4, 0xac, 0x02, 0x82, 0x34, 0x86, 0x66, 0xcf, 0x81, 0x47, 0xfb, 0x0d, 0x56,
    //     //     0x19, 0x98, 0xe4, 0x31, 0x56, 0x2f, 0xaf, 0xc4, 0xfd, 0x64, 0xa7, 0x98, 0x04, 0x09,
    //     //     0xb1, 0x47, 0x08, 0xe3, 0x63, 0xd6, 0x1f, 0x5b, 0x74, 0x4a, 0x8e, 0xb0, 0x2b, 0xb1,
    //     //     0x18, 0xc8, 0x8a, 0xce, 0x80, 0x2b, 0xb6, 0x17, 0xb9, 0x29, 0x0d, 0x81, 0x78, 0xf1,
    //     //     0x04, 0xc5, 0xe3, 0x31, 0xc6, 0xf3, 0x22, 0x16, 0x8c, 0x52, 0x06, 0x73, 0xc5, 0x16,
    //     //     0x6d, 0x13, 0xf4, 0x30, 0xdc, 0xc5, 0x0b, 0xf6, 0x5f, 0x09, 0x37, 0x5e, 0x71, 0x37,
    //     //     0x16, 0xe2, 0xb2, 0xbe, 0xf1, 0xa4, 0x84, 0x42, 0xac, 0xf9, 0x65, 0x8e, 0xf8, 0xcd,
    //     //     0xf2, 0x3f, 0xa6, 0x1e, 0x58, 0xc6, 0x67, 0x6e, 0xf7, 0x37, 0xaa, 0x95, 0xc8, 0x83,
    //     //     0x1f, 0x34, 0x4c, 0xa6, 0x40, 0xd0, 0xa4, 0x92, 0x5e, 0x40, 0x4c, 0x3e, 0x4a, 0xbc,
    //     //     0xa1, 0x69, 0x54, 0x4c, 0x7a, 0xdc, 0xed, 0x15, 0xa3, 0x89, 0x9a, 0x5a, 0x38, 0xd7,
    //     //     0xcf, 0xb9, 0x78, 0xe8, 0x84, 0x6e, 0xeb, 0x6a, 0xba, 0x8c, 0xa7, 0xa8, 0x8a, 0xee,
    //     //     0xb8, 0x8b, 0x87, 0xae, 0x9c, 0xcb, 0x8d, 0xd7, 0x50, 0xc7, 0x59, 0xde, 0xce, 0xbf,
    //     //     0x59, 0x92, 0x38, 0x9e, 0x22, 0x91, 0xf7, 0x79, 0x19, 0xbe, 0xfb, 0xdf, 0x4e, 0xcd,
    //     //     0x6a, 0xe8, 0x49, 0x99, 0xc8, 0xfc, 0xd7, 0xdf, 0x8c, 0x09, 0xd2, 0xa6, 0xe7, 0x22,
    //     //     0xfe, 0x8c, 0x1b, 0x10, 0xa2, 0xa5, 0x7b, 0xf5, 0x94, 0x43, 0xc9, 0xa7, 0xd2, 0x09,
    //     //     0xd4, 0xb5, 0x45, 0xb9, 0x19, 0x83, 0x72, 0x08, 0xcb, 0x03, 0x6c, 0x34, 0x3d, 0x33,
    //     //     0x1a, 0x13, 0x25, 0x15, 0x06, 0xe0, 0x23, 0x82, 0x6a, 0x2a, 0x0a, 0x54, 0x3e, 0x1a,
    //     //     0x59, 0xa6, 0x48, 0x88, 0x1b, 0xa4, 0xd2, 0x7d, 0xda, 0x35, 0x80, 0x5f, 0x32, 0xc8,
    //     //     0x06, 0xe8, 0x91, 0xa5, 0x20, 0x6b, 0xb8, 0x75, 0x27, 0x17, 0xf2, 0xb1, 0x95, 0x69,
    //     //     0xc1, 0x7e, 0x69, 0xff, 0x06, 0xf5, 0x54, 0xdf, 0xaa, 0x47, 0xba, 0x91, 0x6d, 0x09,
    //     //     0x36, 0x30, 0x1a, 0xa5, 0x7e, 0x35, 0x48, 0x11, 0x6c, 0xc3, 0x76, 0xc2, 0xaa, 0x6f,
    //     //     0xc3, 0xad, 0x3a, 0xf2, 0x0c, 0xed, 0x6a, 0xc4, 0x5c, 0x98, 0x83, 0x30, 0x10, 0x9c,
    //     //     0xf1, 0x08, 0xfb, 0xff, 0x2e, 0x78, 0xe7, 0x10, 0xb3, 0x82, 0x9d, 0xd5, 0x8b, 0xdf,
    //     //     0xbc, 0x74, 0x06, 0x9c, 0x04, 0x5c, 0xa6, 0x86, 0xc3, 0x43, 0xcf, 0xec, 0x2b, 0xc2,
    //     //     0x10, 0xae, 0x47, 0xab, 0x48, 0x47, 0xd6, 0x5a, 0xe0, 0x45, 0x52, 0x67, 0x02, 0x17,
    //     //     0x1d, 0xb7, 0xcb, 0x1e, 0x84, 0x35, 0xad, 0xc8, 0x40, 0xc8, 0x94, 0x57, 0xc1, 0x0c,
    //     //     0x9d, 0x3c, 0x62, 0x8f, 0xa6, 0x59, 0xbc, 0x2c, 0x54, 0x6b, 0xf4, 0x0b, 0x68, 0x65,
    //     //     0x48, 0x7e, 0xdf, 0xe8, 0x2b, 0xd2, 0xbe, 0xbb, 0x76, 0xaf, 0x10, 0x2b, 0xf7, 0x1b,
    //     //     0x1c, 0xaf, 0x49, 0xad, 0x9b, 0xc5, 0x90, 0x52, 0x80, 0x3e, 0x04, 0xdd, 0x51, 0x9a,
    //     //     0x22, 0x41, 0xae, 0xb5, 0xce, 0x86, 0x88, 0xc5, 0x4e, 0xce, 0xfe, 0x0f, 0xe5, 0xb7,
    //     //     0x73, 0xc1, 0x84, 0xa1, 0xf4, 0x1c, 0x13, 0x81, 0xbf, 0x9e, 0x1b, 0x89, 0x5d, 0xa9,
    //     //     0x6c, 0x04, 0x25, 0x2e, 0x4e, 0xd8, 0x59, 0xa9, 0xc4, 0xaf, 0xa2, 0x66, 0x23, 0x79,
    //     //     0x42, 0x3a, 0xcd, 0x7e, 0x2c, 0xcd, 0xb4, 0xb3, 0x1f, 0x8d, 0xe4, 0x5c, 0xba, 0x9a,
    //     //     0x2c, 0xad, 0x02, 0xe8, 0xda, 0xc8, 0xd7, 0xc2, 0x30, 0xf6, 0xc5, 0xb2, 0xdb, 0x6a,
    //     //     0x91, 0x9e, 0x5c, 0x6c, 0xe4, 0x47, 0x7e, 0x1b, 0x9b, 0xa5, 0x67, 0x97, 0x69, 0x81,
    //     //     0x35, 0x9d, 0x50, 0x65, 0xeb, 0xbf, 0x1e, 0xae, 0x5e, 0x16, 0x90, 0x3e, 0xd7, 0xe8,
    //     //     0x28, 0x5c, 0xe5, 0x44, 0xdc, 0x0e, 0x3a, 0xf5, 0xd5, 0x23, 0x2e, 0x56, 0xd9, 0x2a,
    //     //     0xe0, 0xb2, 0xe1, 0xaa, 0x7a, 0x6a, 0x9d, 0x57, 0x4e, 0x2e, 0x97, 0x7c, 0x12, 0xa8,
    //     //     0xa3, 0xa6, 0x80, 0x5c, 0x8b, 0xa9, 0x56, 0xd8, 0x5e, 0x04, 0x6b, 0x79, 0xae, 0xb5,
    //     //     0xb5, 0x1c, 0xa1, 0x36, 0x73, 0xf9, 0xd9, 0xe0, 0xac, 0xbe, 0xee, 0xbc, 0x70, 0x55,
    //     //     0x5b, 0x30, 0xdd, 0xb8, 0x8b, 0xbf, 0x35, 0x41, 0x09, 0xae, 0xe8, 0x53, 0x55, 0x33,
    //     //     0x3f, 0xb1, 0x55, 0xeb, 0x3c, 0x90, 0xad, 0xdf, 0x5f, 0x5b, 0xeb, 0x99, 0xc9, 0x1d,
    //     //     0x49, 0x5e, 0xdb, 0x01, 0x3f, 0x8c, 0xd5, 0x20, 0xd4, 0x81, 0x1d, 0x51, 0x24, 0xb2,
    //     //     0xee, 0x17, 0x88, 0xde, 0xbf, 0xd7, 0x90, 0x1e, 0xbb, 0x73, 0xa0, 0xe6, 0x20, 0x42,
    //     //     0x75, 0x61, 0x52, 0xa8, 0x52, 0x44, 0x53, 0x56, 0x12, 0xc2, 0xb6, 0x37, 0x53, 0x08,
    //     //     0xee, 0xc5, 0x89, 0xaa, 0xc2, 0x57, 0xbd, 0x3b, 0x04, 0xd6, 0x5f, 0x29, 0x38, 0x12,
    //     //     0x7a, 0x92, 0x53, 0xad, 0xe4, 0xaa, 0xcb, 0x6f, 0x94, 0xae, 0x72, 0x9c, 0xf8, 0xa7,
    //     //     0xdb, 0x63, 0xfd, 0xd8, 0x00, 0x3c, 0xb1, 0x40, 0x8f, 0x21, 0x21, 0x37, 0x22, 0xe8,
    //     //     0xaa, 0xb7, 0xc4, 0x84, 0x7e, 0x4f, 0x6d, 0xd0, 0xcf, 0xff, 0x44, 0xb8, 0x2f, 0x90,
    //     //     0x0c, 0x66, 0x82, 0x2e, 0x24, 0xa3, 0x24, 0x0f, 0x68, 0x00, 0x03, 0x18, 0x96, 0xf8,
    //     //     0xe9, 0x8c, 0xe1, 0x5a, 0x24, 0x97, 0x28, 0x6d, 0x61, 0xbe, 0xed, 0xad, 0xa2, 0x91,
    //     //     0x17, 0xc1, 0x96, 0x07, 0x06, 0x24, 0x5f, 0x64, 0x39, 0x66, 0xf1, 0x61, 0x98, 0xb5,
    //     //     0xa5, 0xff, 0xce, 0x6b, 0x1e, 0x3d, 0x0b, 0xc1, 0x01, 0x4f, 0x5b, 0xb8, 0xc8, 0xc9,
    //     //     0x34, 0xb1, 0x62, 0x96, 0x4b, 0x14, 0x33, 0x19, 0x07, 0x0b, 0x09, 0x9e, 0xe6, 0x2d,
    //     //     0x42, 0x65, 0xf7, 0x67, 0x2a, 0xd5, 0xda, 0x77, 0x8a, 0xe4, 0x52, 0xe8, 0xe1, 0xaf,
    //     //     0x6b, 0xf4, 0xc1, 0x3a, 0x62, 0x1d, 0x06, 0xf6, 0x74, 0xf9, 0xfa, 0xad, 0xda, 0x90,
    //     //     0xe4, 0x98, 0xc8, 0xdd, 0xe9, 0xa5, 0xa8, 0x03, 0x41, 0x16, 0x17, 0x6b, 0x3b, 0x03,
    //     //     0xd0, 0x39, 0xeb, 0x54, 0x82, 0x7c, 0xe7, 0x0b, 0x45, 0x25, 0x89, 0x3a, 0x3c, 0x30,
    //     //     0xdc, 0x76, 0xe6, 0x7a, 0xfd, 0x45, 0x88, 0x28, 0x71, 0x8a, 0x39, 0x82, 0x3a, 0xf7,
    //     //     0xfa, 0x66, 0x41, 0x59, 0x1f, 0x29, 0x97, 0xcc, 0xfa, 0x67, 0xbd, 0x2d, 0x82, 0x91,
    //     //     0x26, 0x02, 0x3b, 0x35, 0x25, 0x16, 0x64, 0x79, 0xa9, 0xa3, 0x4e, 0x1a, 0x46, 0x99,
    //     //     0x62, 0x49, 0xc6, 0xbb, 0xe1, 0xdd, 0xa8, 0x05, 0x82, 0x16, 0x60, 0x98, 0x90, 0xea,
    //     //     0x62, 0x80, 0xdb, 0x11, 0x51, 0x75, 0x1e, 0x11, 0x65, 0x8c, 0x7d, 0x32, 0x48, 0x53,
    //     //     0x69, 0x8d, 0x7d, 0xaa, 0x8f, 0xff, 0xb2, 0x67, 0xf1, 0x72, 0xdd, 0x58, 0xfa, 0x9d,
    //     //     0x83, 0x83, 0xee, 0x8d, 0xbc, 0x8e, 0x18, 0x89, 0x2d, 0x9e, 0xfd, 0x52, 0x1d, 0x63,
    //     //     0x3c, 0x03, 0x40, 0x7b, 0xe6, 0x17, 0xe4, 0x89, 0x2f, 0xf2, 0x98, 0x0b, 0x5d, 0x6c,
    //     //     0x26, 0xce, 0x24, 0x02, 0x66, 0x44, 0xad, 0x4c, 0x17, 0x93, 0xc3, 0x37, 0x19, 0x00,
    //     //     0xde, 0x18, 0x83, 0x7f, 0x49, 0x8b, 0xec, 0x6e, 0x7d, 0xb7, 0x03, 0x70, 0x79, 0x71,
    //     //     0xe9, 0xce, 0x99, 0x0f, 0x3a, 0x41, 0x85, 0xd6, 0x9a, 0x1e, 0x06, 0x6b, 0x82, 0x83,
    //     //     0xde, 0xa6, 0xf3, 0xfb, 0xb7, 0x69, 0xae, 0x74, 0xa6, 0xbe, 0xf5, 0xea, 0x0d, 0x80,
    //     //     0x35, 0xc0, 0x13, 0x53, 0xd7, 0x2e, 0x51, 0x9d, 0xa2, 0x0d, 0x03, 0xd9, 0x73, 0x62,
    //     //     0x05, 0x07, 0x2a, 0x35, 0x5a, 0x7b, 0xfd, 0xe2, 0xc2, 0x07, 0x5d, 0xb0, 0xf9, 0xc5,
    //     //     0xc1, 0x50, 0x6f, 0x2e, 0x17, 0xe1, 0x0c, 0x30, 0x5b, 0x5f, 0x7a, 0xaf, 0x01, 0x55,
    //     //     0x9e, 0xdf, 0x00, 0xfa, 0x63, 0x7b, 0x46, 0xcd, 0x36, 0x7b, 0x1d, 0xed, 0x6f, 0x67,
    //     //     0xb2, 0x0e, 0x24, 0x5f, 0x2f, 0xa8, 0xea, 0xfe, 0x6a, 0x31, 0x5e, 0x8d, 0x61, 0xba,
    //     //     0xa1, 0x88, 0xb8, 0x34, 0x17, 0x98, 0x09, 0xd9, 0x51, 0x80, 0xa8, 0x5c, 0x0d, 0xc9,
    //     //     0x2f, 0x5e, 0x5e, 0x79, 0xce, 0xab, 0x48, 0x5c, 0x14, 0xc3, 0x33, 0xf2, 0x27, 0x8d,
    //     //     0x8b, 0xa1, 0xde, 0x8e, 0x31, 0x25, 0xf1, 0x36, 0xd0, 0x7e, 0xd8, 0x90, 0xd5, 0x69,
    //     //     0x39, 0x9c, 0x19, 0x3d, 0x09, 0x11, 0x41, 0xaf, 0x9b, 0x33, 0xb8, 0xe7, 0x4c, 0x71,
    //     //     0xf7, 0xf5, 0xaf, 0x94, 0x16, 0x07, 0xb7, 0xd4, 0x34, 0x6c, 0xdd, 0xef, 0xf8, 0x92,
    //     //     0x45, 0x5c, 0x46, 0x3c, 0x23, 0x77, 0xf6, 0x25, 0x77, 0x5c, 0x9b, 0xd9, 0xfa, 0xa8,
    //     //     0x84, 0xea, 0x6b, 0xd3, 0xf1, 0xf7, 0x33, 0xa9, 0x14, 0x46, 0xf2, 0x3d, 0x0f, 0x48,
    //     //     0xfb, 0x5d, 0xfc, 0xab, 0x21, 0x40, 0xef, 0xd6, 0xe1, 0xa1, 0xb6, 0x4a, 0x8e, 0x87,
    //     //     0x93, 0xe4, 0x2e, 0x8d, 0xa1, 0x06, 0xa8, 0xe7, 0x67, 0x65, 0x40, 0xc1, 0xdc, 0x3c,
    //     //     0x72, 0xe2, 0xd5, 0xcd, 0xe8, 0x76, 0xec, 0xcc, 0x77, 0x66, 0xf7, 0x17, 0xc2, 0x07,
    //     //     0x8a, 0x0b, 0x9c, 0x1e, 0x29, 0x71, 0xf6, 0x11, 0x9b, 0x4d, 0x65, 0xe6, 0x5f, 0x3f,
    //     //     0xa6, 0x29, 0xa6, 0x03, 0x80, 0xc1, 0x8e, 0x08, 0xa2, 0x11, 0xa9, 0x06, 0xd7, 0x3b,
    //     //     0xd2, 0x17, 0xca, 0x6e, 0xac, 0xa9, 0x0b, 0x64, 0xf3, 0xc3, 0x62, 0xb8, 0xa6, 0xb0,
    //     //     0x29, 0x64, 0x86, 0x1e, 0xaf, 0x28, 0xc0, 0x4d, 0xe0, 0xf7, 0xd0, 0x1d, 0x9f, 0x60,
    //     //     0x9a, 0xc4, 0x28, 0x7f, 0xf2, 0x7a, 0x0c, 0x70, 0xfc, 0xee, 0xc0, 0x31, 0x41, 0xa9,
    //     //     0xbf, 0xd8, 0xcc, 0x09, 0xb7, 0xc3, 0xe2, 0xc9, 0x2f, 0x4a, 0xbe, 0xa8, 0x1a, 0x3e,
    //     //     0x36, 0x17, 0x05, 0xb9, 0xf8, 0xec, 0x87, 0x3a, 0xc8, 0x0b, 0x35, 0x5a, 0x7a, 0x40,
    //     //     0x6f, 0xc4, 0xf6, 0xfc, 0xff, 0x13, 0x0e, 0xf8, 0x22, 0x5c, 0x8d, 0x3c, 0xf8, 0xec,
    //     //     0x2f, 0x29, 0xd5, 0xa5, 0xec, 0x51, 0x07, 0xf9, 0x67, 0x17, 0x2f, 0xfb, 0x48, 0x53,
    //     //     0x63, 0x0d, 0xb1, 0x4c, 0x91, 0x91, 0x33, 0x50, 0x78, 0x6c, 0x2c, 0xe8, 0xea, 0x72,
    //     //     0x8a, 0xaa, 0x4d, 0x18, 0x20, 0xe7, 0x93, 0x4c, 0x90, 0xdd, 0x44, 0xa7, 0x40, 0xad,
    //     //     0x11, 0x29, 0x72, 0xfb, 0x84, 0x10, 0x51, 0xb5, 0x81, 0xa9, 0x58, 0xbf, 0xaf, 0x57,
    //     //     0x71, 0xd1, 0x75, 0x97, 0x38, 0x6d, 0x60, 0xc3, 0x9d, 0xfc, 0x3d, 0x41, 0x5c, 0xef,
    //     //     0xf1, 0xaf, 0x3e, 0xf4, 0xaf, 0x79, 0x19, 0x18, 0x30, 0x19, 0xff, 0x78, 0x2c, 0xbd,
    //     //     0x49, 0x31, 0xf3, 0x94, 0x98, 0xa4, 0x27, 0x8e, 0x95, 0x0a, 0x0c, 0xe6, 0x99, 0x85,
    //     //     0x4a, 0x48, 0x8e, 0x40, 0xd0, 0xa8, 0x26, 0xab, 0xb2, 0x9f, 0xbe, 0xd0, 0xab, 0x56,
    //     //     0x58, 0x4f, 0xf7, 0xc6, 0xc0, 0xee, 0xda, 0x99, 0xf1, 0xc1, 0x89, 0x5b, 0x20, 0xa5,
    //     //     0x04, 0x2f, 0x1a, 0x4e, 0x9a, 0x73, 0xca, 0x2c, 0x5c, 0xb2, 0x02, 0x31, 0xc6, 0xf3,
    //     //     0xaa, 0xc4, 0x0f, 0x3a, 0x7c, 0xe7, 0x1f, 0x51, 0x42, 0xdf, 0xd0, 0x5a, 0x1b, 0x31,
    //     //     0xa2, 0xc1, 0xab, 0x0f, 0x94, 0xac, 0x4a, 0x66, 0x5a, 0x1d, 0x6b, 0xa6, 0xb6, 0x54,
    //     //     0xf4, 0x85, 0x08, 0x76, 0xad, 0x2f, 0xc3, 0xac, 0xc1, 0x34, 0x63, 0xa6, 0x49, 0x22,
    //     //     0x08, 0x0c, 0xc5, 0x7f, 0xc1, 0xf4, 0xf7, 0xb8, 0x28, 0x3a, 0xdd, 0x6a, 0xa2, 0xf7,
    //     //     0xd7, 0xf9, 0x1c, 0xa5, 0x74, 0x7d, 0x0f, 0xc3, 0x1b, 0xd9, 0xea, 0x52, 0x00, 0x8b,
    //     //     0x4e, 0xd5, 0x71, 0x37, 0xe9, 0xa4, 0x66, 0x44, 0xb4, 0x68, 0x5a, 0xef, 0x42, 0xce,
    //     //     0xc2, 0x25, 0x2a, 0xe9, 0xb1, 0xaa, 0x36, 0xd7, 0xaa, 0xab, 0x99, 0xf6, 0x25, 0x09,
    //     //     0x05, 0x62, 0x97, 0x60, 0xa5, 0xfe, 0xb7, 0x5d, 0xe3, 0x73, 0x7e, 0x6f, 0xe7, 0x4d,
    //     //     0x86, 0xb1, 0x1b, 0xcd, 0x87, 0x34, 0xa6, 0x77, 0xfe, 0x63, 0x1f, 0xb5, 0x7d, 0x79,
    //     //     0xbf, 0x4a, 0xd3, 0xf7, 0x53, 0x21, 0x50, 0xf0, 0x44, 0x8e, 0xe0, 0x7a, 0x7f, 0xed,
    //     //     0x94, 0x0b, 0x90, 0xdb, 0x92, 0x44, 0x1c, 0xa8, 0xac, 0x9c, 0x5f, 0xb2, 0x07, 0xb1,
    //     //     0x35, 0x0a, 0xbc, 0x2a, 0x87, 0xbd, 0xc6, 0x12, 0x17, 0xdd, 0xfd, 0x2b, 0x7a, 0xeb,
    //     //     0x75, 0xed, 0xf4, 0x7f, 0x77, 0x1d, 0xbe, 0xd3, 0xae, 0x7b, 0x11, 0x92, 0x07, 0xf4,
    //     //     0x43, 0xb2, 0x0f, 0x4f, 0x14, 0x86, 0xf3, 0x87, 0xb1, 0xe2, 0x0d, 0x81, 0xa5, 0x7d,
    //     //     0x03, 0xe1, 0x61, 0x24, 0xb7, 0xa4, 0x27, 0x76, 0xe8, 0x1b, 0xee, 0x21, 0xe2, 0x35,
    //     //     0x66, 0xfa, 0x3b, 0x35, 0xf3, 0x78, 0xa4, 0x83, 0x59, 0xa0, 0x61, 0x00, 0x4d, 0x87,
    //     //     0x6a, 0xb1, 0xe1, 0xbf, 0xa9, 0x5d, 0x42, 0xc7, 0xfe, 0x31, 0x9a, 0x17, 0x73, 0x99,
    //     //     0x6a, 0x6b, 0xd7, 0xb5, 0x54, 0x0b, 0x45, 0x6f, 0x52, 0xa2, 0x17, 0x70, 0xc8, 0x13,
    //     //     0xa9, 0xee, 0x9f, 0xa3, 0xf6, 0xba, 0x5a, 0xc8, 0xfe, 0xba, 0x52, 0xa5, 0x3a, 0x9f,
    //     //     0xba, 0x90, 0x64, 0xb3, 0x8c, 0x80, 0xbf, 0x57, 0x6c, 0xcb, 0x9c, 0xbb, 0x25, 0x26,
    //     //     0x21, 0x3b, 0xba, 0x4f, 0x14, 0x36, 0x7b, 0x38, 0x2d, 0x77, 0x44, 0x9b, 0x73, 0xf5,
    //     //     0x93, 0x69, 0x67, 0xfa, 0x7b, 0x19, 0x80, 0x0c, 0xa6, 0x6d, 0x43, 0xc4, 0xa3, 0x2a,
    //     //     0x9a, 0x1a, 0xea, 0x50, 0x02, 0x06, 0xd1, 0x46, 0x95, 0xd2, 0xd4, 0x5b, 0xab, 0x6e,
    //     //     0x44, 0x21, 0xb5, 0x49, 0xb0, 0xb1, 0x90, 0xf0, 0x08, 0x69, 0xf3, 0x4d, 0x86, 0xd6,
    //     //     0x50, 0x45, 0x9c, 0x63, 0x0b, 0x3e, 0x09, 0xa4, 0xed, 0x1d, 0xab, 0xe5, 0x45, 0x3f,
    //     //     0x5e, 0xc6, 0xda, 0xb7, 0xe4, 0x07, 0x0c, 0x27, 0xb2, 0x22, 0x1f, 0xcd, 0x66, 0x90,
    //     //     0xe6, 0xcc, 0xde, 0xa8, 0x35, 0xfd, 0x7c, 0x73, 0x9a, 0x92, 0xea, 0xaa, 0x67, 0xa1,
    //     //     0x18, 0x07, 0x0f, 0x20, 0xf7, 0x55, 0x3d, 0x0e, 0xc2, 0xc7, 0xf4, 0x4d, 0x06, 0xce,
    //     //     0xd3, 0xfd, 0x35, 0x6b, 0x91, 0x2d, 0xfc, 0x44, 0xcd, 0x66, 0x62, 0x8d, 0xa5, 0x39,
    //     //     0x91, 0xf3, 0xb8, 0xe9, 0x40, 0xb3, 0x62, 0x95, 0x60, 0x73, 0x9b, 0x10, 0x18, 0x4f,
    //     //     0xb9, 0x53, 0xa4, 0x2f, 0x13, 0xa6, 0xfc, 0x8a, 0xcf, 0xbd, 0x05, 0x38, 0xc0, 0x3e,
    //     //     0xa3, 0xb1, 0xa2, 0xbe, 0xe1, 0x81, 0x5c, 0x16, 0x17, 0x3a, 0x87, 0xa1, 0x02, 0xe1,
    //     //     0x2e, 0x22, 0xf6, 0x7a, 0x01, 0xc7, 0x7a, 0xe0, 0xd3, 0x30, 0x0e, 0x7b, 0xe2, 0x50,
    //     //     0x68, 0x7d, 0x5a, 0x20, 0x86, 0x9c, 0xaf, 0x22, 0xcb, 0x9a, 0xb4, 0x8c, 0x58, 0x1f,
    //     //     0x2c, 0x34, 0x69, 0x70, 0x47, 0x6d, 0xe2, 0xfd, 0x1a, 0x90, 0xd8, 0xd4, 0xb7, 0x2b,
    //     //     0xf1, 0xce, 0x30, 0x0e, 0x6e, 0x79, 0xf6, 0x74, 0xd5, 0x70, 0x39, 0xa5, 0x15, 0xc1,
    //     //     0x3a, 0xd7, 0xe7, 0x43, 0xa4, 0x52, 0x33, 0x5f, 0xbb, 0x93, 0x9c, 0x70, 0xf3, 0x4a,
    //     //     0x51, 0x61, 0xaa, 0x5a, 0xde, 0x60, 0xfd, 0x57, 0x7c, 0x70, 0x5b, 0x3a, 0x26, 0x78,
    //     //     0x42, 0x73, 0x0d, 0xcc, 0x6b, 0x3a, 0x52, 0xd5, 0x85, 0xef, 0x00, 0x22, 0x11, 0x19,
    //     //     0x1e, 0xbc, 0x62, 0x4c, 0x6b, 0x11, 0x0d, 0x77, 0x4d, 0xfa, 0x3d, 0xfc, 0x4f, 0x8b,
    //     //     0x47, 0x31, 0x9d, 0x72, 0x94, 0x9b, 0x5f, 0xc5, 0x90, 0xc9, 0xce, 0x91, 0x44, 0x47,
    //     //     0x16, 0x66, 0x93, 0xfa, 0x4b, 0xd0, 0xac, 0xbf, 0x44, 0x71, 0x8b, 0x31, 0x34, 0x11,
    //     //     0xea, 0xec, 0xdc, 0x40, 0xed, 0x84, 0x48, 0x68, 0x57, 0x85, 0xf0, 0x42, 0xad, 0xa0,
    //     //     0xf9, 0x49, 0x51, 0xc1, 0xa4, 0xa0, 0x4f, 0x5f, 0x71, 0xfd, 0x96, 0x1a, 0x05, 0xcb,
    //     //     0x4c, 0x2b, 0x84, 0xd7, 0xbc, 0x5a, 0x8e, 0x6b, 0xc6, 0xf1, 0x18, 0x80, 0x92, 0xa1,
    //     //     0xa1, 0x0f, 0xbb, 0x35, 0x39, 0x5f, 0xd2, 0x06, 0xfc, 0x9b, 0x5c, 0x00, 0x55, 0x08,
    //     //     0x73, 0xa7, 0xfc, 0x4c, 0x80, 0x05, 0x14, 0xdb, 0x74, 0x31, 0x7a, 0xe3, 0x76, 0x59,
    //     //     0xd0, 0x89, 0xd4, 0xeb, 0xc1, 0xbf, 0x8c, 0x0e, 0x34, 0x35, 0x01, 0xdc, 0xc2, 0x64,
    //     //     0x7d, 0x37, 0xbb, 0xd7, 0xbe, 0xeb, 0x09, 0x95, 0x64, 0xa1, 0x35, 0xbb, 0x41, 0x3b,
    //     //     0x10, 0xde,
    //     // ];

    //     // let sk_bytes = [
    //     //     0x0b, 0x7e, 0xf5, 0xca, 0xcd, 0x20, 0xe0, 0x6a, 0x2e, 0x68, 0x01, 0xb8, 0x73, 0x0e,
    //     //     0x3a, 0xe1, 0x7f, 0x0c, 0xee, 0x89, 0x46, 0x54, 0x85, 0x7c, 0x49, 0xe2, 0x1a, 0xfe,
    //     //     0x7a, 0x52, 0x36, 0xef, 0xf2, 0xbb, 0xc4, 0x71, 0xf2, 0x17, 0x2f, 0x44, 0xe2, 0xee,
    //     //     0xfb, 0x49, 0x0a, 0x9c, 0x4d, 0xb4, 0x95, 0x15, 0xda, 0xb1, 0xa8, 0xdb, 0xb8, 0x6f,
    //     //     0x88, 0x3e, 0x17, 0x6c, 0x98, 0xff, 0xb6, 0x36, 0xa6, 0x69, 0x46, 0x55, 0xa4, 0xea,
    //     //     0x26, 0x97, 0xee, 0x39, 0xf7, 0x63, 0x1d, 0x13, 0xf2, 0x72, 0x99, 0x9a, 0xe5, 0xb5,
    //     //     0x0d, 0x46, 0x29, 0xd4, 0x70, 0x75, 0x25, 0xbe, 0x22, 0xc1, 0x18, 0x2f, 0x55, 0xc0,
    //     //     0x94, 0x7d, 0xd6, 0x61, 0xad, 0x60, 0x1a, 0x8d, 0xdb, 0xfa, 0x08, 0x5c, 0x7d, 0xd5,
    //     //     0xeb, 0xd2, 0x79, 0xe7, 0xae, 0x24, 0xc8, 0x98, 0x3a, 0x2c, 0xe8, 0x44, 0x7e, 0xbe,
    //     //     0xb1, 0x5e, 0x5c, 0x90, 0xc6, 0x08, 0x16, 0xdc, 0x70, 0xa2, 0x11, 0x25, 0x18, 0x42,
    //     //     0x04, 0x51, 0x01, 0x20, 0xc8, 0x49, 0x6d, 0x45, 0x12, 0x32, 0xd0, 0x60, 0x12, 0x00,
    //     //     0x34, 0x82, 0x48, 0x60, 0x6a, 0x32, 0x11, 0xc8, 0xd9, 0x41, 0x14, 0x11, 0xc4, 0x00,
    //     //     0xa5, 0x03, 0x05, 0x25, 0x86, 0x26, 0xd4, 0x28, 0x43, 0x30, 0x42, 0xc8, 0x30, 0xdb,
    //     //     0x30, 0x34, 0x26, 0x40, 0xa4, 0x2c, 0x54, 0x4d, 0x36, 0x9b, 0x80, 0x49, 0x01, 0x36,
    //     //     0x0d, 0xa0, 0x43, 0x00, 0x21, 0x24, 0x00, 0x24, 0x16, 0x93, 0x28, 0x37, 0x31, 0x98,
    //     //     0x5c, 0x70, 0x1c, 0x40, 0x80, 0xa2, 0x00, 0xca, 0x85, 0x97, 0x49, 0x44, 0x13, 0x52,
    //     //     0xd8, 0x48, 0x08, 0x03, 0x33, 0x03, 0x4d, 0x40, 0x72, 0x44, 0xd9, 0x11, 0x89, 0x44,
    //     //     0xc4, 0xa1, 0xa0, 0x98, 0x08, 0x96, 0x0c, 0x98, 0xa0, 0x48, 0x04, 0x90, 0x14, 0x4c,
    //     //     0x86, 0x02, 0x89, 0x16, 0x05, 0x00, 0xa0, 0x29, 0xcc, 0x68, 0x00, 0xdc, 0x26, 0x49,
    //     //     0x64, 0x92, 0x04, 0xb4, 0x4b, 0x64, 0xcb, 0x4d, 0xb5, 0x1c, 0x86, 0x61, 0x29, 0x96,
    //     //     0x64, 0xb6, 0x5a, 0x2d, 0x02, 0x62, 0x08, 0x9c, 0x14, 0xc8, 0x42, 0x24, 0x80, 0x90,
    //     //     0x62, 0x04, 0x04, 0x49, 0x86, 0x0a, 0x30, 0x40, 0x0a, 0x09, 0x88, 0x12, 0xc3, 0x29,
    //     //     0xe3, 0x25, 0x08, 0x41, 0xb1, 0x18, 0x65, 0x82, 0x6c, 0x81, 0x18, 0x2c, 0xa1, 0x09,
    //     //     0x46, 0x61, 0x98, 0x09, 0x2e, 0x46, 0x8e, 0x16, 0x1c, 0x68, 0x01, 0x68, 0xa8, 0xcb,
    //     //     0x34, 0xdb, 0x28, 0xc6, 0x26, 0x22, 0xc3, 0x68, 0x20, 0x48, 0x94, 0xdc, 0x14, 0xa4,
    //     //     0x92, 0x22, 0x01, 0x94, 0x02, 0x4e, 0x04, 0x11, 0xc4, 0xc0, 0x83, 0x00, 0x32, 0x38,
    //     //     0x11, 0x14, 0xe2, 0x84, 0x52, 0x30, 0x30, 0x03, 0x96, 0x8b, 0x68, 0x88, 0x70, 0x08,
    //     //     0x18, 0x68, 0xd4, 0x50, 0x06, 0x91, 0x36, 0x02, 0x42, 0x04, 0x81, 0xa4, 0xc3, 0x6a,
    //     //     0x20, 0x08, 0x90, 0x11, 0x91, 0x12, 0x6a, 0x42, 0x91, 0x80, 0xc3, 0x41, 0x53, 0x22,
    //     //     0x41, 0x14, 0xb6, 0x24, 0x52, 0x40, 0x0c, 0x86, 0x83, 0x25, 0x24, 0x08, 0x28, 0x09,
    //     //     0xb6, 0x8a, 0x84, 0xb5, 0x32, 0x36, 0x62, 0x28, 0x43, 0x64, 0x10, 0x1c, 0x82, 0x88,
    //     //     0x24, 0x38, 0x8a, 0x06, 0x4b, 0x2c, 0x58, 0x2a, 0x14, 0x92, 0x85, 0x24, 0x10, 0x96,
    //     //     0x51, 0xc4, 0x13, 0x88, 0x5c, 0x01, 0xb2, 0xc2, 0x36, 0xdc, 0x45, 0x42, 0x0a, 0x37,
    //     //     0x24, 0x88, 0x40, 0x85, 0x04, 0x8b, 0x18, 0x51, 0x2e, 0x18, 0x09, 0x12, 0x48, 0x0c,
    //     //     0x8a, 0x89, 0x86, 0x19, 0x20, 0xda, 0x88, 0xa8, 0x06, 0x03, 0x02, 0x02, 0x1a, 0x68,
    //     //     0x02, 0x03, 0x02, 0x88, 0x00, 0x21, 0x6e, 0x44, 0xc4, 0x44, 0x0b, 0x51, 0x32, 0x8a,
    //     //     0xc5, 0x23, 0x06, 0x46, 0x04, 0x24, 0x48, 0x49, 0x12, 0x01, 0x00, 0xcc, 0x32, 0x0c,
    //     //     0x64, 0x92, 0x00, 0x96, 0x0a, 0x64, 0x9c, 0x4e, 0x06, 0x19, 0x20, 0x58, 0x0c, 0x42,
    //     //     0x41, 0x32, 0xd9, 0x00, 0x4b, 0x69, 0x36, 0x04, 0x36, 0xc1, 0x41, 0x44, 0x61, 0x97,
    //     //     0x21, 0x61, 0x88, 0x2e, 0x38, 0x53, 0xa4, 0xd8, 0x70, 0x38, 0x28, 0x88, 0x93, 0x71,
    //     //     0x23, 0x2e, 0x16, 0x44, 0x22, 0x41, 0x00, 0x25, 0x26, 0x32, 0x92, 0x8e, 0x14, 0x44,
    //     //     0x13, 0x0a, 0x24, 0xd9, 0x89, 0x86, 0x10, 0x30, 0x92, 0x85, 0xc8, 0x86, 0x10, 0xc9,
    //     //     0xc6, 0x21, 0x60, 0x26, 0x4d, 0x93, 0x19, 0x41, 0xd4, 0x45, 0x16, 0x43, 0x44, 0x1b,
    //     //     0x11, 0xc4, 0x0c, 0x30, 0x94, 0x4a, 0x8c, 0x69, 0x36, 0x43, 0x04, 0xcb, 0x26, 0x26,
    //     //     0x69, 0x14, 0x0b, 0x50, 0x00, 0x85, 0xc2, 0xc2, 0x45, 0x03, 0x02, 0x00, 0x44, 0x84,
    //     //     0x18, 0x6c, 0x83, 0x50, 0xa2, 0x1b, 0x24, 0x90, 0x02, 0x28, 0x06, 0x18, 0xa3, 0x44,
    //     //     0x02, 0x08, 0x06, 0xc0, 0x87, 0x11, 0x68, 0xc1, 0x0a, 0x26, 0x53, 0x30, 0x49, 0x48,
    //     //     0x16, 0x9a, 0x32, 0xc8, 0x68, 0xc8, 0x8c, 0x35, 0x19, 0x40, 0x21, 0x29, 0xc4, 0xe4,
    //     //     0xa4, 0x89, 0x50, 0x08, 0x8a, 0x46, 0x8b, 0x88, 0x11, 0x01, 0x84, 0x23, 0x24, 0xe3,
    //     //     0x10, 0x95, 0x51, 0x94, 0xd8, 0x2c, 0x0b, 0x2c, 0xa0, 0x50, 0x38, 0xd3, 0x66, 0x39,
    //     //     0x10, 0x00, 0x49, 0x0a, 0x0a, 0x05, 0x40, 0xc8, 0x98, 0x44, 0x81, 0x99, 0x46, 0x32,
    //     //     0x62, 0x6d, 0x5c, 0x71, 0x04, 0x19, 0x10, 0x99, 0x31, 0x80, 0x51, 0xc0, 0xc0, 0x28,
    //     //     0xcb, 0x69, 0x94, 0x5c, 0x34, 0x11, 0x85, 0xa6, 0x4c, 0x40, 0xdc, 0x52, 0x53, 0x61,
    //     //     0xa6, 0xd4, 0x19, 0x08, 0x49, 0xa2, 0x41, 0x88, 0x5c, 0x0d, 0x22, 0x92, 0x24, 0x98,
    //     //     0x40, 0xcc, 0x71, 0x01, 0x00, 0xa6, 0xc8, 0x52, 0x61, 0x44, 0x40, 0xc0, 0xb8, 0x13,
    //     //     0x80, 0x46, 0x61, 0x00, 0x83, 0x30, 0x00, 0x50, 0x14, 0xa4, 0x38, 0xd0, 0x50, 0x83,
    //     //     0x21, 0x34, 0x63, 0x61, 0x0c, 0x4a, 0x08, 0x5c, 0x30, 0x81, 0x48, 0x22, 0x6d, 0x14,
    //     //     0x90, 0x28, 0x51, 0x91, 0xa2, 0xc2, 0x20, 0x1a, 0x90, 0x42, 0x20, 0x44, 0x52, 0x60,
    //     //     0x19, 0x2d, 0x80, 0x22, 0xc8, 0x43, 0x09, 0x14, 0x80, 0x97, 0x01, 0x4d, 0x18, 0x2c,
    //     //     0x11, 0x1c, 0x23, 0x11, 0x41, 0x84, 0x41, 0x14, 0x0a, 0x32, 0x8c, 0x6c, 0x22, 0x88,
    //     //     0x38, 0x5a, 0x2c, 0x98, 0x88, 0x46, 0x41, 0x4e, 0x09, 0x2d, 0xc0, 0x04, 0x42, 0x53,
    //     //     0x81, 0x48, 0x09, 0x99, 0x18, 0x0a, 0x21, 0x49, 0xa0, 0x02, 0xc0, 0xc0, 0x4c, 0x24,
    //     //     0x82, 0x11, 0x14, 0x60, 0xc8, 0x06, 0x04, 0x93, 0x84, 0x58, 0x86, 0x26, 0x2c, 0x37,
    //     //     0x03, 0x4c, 0xcb, 0x24, 0xb7, 0x10, 0xc6, 0x54, 0x81, 0x94, 0x4c, 0x38, 0x99, 0x49,
    //     //     0xcb, 0x00, 0x06, 0x59, 0xb6, 0x61, 0x49, 0x02, 0x2d, 0x95, 0x20, 0x09, 0x1b, 0x2d,
    //     //     0xc5, 0x12, 0x20, 0x0a, 0x81, 0x18, 0x65, 0x88, 0x63, 0x10, 0x19, 0x2d, 0x26, 0x22,
    //     //     0x33, 0x10, 0x91, 0x82, 0x6d, 0x49, 0x00, 0x02, 0x5b, 0x6c, 0x08, 0x44, 0xa4, 0x82,
    //     //     0x08, 0xa0, 0x69, 0x92, 0xca, 0x90, 0xcc, 0x24, 0xa0, 0x04, 0x40, 0x59, 0x8c, 0x88,
    //     //     0x09, 0x34, 0x93, 0x6c, 0x54, 0x4a, 0x08, 0xe2, 0x43, 0x0a, 0x04, 0x10, 0x60, 0x20,
    //     //     0x8c, 0x71, 0x11, 0x48, 0x35, 0x02, 0xb2, 0x51, 0x6d, 0xb2, 0x08, 0x12, 0xc8, 0x41,
    //     //     0x4c, 0x41, 0x84, 0xe3, 0x05, 0x12, 0x66, 0x48, 0x6c, 0x46, 0x01, 0x84, 0xdb, 0x6d,
    //     //     0x84, 0x49, 0x01, 0x0a, 0x45, 0xc2, 0x24, 0xa0, 0xc8, 0x81, 0xdc, 0x24, 0x04, 0x1b,
    //     //     0x22, 0x51, 0x69, 0x48, 0x4c, 0x42, 0x1a, 0x6e, 0x20, 0x81, 0xa4, 0x43, 0x26, 0xe4,
    //     //     0x25, 0xa0, 0x71, 0x38, 0x91, 0x28, 0x23, 0x62, 0x12, 0x59, 0x32, 0xe0, 0x29, 0x35,
    //     //     0x25, 0x48, 0xe0, 0x65, 0xca, 0x28, 0x24, 0xc2, 0x84, 0x54, 0x70, 0x92, 0x2c, 0x22,
    //     //     0x9b, 0x0d, 0x18, 0x4a, 0x11, 0x24, 0x46, 0xd2, 0x51, 0x08, 0x41, 0x84, 0x63, 0x6a,
    //     //     0xa3, 0x8c, 0x94, 0x5b, 0xa8, 0x83, 0x84, 0x24, 0x51, 0x01, 0x12, 0x68, 0x88, 0x8d,
    //     //     0xa9, 0x01, 0x28, 0x00, 0x6e, 0x40, 0x70, 0x16, 0x58, 0x85, 0x5c, 0x6d, 0xc9, 0x1c,
    //     //     0x32, 0x60, 0x41, 0x14, 0x4d, 0x94, 0xe2, 0x80, 0x50, 0x4c, 0x30, 0x91, 0x46, 0xca,
    //     //     0x01, 0x04, 0x2c, 0x02, 0x8c, 0x2c, 0x9c, 0x08, 0xa4, 0x19, 0x83, 0x0a, 0x28, 0x82,
    //     //     0x2c, 0x32, 0x52, 0x24, 0xc0, 0x30, 0x28, 0xe3, 0x97, 0x21, 0x0a, 0x08, 0x08, 0xb2,
    //     //     0xc0, 0x29, 0x8a, 0x64, 0x43, 0x03, 0x00, 0x98, 0x92, 0x18, 0x28, 0xb8, 0x20, 0x0c,
    //     //     0x10, 0x24, 0x94, 0x61, 0x04, 0x91, 0x04, 0x23, 0x86, 0x46, 0x62, 0x45, 0x44, 0x01,
    //     //     0x20, 0xe4, 0x12, 0x62, 0x0c, 0x24, 0x48, 0xb4, 0xe4, 0x89, 0x20, 0x20, 0xc5, 0x00,
    //     //     0x20, 0x0c, 0x45, 0xa5, 0x30, 0x92, 0x8c, 0x4d, 0x4a, 0x08, 0xc0, 0xe4, 0x84, 0x99,
    //     //     0x70, 0x94, 0x49, 0xb1, 0x1c, 0x88, 0x99, 0x69, 0x90, 0x63, 0x96, 0x11, 0x25, 0x94,
    //     //     0x8c, 0x26, 0x61, 0x00, 0x08, 0x69, 0x84, 0x8b, 0xc2, 0xc0, 0x6c, 0x00, 0x05, 0x38,
    //     //     0x19, 0x60, 0xa4, 0x51, 0x82, 0xd2, 0xa0, 0x21, 0x6c, 0xa0, 0x0e, 0x06, 0x14, 0x90,
    //     //     0xd1, 0x61, 0xa3, 0x10, 0x26, 0x9b, 0x8c, 0x40, 0x0d, 0xb2, 0x89, 0x31, 0xd0, 0x24,
    //     //     0xb6, 0x9c, 0x44, 0x99, 0x6a, 0x12, 0x82, 0x05, 0x13, 0x80, 0xc2, 0x10, 0xa0, 0xe2,
    //     //     0x32, 0x09, 0x0a, 0x30, 0x82, 0x28, 0xe3, 0x70, 0x5c, 0x11, 0xc2, 0x4a, 0x12, 0xd8,
    //     //     0x44, 0xa8, 0x90, 0x98, 0xcc, 0x4a, 0x10, 0x6e, 0x16, 0x1c, 0x08, 0x09, 0x2d, 0xa4,
    //     //     0x10, 0x80, 0x91, 0x84, 0x0c, 0x10, 0x20, 0x60, 0x16, 0x82, 0x44, 0x18, 0x4e, 0x30,
    //     //     0x00, 0x48, 0x49, 0x51, 0x30, 0x5a, 0x24, 0xc2, 0x42, 0x40, 0x06, 0x02, 0x90, 0x61,
    //     //     0x42, 0x88, 0xb0, 0x8a, 0x98, 0x9c, 0x66, 0x40, 0x24, 0x90, 0x01, 0x89, 0xe3, 0x25,
    //     //     0x04, 0x10, 0xa4, 0x00, 0x20, 0xc0, 0x10, 0xb6, 0xe1, 0x71, 0x24, 0x44, 0xc1, 0x13,
    //     //     0xb4, 0x48, 0x2d, 0xc4, 0x6a, 0x02, 0x81, 0x25, 0x0a, 0x00, 0x08, 0x54, 0x84, 0x48,
    //     //     0x00, 0x84, 0x66, 0x48, 0x19, 0x50, 0x04, 0x30, 0xc9, 0x13, 0xa6, 0xd3, 0x65, 0x80,
    //     //     0x84, 0xb2, 0x42, 0x4c, 0x5a, 0x64, 0x17, 0x1a, 0x48, 0xc0, 0x8c, 0x34, 0x4d, 0x88,
    //     //     0x09, 0x65, 0x92, 0x50, 0xc8, 0x53, 0x86, 0x84, 0x05, 0x98, 0x30, 0x16, 0x4b, 0x08,
    //     //     0x18, 0x41, 0x36, 0xdb, 0x05, 0x0c, 0x05, 0x08, 0x84, 0x92, 0x5c, 0x26, 0x52, 0x92,
    //     //     0x15, 0x0c, 0x22, 0x53, 0x6d, 0x40, 0x49, 0x83, 0x20, 0x08, 0x21, 0x10, 0x09, 0x04,
    //     //     0xa9, 0x20, 0x05, 0xb3, 0x32, 0x44, 0xc2, 0x40, 0xdb, 0x45, 0x40, 0x21, 0x16, 0x03,
    //     //     0x81, 0x86, 0x2c, 0xa1, 0x0b, 0x64, 0x64, 0x91, 0x40, 0xc4, 0x46, 0x84, 0x62, 0x48,
    //     //     0x08, 0x82, 0xe2, 0x71, 0xd4, 0x4d, 0x94, 0x88, 0x12, 0x01, 0x08, 0xa6, 0x8d, 0xa2,
    //     //     0x41, 0x8e, 0x54, 0x64, 0x30, 0x12, 0x19, 0x18, 0x31, 0xb4, 0x70, 0xc0, 0x88, 0x0c,
    //     //     0xa1, 0x45, 0x44, 0x64, 0x38, 0x80, 0x6e, 0x38, 0x6d, 0xc0, 0x60, 0x0e, 0x24, 0x32,
    //     //     0x30, 0x5c, 0x17, 0x04, 0x32, 0x06, 0x64, 0x40, 0x91, 0x22, 0xcc, 0x0e, 0x12, 0xd1,
    //     //     0x92, 0x40, 0x61, 0xc2, 0x65, 0xb8, 0x43, 0x8d, 0x5b, 0x66, 0x25, 0x18, 0x42, 0xc4,
    //     //     0x64, 0xc8, 0x62, 0x28, 0xa2, 0x81, 0x83, 0x0c, 0x49, 0x23, 0x46, 0xe4, 0x85, 0x48,
    //     //     0x80, 0xa6, 0x59, 0x02, 0x61, 0x2c, 0xc2, 0x13, 0x10, 0xc9, 0x09, 0xb0, 0x71, 0x09,
    //     //     0x0c, 0x84, 0x41, 0x12, 0x28, 0xd3, 0x92, 0x93, 0x92, 0x14, 0x0c, 0xb4, 0xa1, 0x04,
    //     //     0xe2, 0x99, 0x2b, 0xa2, 0x0b, 0x2e, 0xd3, 0x7d, 0x02, 0x60, 0xcf, 0x9e, 0x0b, 0x48,
    //     //     0xdd, 0x4c, 0x4f, 0x1f, 0x45, 0xa2, 0x88, 0x84, 0xea, 0xfa, 0xa1, 0x12, 0x3b, 0x80,
    //     //     0x93, 0x9b, 0x87, 0x98, 0x62, 0x95, 0x60, 0x28, 0xcb, 0x0e, 0x2d, 0x6d, 0xf0, 0x3a,
    //     //     0xc9, 0x67, 0xca, 0xdc, 0x10, 0xf1, 0xde, 0x7d, 0xf4, 0xa7, 0x4f, 0x9e, 0xbe, 0x41,
    //     //     0x83, 0xe4, 0x29, 0x98, 0x15, 0x5a, 0x9c, 0xee, 0xe9, 0x0e, 0xda, 0xa4, 0x28, 0xfe,
    //     //     0xdd, 0x95, 0x3d, 0xe0, 0x76, 0xd5, 0x13, 0x15, 0x76, 0xcb, 0x82, 0x4f, 0x5a, 0x3a,
    //     //     0x83, 0x50, 0x92, 0x3f, 0xdc, 0xf7, 0x8b, 0x07, 0x90, 0xdd, 0x57, 0xf9, 0x34, 0x85,
    //     //     0xf7, 0xff, 0xfc, 0xa3, 0xa2, 0x37, 0x29, 0x7e, 0xfc, 0xc8, 0xd7, 0x1e, 0xcf, 0xeb,
    //     //     0xfe, 0x79, 0x90, 0x2b, 0x61, 0xef, 0xb4, 0x5b, 0xd1, 0xd4, 0xfe, 0x06, 0x17, 0xea,
    //     //     0xaf, 0xf2, 0x66, 0x0c, 0x59, 0xf1, 0xc3, 0xaf, 0x21, 0x98, 0x56, 0x2c, 0xf1, 0xcd,
    //     //     0x7c, 0x1d, 0x94, 0xc1, 0x31, 0x6b, 0xdd, 0x92, 0x66, 0xe4, 0x54, 0x68, 0x6b, 0x6c,
    //     //     0x21, 0x08, 0x09, 0x09, 0x2f, 0xd0, 0xad, 0x29, 0x55, 0xb0, 0x25, 0xea, 0x4f, 0xa7,
    //     //     0xa0, 0x5c, 0xe4, 0x64, 0xec, 0xf9, 0xff, 0x61, 0x0a, 0x34, 0xd3, 0x8d, 0x79, 0x30,
    //     //     0xb6, 0x35, 0xae, 0x9c, 0x59, 0xae, 0x9b, 0x0c, 0x92, 0xeb, 0x4b, 0xc9, 0xc0, 0x0c,
    //     //     0xca, 0x9e, 0x78, 0xe5, 0xd5, 0xda, 0xd1, 0x0b, 0xc6, 0x4a, 0xca, 0x2c, 0x42, 0x3b,
    //     //     0x2d, 0x89, 0x61, 0xb3, 0xf4, 0x85, 0x29, 0x86, 0xa8, 0xc6, 0xbd, 0xd4, 0xb2, 0x79,
    //     //     0x1b, 0x8f, 0xb9, 0xe9, 0xa5, 0xef, 0xc1, 0xe6, 0xb7, 0xe0, 0xfe, 0xc0, 0xf7, 0x91,
    //     //     0x0c, 0xc5, 0xa3, 0x99, 0x09, 0x1e, 0x3a, 0x33, 0x1d, 0x14, 0x15, 0x4d, 0x76, 0xb8,
    //     //     0x72, 0xf5, 0xdb, 0x66, 0x72, 0xf7, 0xb5, 0x47, 0x7b, 0xf7, 0xc8, 0x4f, 0x90, 0x22,
    //     //     0xc2, 0x03, 0xe8, 0xdb, 0xe6, 0xfe, 0x30, 0x8f, 0xae, 0xc0, 0x4b, 0xb6, 0xfb, 0xb8,
    //     //     0xeb, 0x7c, 0x99, 0xc5, 0x7e, 0x3e, 0xa4, 0x24, 0xcc, 0x83, 0xaa, 0x05, 0x9d, 0x39,
    //     //     0x86, 0xf0, 0x59, 0x1a, 0xf0, 0x39, 0x68, 0x28, 0x4d, 0xf4, 0x95, 0xa6, 0x7e, 0x61,
    //     //     0x51, 0x1f, 0x83, 0xdd, 0x51, 0xab, 0x2a, 0xa5, 0x53, 0x80, 0xa9, 0x22, 0x25, 0x35,
    //     //     0x63, 0x53, 0x47, 0x5d, 0xbc, 0x7b, 0xde, 0xe8, 0x3a, 0xed, 0x07, 0xff, 0x19, 0xaa,
    //     //     0xb4, 0x77, 0xfd, 0x35, 0xdd, 0x09, 0xaf, 0xec, 0x61, 0xa1, 0xff, 0x60, 0x0b, 0x9a,
    //     //     0x7c, 0xf8, 0x0d, 0x0d, 0xa5, 0x18, 0x69, 0x5d, 0xce, 0xb2, 0x9d, 0x3d, 0x62, 0xb2,
    //     //     0x09, 0xcc, 0xbb, 0x45, 0x40, 0x5a, 0xc5, 0x63, 0x0e, 0x57, 0x36, 0x5b, 0xaa, 0x8d,
    //     //     0x42, 0x71, 0x20, 0xa7, 0xe3, 0x93, 0x70, 0xb7, 0x6e, 0x59, 0x92, 0x3a, 0xcc, 0x39,
    //     //     0xef, 0xec, 0xf9, 0xb0, 0xd1, 0x35, 0x72, 0xeb, 0xf0, 0xa1, 0x62, 0xd0, 0xd1, 0x82,
    //     //     0x5b, 0xc7, 0x99, 0x3a, 0x6e, 0x1d, 0x3d, 0x0c, 0x36, 0x0e, 0x10, 0x5a, 0x08, 0x7b,
    //     //     0x85, 0xca, 0xba, 0x43, 0x59, 0x8e, 0x4e, 0x9a, 0xfa, 0x14, 0xf8, 0x74, 0x03, 0x55,
    //     //     0x20, 0xfb, 0xe1, 0x49, 0x53, 0x35, 0xf5, 0xd5, 0x87, 0x14, 0x1f, 0x50, 0x72, 0xa5,
    //     //     0xd1, 0x43, 0x16, 0x3f, 0x2b, 0x33, 0x69, 0x60, 0x70, 0x0d, 0x67, 0xb1, 0x1a, 0x12,
    //     //     0x79, 0xc7, 0xcf, 0xb5, 0xf6, 0x7a, 0x6d, 0x13, 0xfc, 0x04, 0x31, 0xc7, 0x98, 0x5d,
    //     //     0xf3, 0x69, 0xa8, 0x16, 0xb7, 0xe0, 0x62, 0x00, 0xd9, 0xbb, 0x6e, 0xd9, 0xa4, 0xdd,
    //     //     0x3e, 0x2d, 0x2e, 0xe8, 0x25, 0x72, 0x6b, 0x0d, 0x00, 0x1d, 0xcc, 0xea, 0x89, 0x6e,
    //     //     0x6e, 0x12, 0x36, 0x67, 0x4c, 0x03, 0xfe, 0x55, 0xbe, 0x0c, 0xf4, 0x24, 0x01, 0x3e,
    //     //     0x18, 0xa0, 0xc8, 0xb3, 0xd7, 0xe4, 0xb0, 0x4e, 0x41, 0x84, 0x75, 0x13, 0x90, 0x67,
    //     //     0xb0, 0x45, 0x5c, 0x0c, 0x4c, 0x76, 0x65, 0xa1, 0x3d, 0x09, 0x17, 0x04, 0x87, 0x97,
    //     //     0x6e, 0x64, 0xef, 0xbe, 0x3f, 0xa6, 0x7c, 0x15, 0x14, 0x6a, 0xf4, 0x4f, 0x9c, 0x82,
    //     //     0x58, 0xdc, 0xe3, 0xd7, 0x22, 0x17, 0x5f, 0x96, 0xc1, 0xd2, 0xe4, 0x14, 0x59, 0xe1,
    //     //     0x5c, 0x3c, 0x55, 0xdd, 0xb6, 0xd8, 0x4e, 0xc0, 0xa0, 0x62, 0xbe, 0x7c, 0xaa, 0x4d,
    //     //     0x28, 0x30, 0xb4, 0x12, 0x8d, 0x27, 0xd5, 0x0f, 0x27, 0xbf, 0xe0, 0x3b, 0x07, 0xd5,
    //     //     0xbd, 0x21, 0x68, 0xd9, 0xf9, 0x19, 0x86, 0x08, 0xe1, 0x76, 0xa7, 0xff, 0xa5, 0xbf,
    //     //     0x5a, 0xaf, 0x60, 0x48, 0x42, 0x0b, 0x01, 0xce, 0x56, 0xac, 0x6b, 0x76, 0x35, 0x9c,
    //     //     0x55, 0x78, 0x8e, 0x94, 0x9e, 0xaa, 0xc2, 0x75, 0x3b, 0xba, 0xe1, 0xd9, 0x15, 0x8b,
    //     //     0x00, 0x4f, 0x33, 0x37, 0xd1, 0x43, 0x1e, 0x11, 0x23, 0x95, 0x59, 0x59, 0x58, 0x05,
    //     //     0x9f, 0x9c, 0xa1, 0x66, 0xae, 0x55, 0xc6, 0xca, 0xa7, 0xb5, 0x56, 0xe0, 0xac, 0x3c,
    //     //     0x9d, 0x93, 0x5a, 0xce, 0x62, 0x76, 0x5a, 0x90, 0x12, 0xec, 0xdd, 0x1d, 0x9b, 0xdf,
    //     //     0x7e, 0xa7, 0xa4, 0xdc, 0x36, 0x25, 0x87, 0x01, 0xb6, 0x1b, 0x3d, 0x79, 0xa8, 0x43,
    //     //     0xcf, 0xf3, 0xf2, 0xfc, 0x01, 0xb2, 0xbb, 0x10, 0x90, 0x8b, 0x74, 0x19, 0x6e, 0x83,
    //     //     0x5d, 0x3a, 0xa7, 0x7a, 0x47, 0xfb, 0xf3, 0x19, 0xd9, 0x07, 0xeb, 0xaa, 0x98, 0xa9,
    //     //     0x29, 0x69, 0xe3, 0xcb, 0x8f, 0x05, 0x9d, 0x64, 0xc8, 0xd6, 0x2a, 0xd8, 0xe6, 0xa2,
    //     //     0xdc, 0x7c, 0xf1, 0x98, 0x97, 0xa2, 0x7c, 0x12, 0x35, 0xe9, 0xd1, 0xb7, 0x64, 0xb2,
    //     //     0x01, 0xb7, 0x07, 0x5c, 0xd5, 0xcf, 0x7e, 0x64, 0x04, 0xea, 0xf9, 0x0f, 0x30, 0x26,
    //     //     0x9c, 0x26, 0xab, 0x88, 0xe3, 0x29, 0x07, 0x7f, 0x0f, 0x52, 0x62, 0xe1, 0x71, 0x61,
    //     //     0x0a, 0xa1, 0xb6, 0xfc, 0x87, 0xa7, 0x0a, 0xc3, 0x83, 0xb6, 0x89, 0x8a, 0x05, 0x70,
    //     //     0x28, 0xf5, 0x49, 0xc8, 0x1e, 0xc6, 0xfa, 0xe6, 0xd4, 0xe9, 0x0a, 0x92, 0x7d, 0xc2,
    //     //     0x3b, 0x76, 0xea, 0xb0, 0x5e, 0x87, 0xc4, 0xdb, 0x19, 0x51, 0x22, 0x56, 0x14, 0xb6,
    //     //     0xd7, 0x47, 0x78, 0x3c, 0x2e, 0x90, 0xc5, 0xc1, 0xc1, 0x01, 0xdc, 0x14, 0x35, 0xd8,
    //     //     0x12, 0x75, 0x3e, 0x6f, 0x83, 0x37, 0xbc, 0x73, 0xd3, 0x99, 0x6b, 0xa2, 0x9b, 0x7a,
    //     //     0x43, 0xca, 0x08, 0xe5, 0x4a, 0xe6, 0x3f, 0x06, 0xef, 0xbf, 0xef, 0x98, 0x46, 0x5b,
    //     //     0x29, 0xfd, 0x58, 0xbd, 0xbb, 0x5d, 0xbc, 0xd1, 0x04, 0x72, 0x83, 0x86, 0xd7, 0x04,
    //     //     0xf9, 0x69, 0x13, 0xdb, 0xc7, 0x73, 0x82, 0x3c, 0x9c, 0xfd, 0x5e, 0xb4, 0xe8, 0xc8,
    //     //     0x81, 0x53, 0xd6, 0xa0, 0x2a, 0x10, 0xa4, 0x16, 0x49, 0x1e, 0xba, 0x01, 0x48, 0x1a,
    //     //     0x7e, 0xd4, 0x99, 0x73, 0x8a, 0xb0, 0x56, 0xc9, 0x26, 0xb3, 0x90, 0x37, 0x5a, 0x98,
    //     //     0xae, 0xe3, 0x67, 0xff, 0x00, 0xee, 0x53, 0x20, 0x19, 0x65, 0xe6, 0x57, 0x8a, 0x52,
    //     //     0xc3, 0x6c, 0xeb, 0x16, 0xb1, 0x28, 0xd6, 0x47, 0xed, 0x7f, 0x81, 0x05, 0x7a, 0x47,
    //     //     0x7a, 0xf2, 0xb5, 0x72, 0x3f, 0xc6, 0xc0, 0x60, 0x64, 0xe0, 0xb9, 0x4a, 0x80, 0x60,
    //     //     0xfe, 0x19, 0xd2, 0x44, 0xd6, 0x1c, 0xd5, 0x82, 0x75, 0x0d, 0x0e, 0x8b, 0x5d, 0x59,
    //     //     0xaf, 0xc4, 0x9b, 0xdf, 0xe0, 0x66, 0xa3, 0x83, 0x32, 0xc7, 0x92, 0x3d, 0x6d, 0x6f,
    //     //     0xd9, 0xa0, 0x5c, 0xfb, 0x13, 0x80, 0x53, 0x47, 0x00, 0x6e, 0x98, 0xd7, 0x0b, 0x79,
    //     //     0x0c, 0xac, 0xbb, 0x83, 0x21, 0xb1, 0x2b, 0xab, 0x42, 0x20, 0x71, 0x9d, 0x04, 0x74,
    //     //     0xc2, 0x63, 0x65, 0xe8, 0x24, 0x25, 0x29, 0x2d, 0xaa, 0xa3, 0xd7, 0xa9, 0xf5, 0xbe,
    //     //     0xd4, 0x36, 0x80, 0x94, 0xf9, 0x58, 0x0c, 0x2c, 0x5b, 0xcb, 0xb8, 0x64, 0x1a, 0x79,
    //     //     0x37, 0x5a, 0x45, 0x5e, 0x5f, 0xa2, 0x7c, 0x14, 0x8d, 0x9f, 0x27, 0x49, 0x5f, 0x8d,
    //     //     0x75, 0xa7, 0x9b, 0xc8, 0x3c, 0x26, 0xda, 0x56, 0xbc, 0xe3, 0x2e, 0x3b, 0x78, 0xc2,
    //     //     0x4a, 0xc3, 0x0b, 0xc6, 0xa2, 0xa5, 0x14, 0x26, 0xac, 0x1b, 0xe9, 0x47, 0xa1, 0x3c,
    //     //     0xce, 0x7c, 0x4c, 0xb4, 0x10, 0x2c, 0x5d, 0x26, 0x2a, 0x2e, 0x45, 0xbf, 0x8b, 0x2f,
    //     //     0xbe, 0x4f, 0xed, 0xcb, 0xcd, 0x22, 0x59, 0xf0, 0x4b, 0xf1, 0x7c, 0x9f, 0xcd, 0x61,
    //     //     0xc9, 0x57, 0x15, 0x87, 0xce, 0x02, 0xef, 0x8d, 0x76, 0xd4, 0x0a, 0x41, 0x19, 0x47,
    //     //     0xcd, 0xc4, 0x97, 0xa9, 0x78, 0x14, 0x35, 0x50, 0xeb, 0x2d, 0x20, 0x4f, 0x4a, 0x6a,
    //     //     0x75, 0x0d, 0x1f, 0xdb, 0xc4, 0xd2, 0x09, 0xde, 0xdb, 0x01, 0x06, 0x61, 0xeb, 0x15,
    //     //     0xde, 0x9b, 0x48, 0x41, 0x67, 0xdc, 0x15, 0xff, 0x64, 0x46, 0xfe, 0x5e, 0x21, 0x21,
    //     //     0xab, 0x16, 0x8f, 0x2a, 0xe9, 0xd2, 0x29, 0x61, 0x9d, 0x28, 0xf2, 0xd6, 0x52, 0x70,
    //     //     0x4b, 0x51, 0x16, 0x88, 0x01, 0xb2, 0x64, 0xb6, 0x86, 0x97, 0x6b, 0x46, 0xbf, 0xe2,
    //     //     0x9f, 0x16, 0x3b, 0x1d, 0xb7, 0x8b, 0x0a, 0x9c, 0x64, 0x7b, 0xa7, 0x28, 0x48, 0x01,
    //     //     0xd9, 0x63, 0x36, 0x2c, 0xb2, 0xb5, 0x94, 0x4a, 0xbf, 0x93, 0x1b, 0x07, 0x81, 0x6f,
    //     //     0x8d, 0x1b, 0x38, 0x61, 0x48, 0x7c, 0xac, 0xb1, 0xe9, 0x09, 0x0d, 0x55, 0xc4, 0x89,
    //     //     0xab, 0xcd, 0x09, 0x86, 0x1f, 0x07, 0x0d, 0xc7, 0x1e, 0x43, 0x28, 0x45, 0x8f, 0x3f,
    //     //     0x48, 0xe1, 0x79, 0xe3, 0xd4, 0xc5, 0xdd, 0x80, 0xbb, 0x15, 0x78, 0x73, 0xaa, 0x0b,
    //     //     0x54, 0xdb, 0xf0, 0x6c, 0x0f, 0x76, 0x79, 0x16, 0x59, 0x24, 0x7c, 0x78, 0x35, 0x67,
    //     //     0x80, 0xf9, 0xc0, 0x54, 0x80, 0x0a, 0xa0, 0xc3, 0x86, 0x49, 0xc7, 0xbb, 0x6a, 0x94,
    //     //     0x78, 0xb5, 0x44, 0xce, 0x7e, 0x51, 0x46, 0x04, 0x64, 0xcf, 0xa5, 0x18, 0xcb, 0x13,
    //     //     0xd9, 0xcf, 0x71, 0xbd, 0x0d, 0x74, 0xcd, 0xc8, 0xc0, 0x47, 0xc5, 0xef, 0x05, 0x5d,
    //     //     0xde, 0x0b, 0x10, 0xab, 0x98, 0xdd, 0x46, 0x96, 0x1d, 0x26, 0x0d, 0x6f, 0x64, 0xcf,
    //     //     0xbc, 0xb8, 0xf3, 0x87, 0x4d, 0x9a, 0xd6, 0xcb, 0x9d, 0x64, 0x52, 0x17, 0xdc, 0x9e,
    //     //     0x20, 0xe8, 0xe2, 0x5a, 0x1a, 0x32, 0x1b, 0x00, 0x59, 0x33, 0x58, 0xa2, 0xe3, 0xfd,
    //     //     0x98, 0x0c, 0xae, 0x0b, 0x29, 0x25, 0x62, 0xa2, 0xc3, 0x8f, 0x10, 0x7d, 0x90, 0x13,
    //     //     0x11, 0x73, 0x1f, 0x32, 0x0b, 0x96, 0xbe, 0x9e, 0xdd, 0x37, 0x59, 0x7f, 0x88, 0xd8,
    //     //     0xa2, 0x55, 0xb6, 0x59, 0x1e, 0x0f, 0x4f, 0x01, 0xd3, 0x38, 0xe4, 0x6d, 0xcd, 0x75,
    //     //     0x6b, 0xe3, 0x3a, 0x5d, 0x6f, 0xaf, 0xd9, 0xc1, 0x03, 0x88, 0x89, 0x68, 0xae, 0xcf,
    //     //     0xc2, 0xc3, 0xc8, 0x13, 0xaf, 0x3b, 0x2e, 0xe5, 0xae, 0xef, 0x15, 0x26, 0xc8, 0x12,
    //     //     0x52, 0xf7, 0x62, 0x17, 0xc3, 0x7e, 0xef, 0xa5, 0x27, 0xa0, 0xc1, 0x30, 0x1b, 0xf7,
    //     //     0x21, 0xa1, 0x59, 0xcd, 0x77, 0x0d, 0x5c, 0xac, 0xb7, 0xdc, 0xa0, 0xa5, 0xe2, 0x70,
    //     //     0xd3, 0xce, 0xd8, 0xa0, 0xda, 0x22, 0x21, 0x9d, 0x4c, 0xdd, 0x7a, 0xc4, 0x0e, 0xa5,
    //     //     0x34, 0x29, 0xe3, 0x65, 0xfc, 0x92, 0x6d, 0x48, 0x5d, 0x3c, 0xf8, 0x18, 0x4e, 0x2d,
    //     //     0x16, 0x96, 0xf9, 0xb3, 0xac, 0x4f, 0x24, 0x75, 0x82, 0x62, 0xc7, 0x21, 0x3d, 0x5c,
    //     //     0x30, 0x2b, 0xef, 0xd9, 0x28, 0x5c, 0x8a, 0xca, 0x51, 0x54, 0xa3, 0x86, 0x72, 0xbe,
    //     //     0x19, 0x64, 0xca, 0x93, 0x8f, 0xde, 0xbd, 0xa6, 0xb5, 0x39, 0xad, 0x6c, 0xdc, 0x32,
    //     //     0x70, 0xdd, 0x6d, 0xa1, 0x76, 0x34, 0xc7, 0xfe, 0x43, 0xd5, 0x79, 0xa7, 0xa7, 0x9d,
    //     //     0x7a, 0xdb, 0xb5, 0xe6, 0xb4, 0x57, 0x49, 0xdd, 0x34, 0x47, 0x13, 0xb2, 0xa7, 0xb2,
    //     //     0xe9, 0x25, 0x29, 0x58, 0x3b, 0x03, 0x57, 0x2a, 0x32, 0x0a, 0x6f, 0x10, 0xd2, 0x71,
    //     //     0x90, 0x69, 0x0d, 0xb7, 0x06, 0x88, 0x11, 0x8d, 0xcf, 0x88, 0xa8, 0xfa, 0x4e, 0x6b,
    //     //     0xe9, 0x9a, 0x42, 0x7d, 0x73, 0xc2, 0xbd, 0xc6, 0x7a, 0x6a, 0xfc, 0xe1, 0x66, 0xfc,
    //     //     0x50, 0x76, 0x36, 0x88, 0x97, 0x52, 0x38, 0x9d, 0x4d, 0x83, 0xc1, 0x05, 0xcf, 0x22,
    //     //     0x6e, 0x71, 0x76, 0x35, 0xaa, 0xff, 0xd3, 0xc8, 0xd6, 0xbd, 0x84, 0x9a, 0xfa, 0xbb,
    //     //     0xec, 0xfd, 0x83, 0x37, 0x57, 0x2f, 0xf6, 0xb7, 0x88, 0xb1, 0xb4, 0xc6, 0x65, 0xc0,
    //     //     0x61, 0x7c, 0x9e, 0xa4, 0xba, 0x01, 0x0b, 0x4f, 0x98, 0x6f, 0x7d, 0x44, 0x87, 0xfc,
    //     //     0xec, 0xa9, 0xb7, 0xf4, 0x7f, 0x95, 0x5d, 0x8e, 0xff, 0xfd, 0xc6, 0xcc, 0x24, 0x67,
    //     //     0x1d, 0xb0, 0xbc, 0xe4, 0x94, 0x42, 0x2f, 0x1a, 0xd7, 0x68, 0xd4, 0x39, 0x63, 0x32,
    //     //     0x57, 0x81, 0x38, 0xdb, 0x89, 0xf5, 0xc6, 0x23, 0xe2, 0x55, 0xbc, 0x30, 0x23, 0xdf,
    //     //     0x41, 0x65, 0x1b, 0xd3, 0x75, 0x1c, 0x30, 0x99, 0x16, 0x53, 0x20, 0xd6, 0xd5, 0xe9,
    //     //     0x56, 0x2f, 0x07, 0xb0, 0x56, 0x9e, 0x5c, 0x8a, 0xe9, 0x06, 0x63, 0xcd, 0x02, 0x1a,
    //     //     0x5c, 0x8b, 0x87, 0x48, 0xc1, 0x2e, 0xe3, 0x6c, 0x42, 0x61, 0x7d, 0xce, 0x7b, 0x45,
    //     //     0x14, 0x40, 0x23, 0x04, 0x09, 0x65, 0xfd, 0xe4, 0x58, 0xff, 0xfb, 0xad, 0x01, 0xab,
    //     //     0x7f, 0x60, 0xa1, 0x56, 0x69, 0x2b, 0x3f, 0xdd, 0x1d, 0x5b, 0xd4, 0x70, 0xb8, 0x8e,
    //     //     0x80, 0xb3, 0x3d, 0x1f, 0x6d, 0x3a, 0xe5, 0x22, 0xd2, 0x2b, 0x7d, 0x65, 0x1a, 0xae,
    //     //     0x7a, 0x33, 0x5d, 0x7b, 0xd3, 0xe6, 0x56, 0xc8, 0x82, 0xd1, 0x27, 0x88, 0x88, 0x82,
    //     //     0x43, 0x0d, 0xa4, 0x3c, 0xab, 0x33, 0x47, 0x71, 0x6d, 0x6b, 0x64, 0xaf, 0xe3, 0x23,
    //     //     0x05, 0xd7, 0x8e, 0x1a, 0xcd, 0x63, 0x70, 0xd4, 0x37, 0x22, 0xb9, 0x68, 0xdf, 0x9d,
    //     //     0xa9, 0x47, 0x5d, 0x25, 0xe4, 0xcc, 0x1f, 0xd3, 0xe3, 0x55, 0x43, 0xd8, 0xbe, 0x04,
    //     //     0x65, 0x13, 0x62, 0xfc, 0x2b, 0xf2, 0xd1, 0xe9, 0x9c, 0x2d, 0x95, 0xe3, 0x1c, 0xf2,
    //     //     0x67, 0xe2, 0xe7, 0x31, 0x9d, 0x40, 0xc2, 0xb3, 0x7d, 0x45, 0x7d, 0x5a, 0xf0, 0xc6,
    //     //     0x7b, 0x83, 0xad, 0xc1, 0xae, 0xd3, 0x6c, 0x7c, 0x19, 0x15, 0x4a, 0x22, 0x3f, 0x25,
    //     //     0x23, 0x39, 0xe6, 0x0f, 0x8c, 0x61, 0xb7, 0x82, 0x1c, 0x20, 0xa4, 0x58, 0xea, 0xcd,
    //     //     0x33, 0x79, 0x77, 0x0b, 0x5b, 0xe1, 0x0e, 0x6c, 0x66, 0x98, 0x74, 0x3a, 0x81, 0x4a,
    //     //     0x49, 0x58, 0x50, 0xb5, 0x36, 0xce, 0xf1, 0x3e, 0xa1, 0x48, 0x7d, 0x4e, 0xfb, 0x85,
    //     //     0xe3, 0x35, 0x36, 0xc8, 0x62, 0x1a, 0x8b, 0x12, 0x56, 0xbc, 0xbc, 0x1f, 0x60, 0xb2,
    //     //     0xec, 0x10, 0xc5, 0x06, 0xa2, 0xbe, 0x1e, 0xb3, 0xfe, 0x1a, 0x3e, 0x4a, 0xa7, 0x70,
    //     //     0xe3, 0xcb, 0xf1, 0x44, 0x4e, 0x57, 0x74, 0x26, 0x2b, 0x34, 0x19, 0x99, 0xd5, 0x0d,
    //     //     0xa9, 0x5b, 0x48, 0x83, 0xd6, 0xb0, 0xfc, 0xb5, 0x36, 0x88, 0x45, 0x2f, 0x9d, 0x6c,
    //     //     0xf4, 0x36, 0x34, 0x48, 0x37, 0x0b, 0x3f, 0x0b, 0xc1, 0xc8, 0x4a, 0xe8, 0x8b, 0x29,
    //     //     0x30, 0xed, 0xd5, 0x94, 0x18, 0x9d, 0x0c, 0x2d, 0x9a, 0x28, 0x96, 0x9c, 0x78, 0xd8,
    //     //     0x5c, 0xae, 0x56, 0x85, 0x7e, 0xf0, 0x20, 0x96, 0xab, 0x56, 0x90, 0x42, 0x51, 0x99,
    //     //     0x22, 0x67, 0xfc, 0x2f, 0x5b, 0xb9, 0xb8, 0x73, 0xc2, 0x08, 0xd8, 0x56, 0xae, 0x2f,
    //     //     0xab, 0x0e, 0xfe, 0x72, 0x04, 0x0b, 0x8c, 0xd0, 0xf2, 0x2b, 0xea, 0x2b, 0xaa, 0xae,
    //     //     0x72, 0xe3, 0xfe, 0x40, 0x02, 0x4f, 0x5d, 0xcf, 0x98, 0xd7, 0xa2, 0x31, 0xeb, 0xd7,
    //     //     0x68, 0xce, 0x9a, 0x2b, 0x57, 0xe0, 0x1f, 0x5b, 0xab, 0x12, 0xb2, 0x77, 0x4e, 0x40,
    //     //     0xe9, 0xe2, 0xd5, 0xe7, 0x9a, 0x94, 0xab, 0x98, 0x15, 0x68, 0x88, 0x97, 0xfe, 0x0e,
    //     //     0x75, 0x2d, 0x0b, 0x49, 0xa6, 0x8e, 0x25, 0x79, 0xd5, 0x15, 0x69, 0xff, 0x9c, 0x6c,
    //     //     0x09, 0x39, 0xd9, 0x3e, 0xc7, 0x3e, 0x8c, 0x0c, 0xe9, 0xd9, 0x5c, 0x67, 0xf4, 0xd8,
    //     //     0x61, 0xe1, 0x44, 0x9f, 0x6c, 0xf3, 0xa8, 0xad, 0xb2, 0x6f, 0xbe, 0x86, 0xd6, 0x83,
    //     //     0x60, 0x65, 0x3d, 0xca, 0x69, 0x04, 0x63, 0x51, 0x71, 0x5a, 0xbb, 0x7e, 0xda, 0xe1,
    //     //     0x1f, 0x22, 0xee, 0x4b, 0x96, 0xe7, 0x9a, 0x6f, 0xba, 0x5b, 0x00, 0x01, 0xae, 0xf5,
    //     //     0x99, 0x91, 0x28, 0x1c, 0x42, 0xbe, 0xd8, 0xed, 0xfe, 0xfb, 0x62, 0xaf, 0x8f, 0xc4,
    //     //     0x5b, 0x79, 0x95, 0x52, 0x3f, 0x9e, 0xfa, 0x89, 0xf6, 0x16, 0x68, 0x19, 0xe7, 0xc8,
    //     //     0xd4, 0x29, 0x48, 0x77, 0x5a, 0xc6, 0x09, 0x7a, 0x32, 0x4f, 0x83, 0x3f, 0x68, 0x5a,
    //     //     0x61, 0x9d, 0x41, 0x11, 0x6e, 0x7d, 0x05, 0x25, 0x25, 0x56, 0x8c, 0x69, 0x0a, 0x92,
    //     //     0x3a, 0x0d, 0x5f, 0x65, 0x51, 0x28, 0x2e, 0xea, 0x8f, 0x6c, 0x6e, 0x8d, 0xef, 0xee,
    //     //     0xa0, 0xc1, 0xe9, 0xb4, 0x85, 0xc1, 0xdd, 0x37, 0x23, 0x56, 0x77, 0x29, 0x52, 0x8e,
    //     //     0x27, 0x26, 0xcc, 0x16, 0x54, 0x75, 0xb7, 0xc8, 0x0e, 0xbb, 0xcb, 0x2c, 0x6a, 0x25,
    //     //     0x55, 0x9e, 0x7c, 0x8e, 0xa6, 0x2f, 0x02, 0x2c, 0xd4, 0xc9, 0xa7, 0x34, 0x18, 0x94,
    //     //     0x7e, 0x31, 0x1c, 0xa7, 0xfc, 0x6e, 0x00, 0x16, 0x4e, 0xde, 0xb1, 0x44, 0xcb, 0xf3,
    //     //     0x30, 0x11, 0xad, 0x78, 0x18, 0x8a, 0x8e, 0xe7, 0xaf, 0xd0, 0x06, 0x55, 0xb5, 0x41,
    //     //     0xce, 0xc6, 0xaf, 0xee, 0xd3, 0x1d, 0xdc, 0x34, 0x4a, 0x68, 0x34, 0x02, 0x49, 0x22,
    //     //     0x8c, 0x35, 0xcb, 0x46, 0xce, 0xda, 0x2b, 0x6a, 0xdd, 0xd0, 0x31, 0xcf, 0xca, 0xd3,
    //     //     0x2a, 0xb6, 0x08, 0x85, 0x15, 0x23, 0x10, 0x89, 0x64, 0xc9, 0xd2, 0x10, 0x72, 0xd3,
    //     //     0xde, 0x89, 0x8e, 0xf3, 0xea, 0x7a, 0x3e, 0x8f, 0x50, 0x62, 0x24, 0xb4, 0x9a, 0x4c,
    //     //     0x9e, 0x3f, 0xf1, 0x3f, 0x4a, 0xa9, 0xf5, 0xb4, 0x0f, 0x86, 0x95, 0x83, 0xf0, 0x91,
    //     //     0x26, 0xcb, 0x2a, 0x1e, 0x9d, 0x31, 0x36, 0x3c, 0x89, 0xe6, 0xce, 0xec, 0xbc, 0x3f,
    //     //     0x2b, 0x7e, 0x57, 0xf2, 0x06, 0x06, 0xb5, 0x75, 0x7f, 0xc5, 0x58, 0xfc, 0x26, 0x9f,
    //     //     0x89, 0xd6, 0xff, 0x8e, 0xda, 0x7a, 0xee, 0xfd, 0xcf, 0x85, 0x4e, 0x8d, 0xe5, 0x44,
    //     //     0x32, 0x6c, 0xb3, 0xee, 0xd8, 0x11, 0xc1, 0x10, 0xcb, 0x88, 0xd5, 0x9a, 0x81, 0xaa,
    //     //     0xbf, 0x8c, 0x0c, 0x24, 0x18, 0x88, 0x2a, 0x31, 0x22, 0x9f, 0xfd, 0x72, 0xf1, 0x3f,
    //     //     0x53, 0xc4, 0x83, 0x94, 0x0c, 0xa5, 0x48, 0x53, 0x91, 0xd5, 0x5f, 0x22, 0x35, 0xd4,
    //     //     0x68, 0x05, 0x1a, 0xec, 0x65, 0xfd, 0x30, 0x76, 0x6e, 0x3b, 0xc6, 0x4b, 0x8e, 0x90,
    //     //     0x9b, 0x43, 0xfd, 0x97, 0xbd, 0x0f, 0x23, 0xf6, 0x97, 0xa9, 0x08, 0x66, 0x40, 0xa2,
    //     //     0x3e, 0x67, 0xa9, 0x89, 0x2f, 0x09, 0x5b, 0x06, 0x3d, 0x67, 0x1b, 0xcd, 0x88, 0xc9,
    //     //     0x6c, 0xee, 0x0e, 0x4f, 0x8b, 0x94, 0xec, 0x39, 0xfe, 0xee, 0xf7, 0x81, 0xc3, 0x2e,
    //     //     0x1b, 0xd2, 0x37, 0x93, 0x6a, 0x56, 0x68, 0x40, 0x4e, 0xac, 0x09, 0x05, 0x6d, 0xf0,
    //     //     0x5b, 0xd8, 0x67, 0xfd, 0x86, 0x56, 0x69, 0xf0, 0x03, 0x3d, 0x21, 0x10, 0x43, 0x5b,
    //     //     0xe4, 0xfc, 0x9f, 0xfd, 0x9e, 0xd5, 0x47, 0x4a, 0x19, 0xf7, 0x3f, 0x02, 0xea, 0xd1,
    //     //     0xdd, 0x50, 0x52, 0x01, 0x7e, 0x6b, 0xd2, 0xfa, 0x1c, 0x78, 0x4a, 0xef, 0x9d, 0xf9,
    //     //     0xc1, 0x87, 0xf8, 0xbc, 0x8b, 0xb5, 0xbc, 0x89, 0x20, 0x49, 0x51, 0xa4, 0x1f, 0x68,
    //     //     0x1c, 0xbc, 0xbf, 0x35, 0x6c, 0xec, 0xcf, 0x80, 0xd9, 0x91, 0x58, 0x88, 0xb4, 0xa6,
    //     //     0x95, 0x35, 0x19, 0x2a, 0x0e, 0xf6, 0xad, 0x13, 0x68, 0xea, 0xe9, 0xbc, 0xdb, 0x5e,
    //     //     0x8f, 0xc6, 0x10, 0xf1, 0xc3, 0xc7, 0xa8, 0x55, 0xc7, 0xe5, 0xbc, 0x11, 0xe5, 0x1e,
    //     //     0xfa, 0xbf, 0x67, 0x53, 0xde, 0x6f, 0x1f, 0x3c, 0x61, 0xe7, 0x2a, 0x2d, 0xc9, 0xf5,
    //     //     0x97, 0x28, 0xee, 0x8c, 0x87, 0x2f, 0x25, 0x7c, 0xa9, 0x35, 0x22, 0x2d, 0x2e, 0x5c,
    //     //     0x53, 0xd4, 0x64, 0x6e, 0x13, 0x1d, 0xc9, 0xf2, 0x56, 0x66, 0xa6, 0x4e, 0x86, 0xa2,
    //     //     0x9c, 0x56, 0xe6, 0xb3, 0x60, 0x5e, 0xc7, 0x91, 0xb5, 0x46, 0xa5, 0x92, 0x43, 0x49,
    //     //     0x5d, 0x36, 0x51, 0x18, 0xe1, 0x2d, 0x95, 0x4a, 0xde, 0x14, 0xc5, 0x65, 0x87, 0xf9,
    //     //     0x8b, 0x90, 0xf2, 0x34, 0x95, 0xb3, 0xf5, 0xb3, 0x0a, 0x57, 0x93, 0xe4, 0x09, 0xe4,
    //     //     0xce, 0x75, 0xe6, 0x95, 0x44, 0x3c, 0x90, 0x96, 0x1c, 0xff, 0x05, 0x3f, 0x63, 0x01,
    //     //     0x67, 0x80, 0x8d, 0x97, 0xd3, 0xa8, 0xc2, 0x65, 0x05, 0x5c, 0x57, 0x67, 0xca, 0x97,
    //     //     0xc5, 0xa0, 0x23, 0x07, 0xed, 0x73, 0x63, 0x82, 0xe4, 0x35, 0x1b, 0xd7, 0x92, 0xbb,
    //     //     0xcb, 0xd8, 0x28, 0x0d, 0x94, 0x72, 0x01, 0x19, 0x65, 0x43, 0xbb, 0xe2, 0x84, 0x3c,
    //     //     0x5d, 0xa4, 0x68, 0xb6, 0xc5, 0x19, 0x01, 0x4a, 0xc0, 0xc4, 0x4e, 0xec, 0x1b, 0xc1,
    //     //     0x22, 0xf5, 0x7c, 0x10, 0xc4, 0xc3, 0x5e, 0x45, 0xc4, 0xfd, 0xb9, 0xf0, 0xfc, 0xa8,
    //     //     0xa9, 0x3b, 0x86, 0xe9, 0x8e, 0xea, 0x12, 0x82, 0xd4, 0xe9, 0x4d, 0x56, 0x88, 0xa4,
    //     //     0x44, 0x10, 0xa3, 0xaf, 0x53, 0xde, 0x1a, 0xbf, 0x31, 0x71, 0x2b, 0x7d, 0x51, 0x03,
    //     //     0x75, 0x3d, 0xb3, 0xf2, 0x6b, 0xc9, 0x96, 0xd1, 0x7c, 0xb4, 0xe5, 0x3f, 0x00, 0xaa,
    //     //     0x22, 0x72, 0x20, 0x3b, 0xf3, 0x20, 0x24, 0x36, 0xaa, 0x93, 0x5a, 0x7b, 0x75, 0x59,
    //     //     0x11, 0x4f, 0xdb, 0xa2, 0x03, 0x40, 0x7a, 0x24, 0xbd, 0x51, 0xf4, 0xc1, 0x94, 0x49,
    //     //     0x83, 0x97, 0xc9, 0xe3, 0xdb, 0xb7, 0x55, 0xe4, 0xef, 0xc5, 0x59, 0xe6, 0x9d, 0x0e,
    //     //     0x76, 0x75, 0xc4, 0x61, 0xd4, 0xc0, 0xf9, 0x62, 0x07, 0x23, 0x90, 0xfa, 0x85, 0x82,
    //     //     0x7d, 0x31, 0x42, 0xf3, 0x01, 0x49, 0x9c, 0xa6, 0x38, 0x70, 0xf9, 0x09, 0x3f, 0x13,
    //     //     0xfe, 0xd6, 0xfd, 0xd6, 0xdf, 0x9f, 0xc6, 0x0f, 0x8e, 0x42, 0x4d, 0x7b, 0x63, 0xd5,
    //     //     0x48, 0x2a, 0x60, 0x74, 0x8f, 0x67, 0xf1, 0x8f, 0x6d, 0xa0, 0xa0, 0xfe, 0x74, 0x03,
    //     //     0x5a, 0xb5, 0x87, 0x0a, 0x27, 0x16, 0xb8, 0x72, 0xe7, 0x5c, 0x41, 0xd8, 0xd9, 0xde,
    //     //     0x4b, 0x75, 0x0d, 0x11, 0x30, 0x2f, 0x7e, 0x24, 0xcc, 0xa4, 0x2d, 0xbe, 0x1a, 0x05,
    //     //     0x15, 0xe4, 0x96, 0x2d, 0xe2, 0x5a, 0x66, 0x14, 0x33, 0x6e, 0x98, 0x56, 0x15, 0x04,
    //     //     0x5d, 0x34, 0xe8, 0x99, 0x25, 0xc4, 0xaa, 0x73, 0x7d, 0x07, 0xd1, 0xda, 0x72, 0x39,
    //     //     0x82, 0x5a, 0x11, 0x65, 0x76, 0x3f, 0x31, 0x89, 0x9f, 0x07, 0x1c, 0x1e, 0x63, 0xdb,
    //     //     0x29, 0x4b, 0x98, 0xc0, 0x01, 0x80, 0xda, 0xbb, 0x57, 0xcd, 0xdb, 0x0a, 0x93, 0xc4,
    //     //     0x56, 0xe0, 0x75, 0x7f, 0x88, 0xac, 0x03, 0x6e, 0x49, 0x91, 0xe7, 0xe9, 0x2f, 0x1b,
    //     //     0xd5, 0x32, 0xff, 0x28, 0xc3, 0x19, 0x07, 0xaa, 0x73, 0x62, 0x56, 0x34, 0x92, 0x51,
    //     //     0x75, 0xa1, 0x7d, 0xaa, 0xec, 0xbb, 0xcf, 0xdf, 0xb4, 0xa0, 0xf6, 0xec, 0x28, 0xdd,
    //     //     0x76, 0xd1, 0xdc, 0x17, 0x43, 0xbd, 0xf4, 0x9a, 0x5c, 0xfe, 0xf7, 0x6b, 0xe2, 0x11,
    //     //     0x66, 0x34, 0x85, 0x0e, 0xed, 0x5d, 0x06, 0x7f, 0xe7, 0x1d, 0xf7, 0x08, 0x29, 0x1e,
    //     //     0x15, 0xf6, 0x03, 0x19, 0x55, 0x69, 0x7c, 0xb6, 0x63, 0x84, 0xcf, 0xc3, 0x84, 0xa0,
    //     //     0xa3, 0xba, 0xc7, 0xbf, 0x5e, 0x84, 0x50, 0xf2, 0x58, 0x02, 0x99, 0x02, 0x7b, 0x76,
    //     //     0x16, 0x60, 0xd4, 0x01, 0x18, 0x5d, 0xdc, 0x7a, 0x25, 0x55, 0x0f, 0xe4, 0x40, 0xd4,
    //     //     0x91, 0x58, 0xca, 0x6f, 0xdf, 0x82, 0xf9, 0x33, 0xfb, 0x7e, 0xc6, 0x01, 0x35, 0x08,
    //     //     0x9c, 0x09, 0x20, 0x1e, 0x2f, 0x63, 0x2c, 0x79, 0xcd, 0x99, 0x39, 0x44, 0x52, 0x73,
    //     //     0x87, 0x4a, 0xf2, 0x5c, 0x32, 0x26, 0xad, 0x2a, 0x21, 0xe7, 0x1a, 0xf4, 0xe7, 0x03,
    //     //     0xd0, 0x83, 0xc4, 0x89, 0xde, 0x8e, 0x7e, 0xf7, 0x43, 0xa6, 0xfc, 0x79, 0x9a, 0x24,
    //     //     0x44, 0xa0, 0x5c, 0x33, 0x56, 0x42, 0xec, 0x0c, 0x35, 0xcc, 0x95, 0xa9, 0x7d, 0x30,
    //     //     0x22, 0xb5, 0x54, 0x56, 0xe1, 0x94, 0xce, 0x20, 0x2b, 0xd0, 0x77, 0xc4, 0x3f, 0x3c,
    //     //     0xe9, 0x7c, 0x20, 0xa0, 0xc2, 0x04, 0x2b, 0x74, 0x97, 0x95, 0x00, 0x6b, 0x19, 0xa5,
    //     //     0x28, 0x09, 0xcf, 0x04, 0x93, 0x06, 0xc7, 0x19, 0x2b, 0x21, 0x5e, 0xa4, 0x10, 0x4f,
    //     //     0xe0, 0x26, 0xcf, 0xd9, 0x4a, 0xdb, 0x59, 0x1e, 0x2c, 0x80, 0xaf, 0xd8, 0xee, 0x4d,
    //     //     0x26, 0x7d, 0x1e, 0x9f, 0xc3, 0x1a, 0x47, 0x29, 0xe7, 0x68, 0x95, 0xed, 0x25, 0x51,
    //     //     0x73, 0x13, 0xa8, 0x64, 0x00, 0xea, 0x8f, 0x27, 0x8a, 0x30, 0x53, 0x3a, 0x53, 0x65,
    //     //     0x91, 0xdb, 0x75, 0x75, 0x0c, 0x39, 0x9f, 0x12, 0xbc, 0xaf, 0xa3, 0xdd, 0x65, 0xed,
    //     //     0x69, 0x34, 0xa1, 0x81, 0xfd, 0x7c, 0xcb, 0x03, 0x36, 0x19, 0x39, 0x6f, 0x45, 0xaf,
    //     //     0xb0, 0xea, 0x4e, 0xff, 0x31, 0xe7, 0x6d, 0x6d, 0xf3, 0x49,
    //     // ];

    //     // let digest_512 = [
    //     //     0x83, 0xe5, 0xbc, 0xa0, 0xe0, 0x52, 0xd0, 0x01, 0x3b, 0xa8, 0x9f, 0x5f, 0x33, 0xf4,
    //     //     0xb3, 0xea, 0x15, 0x49, 0xfc, 0x2a, 0x99, 0xac, 0x4f, 0xd9, 0x16, 0x5b, 0x78, 0x12,
    //     //     0x75, 0xdc, 0x58, 0x39, 0x92, 0x4c, 0x36, 0xa9, 0x5c, 0x6a, 0xe0, 0xdf, 0x68, 0x67,
    //     //     0xfa, 0x93, 0xa9, 0x8c, 0x1e, 0xd4, 0x61, 0x0c, 0xbb, 0xa4, 0xd6, 0x71, 0xad, 0x8d,
    //     //     0x30, 0x24, 0xa5, 0xca, 0xe3, 0x63, 0xd8, 0x5e,
    //     // ];

    //     // in hardware format
    //     let pk_hardware_format = ImageMldsaPubKey([
    //         0xa4c34aad, 0x85990594, 0x3b3099eb, 0x1ecf176c, 0x65de9fd6, 0xd9a79023, 0x8a4aa333,
    //         0xd15a8dd4, 0x37a0aa4b, 0x0189a817, 0x6fabfe0e, 0xe492fb02, 0xca3b81bd, 0xb50c58ba,
    //         0xfb11dff9, 0x2d477742, 0xd566336c, 0xd1777f86, 0x0bb73cb4, 0x5ec59477, 0x9b29603f,
    //         0x132b3c75, 0xcecdce3c, 0x6cf949f0, 0xc4de84ed, 0x070e6a14, 0xc130ede6, 0x9a74116a,
    //         0xdaf1de3e, 0x644faa5c, 0x26cc8d01, 0x60631c69, 0xce5f9b28, 0x68668dd7, 0xc48858fd,
    //         0x4baaf788, 0xca3433ac, 0x56a9075f, 0x4a1a745d, 0x22aa4649, 0xa9892830, 0xd849f593,
    //         0x3199e941, 0x844b76be, 0x5bde507d, 0xe356c318, 0xaf6948be, 0xf724d9e2, 0x0199a2bf,
    //         0xcfccd9eb, 0x533ee9ce, 0x34c404fa, 0x4806443c, 0x6efc17d5, 0x30351c61, 0x42dc875f,
    //         0x81f53daa, 0x209c95a4, 0x66660dad, 0x3f63c49a, 0x9ae324b1, 0x700520c1, 0x96f1e571,
    //         0xaa5133fc, 0xb9b80b01, 0x66ec0775, 0xa087606c, 0x678196ed, 0x7e139b1b, 0x544c2fea,
    //         0x3beb95ce, 0xe7c889e9, 0xd4a78996, 0x1180d253, 0xf0611137, 0xa9065c5b, 0x16ad085e,
    //         0xec4eb2ba, 0x5115d3d0, 0xa5d9ecc6, 0x48993da9, 0xc9863823, 0x6d696b10, 0xc14bd1aa,
    //         0xd5c7002c, 0x59b76ce5, 0x10d66ed6, 0xd99a3012, 0x15e32845, 0x64583adb, 0xf131cb8d,
    //         0xa23be8b4, 0x5586c868, 0x0147a4e9, 0x027406d3, 0x38a34707, 0xbb11d35c, 0x999706cc,
    //         0xd49b4f2f, 0x3a2bffcd, 0xbb8ea26a, 0x6031a38f, 0xb2b81bb0, 0xdd6ae90c, 0xc52aae9e,
    //         0x40c7118b, 0x4f6f69ab, 0xf1b9fb4e, 0xe17eff23, 0xd4196251, 0xabda30b8, 0xcfe73bdf,
    //         0x3fd708e8, 0x1dfdc294, 0x91135cf4, 0xce6d3a30, 0xd2d7d0e6, 0xc3bf0052, 0x58489c38,
    //         0x20f2346a, 0xfd2fcb6d, 0xa1c107ab, 0xa56d7f4d, 0x4af058e5, 0xcee727f4, 0xf90d042e,
    //         0x6e9782dd, 0x3629b653, 0x714e7dad, 0xe4348b69, 0xaa85996d, 0x8aa5f122, 0xf19ab645,
    //         0x04caa0b3, 0xacdd0b32, 0xad05675c, 0xffff31eb, 0xa10645f5, 0xa863501a, 0x3911cf31,
    //         0x033bce32, 0xb402a4ba, 0xbbc8e37a, 0x473b2032, 0xad0a222c, 0xadd5778a, 0xedef07f2,
    //         0x4c704acb, 0x22395a0a, 0x46ed325c, 0x8c241603, 0xc63579f2, 0x5e171cf0, 0xc703cca8,
    //         0xf0bf7ced, 0x95947386, 0xd118ea9a, 0xcf4061e9, 0x755fb6d7, 0xd34b8467, 0x4c9e316c,
    //         0x8efbaf5c, 0xaf8b6b3e, 0xf28805b5, 0x2738a2f6, 0xc1cc79fa, 0xc2bd26c5, 0xe26b439c,
    //         0xed195085, 0xd23091db, 0x9713c325, 0x50f0a173, 0x86a3be0e, 0x4a360d67, 0x934f7b28,
    //         0x926678f0, 0x62dc04c5, 0xa976ae51, 0x38491c4f, 0xe607a52b, 0xc8704ef4, 0x8dc70877,
    //         0x68acb197, 0xf8893edf, 0x79b754ab, 0x80e99d9a, 0x663d73e0, 0x49c877b5, 0x1f2a439e,
    //         0x7fd843e6, 0x97e25f70, 0xee6b2ff3, 0x6b2a5500, 0x4942e97d, 0xc6b07951, 0x669b5e38,
    //         0x5ff06273, 0x60272b43, 0x033fb5c0, 0x27259270, 0x171aee38, 0xa7484e7b, 0xc10a5c4e,
    //         0xe3b43487, 0x6ddfb66c, 0xc6ef4e62, 0xf9b3589c, 0xc782ae18, 0xf363227d, 0xaa8ac410,
    //         0xe17eeb1f, 0xeea4133d, 0xa6dfd292, 0x5f08f536, 0x1fcd05e8, 0xe16efe1a, 0x2e7a455e,
    //         0xc72d6064, 0x5295fdb1, 0xb697a865, 0x8bc53087, 0xc08796f2, 0x2f2f6564, 0xb0a20df5,
    //         0xdc023426, 0x76987c49, 0x3cce098d, 0x88583c0d, 0x45b0950c, 0x0fe6a2c2, 0x25b2bb09,
    //         0xfaf36bbe, 0x2435bf9d, 0xb67048a5, 0x702c0f06, 0x2135a52a, 0x26287b18, 0x78cd8d26,
    //         0x6bd42953, 0x726207fa, 0xd2ebcc0e, 0x0cf25057, 0x06526617, 0xbffc320c, 0xd04bb69c,
    //         0xc727b133, 0x2432b8e5, 0xd254bf04, 0xb0edaf69, 0x4607caaf, 0xff728989, 0x78b8ce5b,
    //         0xc308efb1, 0x5ed64e1c, 0xeeb02dcc, 0xf9eccf33, 0xdfe64533, 0xdaf93cc6, 0x78b73c17,
    //         0x9a98cd23, 0x3268ae29, 0x1da48aae, 0xbe5e4261, 0x625797f9, 0xc16400e7, 0x27fe8157,
    //         0x338cd9f9, 0xb6e767db, 0x82975ba6, 0x01478a92, 0x8c5cdfec, 0xaf7e993b, 0x7d85b256,
    //         0x9fa753df, 0xe9d265fc, 0xea6425d9, 0x998f95ac, 0x72a0b613, 0x195c598d, 0x2a0c41d8,
    //         0x5f04c2e9, 0xb46bf7c3, 0x7e6c48e0, 0x0288f1a9, 0xca6cb5f0, 0xe6d7b01d, 0x10c67516,
    //         0xaca376b6, 0x40ada0f3, 0x419032f3, 0xc48cfd07, 0xb4fdd654, 0xa7e8db89, 0x370a5b78,
    //         0x92787949, 0x63421003, 0x9ff61dbe, 0x41e91ecd, 0xc855adf9, 0x9debafb1, 0x26636426,
    //         0xfe80dd85, 0xf9c53bb6, 0xae3c4ddb, 0x188a110c, 0x26cda2b5, 0x9c9917bc, 0x42c0adad,
    //         0x2f089433, 0x67d66b50, 0xa794832c, 0x5af545cc, 0x2efa85bd, 0x98da9f58, 0x624e5a19,
    //         0xf75ec35b, 0xc676e5a7, 0x2546bf59, 0x4f91107c, 0xb5036c40, 0x70d7794a, 0xceb719a2,
    //         0xceafdac4, 0x78673f8b, 0x0d9c3355, 0xea376196, 0x2e3c451f, 0x58fc6789, 0x98843314,
    //         0x10e05005, 0xa3ce45f7, 0xdc885fd2, 0x342e5ac2, 0x74e74b43, 0x6162978f, 0x5089904b,
    //         0xa4a8f931, 0x35d20a3f, 0x6f20b8be, 0x6d27bf2c, 0xd192dedc, 0x0e9a7c84, 0xbdfcdf99,
    //         0x85d98eef, 0xe28da928, 0x52bcfee1, 0x9c47918d, 0xc33cc88d, 0x99c8ebda, 0x5350bb28,
    //         0x2fddd04e, 0xc2160cd0, 0xd9648620, 0x618566d2, 0xf4a0bf7f, 0x5912e3b4, 0xa9c23354,
    //         0x81cc09c1, 0x7b4b41cc, 0x9bdf60e5, 0xb1adacbe, 0xcdbe6128, 0xa85e60fd, 0x09ec3faf,
    //         0x904d4ca7, 0xb84b8e86, 0x763e058d, 0xca8a6df4, 0x4f3ef01e, 0x8a982342, 0xb5a59cbc,
    //         0xbc0224f6, 0x3422b3f6, 0xc6ed782b, 0xd74f55c6, 0x38951af4, 0xb21db0fc, 0x99bc099e,
    //         0xc6744fbc, 0x3cc0bac3, 0x6e6f28b0, 0x2977d2e4, 0x232359d0, 0x60152363, 0xe75a98f8,
    //         0xaf3ffb97, 0x1c969cde, 0xcbc41a17, 0x6665f99c, 0xb7b7c2db, 0x327317cd, 0x3a163243,
    //         0x92cfeaa5, 0x042bf3fb, 0x19cec4e4, 0x737a3dec, 0xf22df03f, 0x6c42b10d, 0xf13ebcff,
    //         0x3b0bdf77, 0x192d2e1c, 0xe8eb3b74, 0x52584a0d, 0xfabea3ea, 0xb8e02671, 0x3d04b140,
    //         0x2b80ee27, 0x734d3032, 0x4c6455c1, 0xc61e84b5, 0x01ad9944, 0x3ec96119, 0x6e5f95cd,
    //         0x7352aacd, 0x88d2ac4b, 0x5467169e, 0xd4168a36, 0x1da952aa, 0x2bc0e131, 0x5435ab85,
    //         0xc721938c, 0xb604f118, 0x212cd772, 0x576f6f3c, 0x69aa0827, 0xb04954e0, 0x1f257a5b,
    //         0x32e882e6, 0xd1b37fcf, 0xde10e082, 0xaa97564f, 0x55210b99, 0x777dde41, 0x65288b28,
    //         0x5db9c9c8, 0x5252207e, 0xea63af88, 0xca4e4c70, 0x79148f92, 0xb3b3aea5, 0x1c2a0bd8,
    //         0x45badb6b, 0x020090a6, 0x9fea09ba, 0xae4cd583, 0xe7d105eb, 0x59eccce7, 0xcf6a7c88,
    //         0x2e5a9b33, 0xdee39d2e, 0xbc686d8c, 0xc7dfdfb7, 0x2462a62a, 0x148ef997, 0x28017beb,
    //         0x9da516bc, 0x02f99b56, 0xf1a8bdbd, 0x8450e8bc, 0x5a645fc6, 0x9c4d4c2e, 0xf8a77145,
    //         0x80ca80ed, 0x70b7bc63, 0x121b7a47, 0x606e46e2, 0xea4e0fd2, 0xb981091d, 0xfa705cd5,
    //         0x6a805fb6, 0xf3ba2475, 0x6a22f4d5, 0xe92c6b32, 0xb27666c1, 0x054b0277, 0x06362955,
    //         0x0c8f72e8, 0x21c9eddd, 0x5e8ddb44, 0xd197a71e, 0x1162a17a, 0xd5f1421b, 0x91685dd9,
    //         0xe230b73c, 0x9a273985, 0xbec50fb5, 0xb016f4d8, 0x6d5c37fc, 0x25dc6cac, 0xca3d51ae,
    //         0x97004d3e, 0x5a194f4f, 0x005d47a0, 0xc7a853e4, 0x452ad686, 0x9114c0c3, 0x65f93218,
    //         0x6c2b60e2, 0xac044aeb, 0x2ddfda20, 0x4dd0276e, 0xc61a870e, 0xc95bfc2c, 0xda195076,
    //         0x354f97ca, 0x32137480, 0x87fe68b0, 0x6b22b28b, 0x4317ba5c, 0x03ed0d47, 0x97bd480d,
    //         0x619de155, 0x366693fe, 0xace200ce, 0x6546161d, 0x825a7e75, 0xd640f113, 0x3775386c,
    //         0x6e9c25e5, 0x088a8be4, 0x94b9b7b3, 0x39f1682d, 0x767efd2a, 0xea687310, 0x10352963,
    //         0xf6ebb8ed, 0x7a05296a, 0xff5487e7, 0x48509dfc, 0xf39e4cec, 0x8b203189, 0xb0a9570a,
    //         0x1691e8bb, 0x610f37ef, 0xc021e846, 0x56f7c080, 0xf7755ab4, 0x07864fa8, 0xe625d050,
    //         0x1a81c9fa, 0xd474639e, 0x3f811615, 0x5961f68e, 0xa0f74879, 0x8ab0aafb, 0x5a76cc37,
    //         0x69adee7c, 0xcb2bd291, 0x98c16b0e, 0x5f4cf758, 0xade63d79, 0xdeeca28b, 0x0663ae16,
    //         0x31a0874d, 0xb9336dbb, 0x198579e2, 0x06b614c2, 0x5338c7b8, 0xd0ab40cc, 0x3fd1d9ca,
    //         0x86be3f79, 0xc73ea699, 0x8d76c562, 0x3fb4d865, 0x49fe05d1, 0x19f4d8bf, 0xc37cc553,
    //         0x71354e62, 0xf5034b0e, 0xd35120f8, 0xcc745c52, 0x2fc5244c, 0x1a88ac22, 0xbcf8175f,
    //         0x36005e32, 0xf9636cdb, 0xa56e213a, 0xa036b783, 0xda369deb, 0x5994b510, 0x9a0c5c1d,
    //         0x005985ec, 0x30592bdc, 0xbfba60a5, 0xae4371e8, 0x42d8f5c9, 0x11308268, 0x38ac064a,
    //         0xb775f17a, 0x0068d63f, 0xa78cd9c8, 0xe943c524, 0x728c9e63, 0x1999dd1b, 0x04bd23f2,
    //         0x2ac632b4, 0x18672908, 0xb7735515, 0x97711e0d, 0xa32a65de, 0xbdc4910c, 0x75575b2e,
    //         0xfd4bf85d, 0x9c1494d7, 0x335bc800, 0x239953ae, 0x971fedc6, 0x8563f573, 0xc64adead,
    //         0xe022b3cc, 0xb04890d0, 0xc1ca889e, 0x844e0df5, 0x0059ccd6, 0xfa57851b, 0x0b7e4747,
    //         0xa0edca48, 0xd24d0309, 0x7bb51774, 0x0c8bb87b, 0xc1c260ce, 0x893359c7, 0xa8afb98c,
    //         0xbca6933d, 0x5facc0be, 0xd07dd74e, 0xdd2aabe5, 0xd93c1bfd, 0xd6724ba3, 0xea1c92fd,
    //         0x808c0212, 0xc0057e86, 0x18c116e6, 0x95ea19b6, 0x9971f126, 0xefb4c14c, 0x64087ba5,
    //         0x6dbe8830, 0xa27661b3, 0xa9837201, 0x4f164171, 0x9108b3d1, 0xf79c865e, 0x541e4696,
    //         0x5c4c4977, 0x25fb4114, 0x7cdae73b, 0xace74be7,
    //     ]);

    //     let pk_regular_format_bytes = from_hw_format(&pk_hardware_format.0);

    //     let pk = PublicKey::try_from_bytes(pk_regular_format_bytes).unwrap();
    //     // let sk = PrivateKey::try_from_bytes(sk_bytes).unwrap();

    //     // let sig = sk.try_sign(&digest_512, &[]).unwrap();
    //     // println!("{:x?}", sig);
    //     // panic!();
    // }
}
