/*++

Licensed under the Apache-2.0 license.

File Name:

    hmac512.rs

Abstract:

    File contains implementation of Hash Message Authenticated Code (HMAC-512)

--*/

use crate::{helpers::EndianessTransform, Sha512, Sha512Mode};

/// HMAC-512 Mode
#[derive(Debug, Copy, Clone)]
pub enum Hmac512Mode {
    Sha224,
    Sha256,
    Sha384,
    Sha512,
}

/// Block Size
const BLOCK_SIZE: usize = Sha512::BLOCK_SIZE;

/// Tag Size
const MAX_TAG_SIZE: usize = Sha512::HASH_SIZE;

/// Length field size
const LEN_SIZE: usize = 16;

/// Input Pad
const IPAD: u8 = 0x36;

/// Output Pad
const OPAD: u8 = 0x5C;

impl From<Hmac512Mode> for Sha512Mode {
    /// Converts to this type from the input type.
    fn from(mode: Hmac512Mode) -> Self {
        match mode {
            Hmac512Mode::Sha224 => Sha512Mode::Sha224,
            Hmac512Mode::Sha256 => Sha512Mode::Sha256,
            Hmac512Mode::Sha384 => Sha512Mode::Sha384,
            Hmac512Mode::Sha512 => Sha512Mode::Sha512,
        }
    }
}

/// HMAC-512
pub struct Hmac512<const KEY_SIZE: usize> {
    /// Hash One
    hash1: Sha512,

    /// Hash Two
    hash2: Sha512,

    /// HMAC Mode
    mode: Hmac512Mode,

    /// Output Pad
    opad: [u8; BLOCK_SIZE],
}

impl<const KEY_SIZE: usize> Hmac512<KEY_SIZE> {
    /// Block Size
    pub const BLOCK_SIZE: usize = BLOCK_SIZE;

    /// Tag Size
    pub const MAX_TAG_SIZE: usize = MAX_TAG_SIZE;

    /// Length field size
    pub const LEN_SIZE: usize = LEN_SIZE;

    /// Create a new instance of Hash Message Authentication Code
    ///
    /// # Arguments
    ///
    /// * `mode` - Mode of the HMAC Operation
    pub fn new(mode: Hmac512Mode) -> Self {
        Self {
            hash1: Sha512::new(mode.into()),
            hash2: Sha512::new(mode.into()),
            mode,
            opad: [0u8; BLOCK_SIZE],
        }
    }

    /// Reset the state
    pub fn reset(&mut self) {
        // Reset both hashing engines
        self.hash1.reset(self.mode.into());
        self.hash2.reset(self.mode.into());
        self.opad.iter_mut().for_each(|b| *b = 0);
    }

    /// Initialize the HMAC Algorithm
    ///
    /// # Arguments
    ///
    /// * `key` - Key to use for HMAC
    /// * `block` - Block to calculate MAC over
    pub fn init(&mut self, key: &[u8; KEY_SIZE], block: &[u8; BLOCK_SIZE]) {
        assert!(KEY_SIZE <= BLOCK_SIZE, "key is larger than block size");

        // Reset the state
        self.reset();

        // Key is received as a list of big-endian DWORDs. Changing them to little-endian.
        let mut key_le = *key;
        key_le.to_little_endian();

        // Expand the key and XOR it with OPAD
        self.opad[..KEY_SIZE].copy_from_slice(&key_le);
        self.opad.iter_mut().for_each(|b| *b ^= OPAD);

        // Expand the key and XOR it with IPAD
        let mut ipad = [0u8; BLOCK_SIZE];
        ipad[..KEY_SIZE].copy_from_slice(&key_le);
        ipad.iter_mut().for_each(|b| *b ^= IPAD);

        // The SHA512::update function expects the block as a list of big-endian DWORDs.
        ipad.to_big_endian();

        // Hash the ipad
        self.hash1.update(&ipad);

        // Hash the block
        self.update(block);
    }

    /// Update the MAC with the block
    ///
    /// # Arguments
    ///
    /// * `block` - Block to calculate MAC over
    pub fn update(&mut self, block: &[u8; BLOCK_SIZE]) {
        // hash the block
        self.hash1.update(block);

        // Calculate the summary hash so far
        let mut sum_hash = [0u8; MAX_TAG_SIZE];
        self.hash1.copy_hash(&mut sum_hash);

        // The SHA512::hash function returns the hash as a list of big-endian DWORDs.
        // Converting sum_hash to little-endian DWORDs.
        sum_hash.to_little_endian();

        // Copy the summary hash into block
        let mut sum_block = [0u8; BLOCK_SIZE];
        sum_block[..self.hash1.hash_len()].copy_from_slice(&sum_hash[..self.hash1.hash_len()]);

        // Mark start of padding in the block
        sum_block[self.hash1.hash_len()] = 1 << 7;

        // Copy the length of the data hashed in bits
        let len: u128 = ((BLOCK_SIZE + self.hash1.hash_len()) * 8) as u128;
        sum_block[BLOCK_SIZE - LEN_SIZE..].copy_from_slice(&len.to_be_bytes());

        // Reset the second hash engine and generate the new tag.
        self.hash2.reset(self.mode.into());

        // The SHA512::update function expects the block as a list of big-endian DWORDs.
        self.opad.to_big_endian();
        self.hash2.update(&self.opad);
        // Changing back to little-endian.
        self.opad.to_little_endian();

        // The SHA512::update function expects the block as a list of big-endian DWORDs.
        sum_block.to_big_endian();
        self.hash2.update(&sum_block);
    }

    /// Retrieve the tag
    ///
    /// # Arguments
    ///
    /// * `tag` - Buffer to copy the tag to
    pub fn tag(&self, tag: &mut [u8]) {
        self.hash2.copy_hash(tag);
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    fn test<const N: usize>(mode: Hmac512Mode, key: &mut [u8; N], data: &[u8], result: &[u8]) {
        let mut block = [0u8; BLOCK_SIZE];
        block[..data.len()].copy_from_slice(data);
        block[data.len()] = 1 << 7;

        let len: u128 = (BLOCK_SIZE + data.len()) as u128;
        let len = len * 8;
        block[BLOCK_SIZE - LEN_SIZE..].copy_from_slice(&len.to_be_bytes());

        let mut hmac = Hmac512::new(mode);
        block.to_big_endian();
        key.to_big_endian();
        hmac.init(key, &block);

        let mut tag = [0u8; MAX_TAG_SIZE];
        hmac.tag(&mut tag);
        tag.to_little_endian();

        assert_eq!(&tag[..result.len()], result);
    }

    // Test cases from https://datatracker.ietf.org/doc/html/rfc4231

    #[test]
    fn test_hmac_sha384_0() {
        let mut key: [u8; 48] = [
            0x4a, 0x65, 0x66, 0x65, 0x4a, 0x65, 0x66, 0x65, 0x4a, 0x65, 0x66, 0x65, 0x4a, 0x65,
            0x66, 0x65, 0x4a, 0x65, 0x66, 0x65, 0x4a, 0x65, 0x66, 0x65, 0x4a, 0x65, 0x66, 0x65,
            0x4a, 0x65, 0x66, 0x65, 0x4a, 0x65, 0x66, 0x65, 0x4a, 0x65, 0x66, 0x65, 0x4a, 0x65,
            0x66, 0x65, 0x4a, 0x65, 0x66, 0x65,
        ];

        let data: [u8; 28] = [
            0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20, 0x79, 0x61, 0x20, 0x77, 0x61, 0x6e,
            0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x3f,
        ];

        let result: [u8; 48] = [
            0x2c, 0x73, 0x53, 0x97, 0x4f, 0x18, 0x42, 0xfd, 0x66, 0xd5, 0x3c, 0x45, 0x2c, 0xa4,
            0x21, 0x22, 0xb2, 0x8c, 0x0b, 0x59, 0x4c, 0xfb, 0x18, 0x4d, 0xa8, 0x6a, 0x36, 0x8e,
            0x9b, 0x8e, 0x16, 0xf5, 0x34, 0x95, 0x24, 0xca, 0x4e, 0x82, 0x40, 0x0c, 0xbd, 0xe0,
            0x68, 0x6d, 0x40, 0x33, 0x71, 0xc9,
        ];

        test(Hmac512Mode::Sha384, &mut key, &data, &result);
    }

    #[test]
    fn test_hmac_sha384_1() {
        let mut key: [u8; 20] = [
            0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
            0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
        ];

        let data: [u8; 8] = [0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65];

        let result: [u8; 48] = [
            0xaf, 0xd0, 0x39, 0x44, 0xd8, 0x48, 0x95, 0x62, 0x6b, 0x08, 0x25, 0xf4, 0xab, 0x46,
            0x90, 0x7f, 0x15, 0xf9, 0xda, 0xdb, 0xe4, 0x10, 0x1e, 0xc6, 0x82, 0xaa, 0x03, 0x4c,
            0x7c, 0xeb, 0xc5, 0x9c, 0xfa, 0xea, 0x9e, 0xa9, 0x07, 0x6e, 0xde, 0x7f, 0x4a, 0xf1,
            0x52, 0xe8, 0xb2, 0xfa, 0x9c, 0xb6,
        ];

        test(Hmac512Mode::Sha384, &mut key, &data, &result);
    }

    #[test]
    fn test_hmac_sha384_2() {
        let mut key: [u8; 4] = [0x4a, 0x65, 0x66, 0x65];

        let data: [u8; 28] = [
            0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20, 0x79, 0x61, 0x20, 0x77, 0x61, 0x6e,
            0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x3f,
        ];

        let result: [u8; 48] = [
            0xaf, 0x45, 0xd2, 0xe3, 0x76, 0x48, 0x40, 0x31, 0x61, 0x7f, 0x78, 0xd2, 0xb5, 0x8a,
            0x6b, 0x1b, 0x9c, 0x7e, 0xf4, 0x64, 0xf5, 0xa0, 0x1b, 0x47, 0xe4, 0x2e, 0xc3, 0x73,
            0x63, 0x22, 0x44, 0x5e, 0x8e, 0x22, 0x40, 0xca, 0x5e, 0x69, 0xe2, 0xc7, 0x8b, 0x32,
            0x39, 0xec, 0xfa, 0xb2, 0x16, 0x49,
        ];

        test(Hmac512Mode::Sha384, &mut key, &data, &result);
    }

    #[test]
    fn test_hmac_sha384_3() {
        let mut key: [u8; 20] = [
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        ];

        let data: [u8; 50] = [
            0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
            0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
            0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
            0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        ];

        let result: [u8; 48] = [
            0x88, 0x06, 0x26, 0x08, 0xd3, 0xe6, 0xad, 0x8a, 0x0a, 0xa2, 0xac, 0xe0, 0x14, 0xc8,
            0xa8, 0x6f, 0x0a, 0xa6, 0x35, 0xd9, 0x47, 0xac, 0x9f, 0xeb, 0xe8, 0x3e, 0xf4, 0xe5,
            0x59, 0x66, 0x14, 0x4b, 0x2a, 0x5a, 0xb3, 0x9d, 0xc1, 0x38, 0x14, 0xb9, 0x4e, 0x3a,
            0xb6, 0xe1, 0x01, 0xa3, 0x4f, 0x27,
        ];

        test(Hmac512Mode::Sha384, &mut key, &data, &result);
    }

    #[test]
    fn test_hmac_sha384_4() {
        let mut key: [u8; 28] = [
            0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
            0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x00, 0x00, 0x00,
        ];

        let data: [u8; 50] = [
            0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
            0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
            0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
            0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        ];

        let result: [u8; 48] = [
            0x3e, 0x8a, 0x69, 0xb7, 0x78, 0x3c, 0x25, 0x85, 0x19, 0x33, 0xab, 0x62, 0x90, 0xaf,
            0x6c, 0xa7, 0x7a, 0x99, 0x81, 0x48, 0x08, 0x50, 0x00, 0x9c, 0xc5, 0x57, 0x7c, 0x6e,
            0x1f, 0x57, 0x3b, 0x4e, 0x68, 0x01, 0xdd, 0x23, 0xc4, 0xa7, 0xd6, 0x79, 0xcc, 0xf8,
            0xa3, 0x86, 0xc6, 0x74, 0xcf, 0xfb,
        ];

        test(Hmac512Mode::Sha384, &mut key, &data, &result);
    }

    #[test]
    #[should_panic(expected = "key is larger than block size")]
    fn test_hmac_sha384_5() {
        let mut key: [u8; 132] = [
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x00,
        ];

        let data: [u8; 54] = [
            0x54, 0x65, 0x73, 0x74, 0x20, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x4c, 0x61, 0x72,
            0x67, 0x65, 0x72, 0x20, 0x54, 0x68, 0x61, 0x6e, 0x20, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
            0x2d, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x2d, 0x20, 0x48, 0x61,
            0x73, 0x68, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x46, 0x69, 0x72, 0x73, 0x74,
        ];

        let result: [u8; 48] = [
            0x4e, 0xce, 0x08, 0x44, 0x85, 0x81, 0x3e, 0x90, 0x88, 0xd2, 0xc6, 0x3a, 0x04, 0x1b,
            0xc5, 0xb4, 0x4f, 0x9e, 0xf1, 0x01, 0x2a, 0x2b, 0x58, 0x8f, 0x3c, 0xd1, 0x1f, 0x05,
            0x03, 0x3a, 0xc4, 0xc6, 0x0c, 0x2e, 0xf6, 0xab, 0x40, 0x30, 0xfe, 0x82, 0x96, 0x24,
            0x8d, 0xf1, 0x63, 0xf4, 0x49, 0x52,
        ];

        test(Hmac512Mode::Sha384, &mut key, &data, &result);
    }

    #[test]
    fn test_hmac_sha512_1() {
        let mut key: [u8; 20] = [
            0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
            0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
        ];

        let data: [u8; 8] = [0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65];

        let result: [u8; 64] = [
            0x87, 0xaa, 0x7c, 0xde, 0xa5, 0xef, 0x61, 0x9d, 0x4f, 0xf0, 0xb4, 0x24, 0x1a, 0x1d,
            0x6c, 0xb0, 0x23, 0x79, 0xf4, 0xe2, 0xce, 0x4e, 0xc2, 0x78, 0x7a, 0xd0, 0xb3, 0x05,
            0x45, 0xe1, 0x7c, 0xde, 0xda, 0xa8, 0x33, 0xb7, 0xd6, 0xb8, 0xa7, 0x02, 0x03, 0x8b,
            0x27, 0x4e, 0xae, 0xa3, 0xf4, 0xe4, 0xbe, 0x9d, 0x91, 0x4e, 0xeb, 0x61, 0xf1, 0x70,
            0x2e, 0x69, 0x6c, 0x20, 0x3a, 0x12, 0x68, 0x54,
        ];

        test(Hmac512Mode::Sha512, &mut key, &data, &result);
    }

    #[test]
    fn test_hmac_sha512_2() {
        let mut key: [u8; 4] = [0x4a, 0x65, 0x66, 0x65];

        let data: [u8; 28] = [
            0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20, 0x79, 0x61, 0x20, 0x77, 0x61, 0x6e,
            0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x3f,
        ];

        let result: [u8; 64] = [
            0x16, 0x4b, 0x7a, 0x7b, 0xfc, 0xf8, 0x19, 0xe2, 0xe3, 0x95, 0xfb, 0xe7, 0x3b, 0x56,
            0xe0, 0xa3, 0x87, 0xbd, 0x64, 0x22, 0x2e, 0x83, 0x1f, 0xd6, 0x10, 0x27, 0x0c, 0xd7,
            0xea, 0x25, 0x05, 0x54, 0x97, 0x58, 0xbf, 0x75, 0xc0, 0x5a, 0x99, 0x4a, 0x6d, 0x03,
            0x4f, 0x65, 0xf8, 0xf0, 0xe6, 0xfd, 0xca, 0xea, 0xb1, 0xa3, 0x4d, 0x4a, 0x6b, 0x4b,
            0x63, 0x6e, 0x07, 0x0a, 0x38, 0xbc, 0xe7, 0x37,
        ];

        test(Hmac512Mode::Sha512, &mut key, &data, &result);
    }

    #[test]
    fn test_hmac_sha512_3() {
        let mut key: [u8; 20] = [
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        ];

        let data: [u8; 50] = [
            0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
            0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
            0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
            0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        ];

        let result: [u8; 64] = [
            0xfa, 0x73, 0xb0, 0x08, 0x9d, 0x56, 0xa2, 0x84, 0xef, 0xb0, 0xf0, 0x75, 0x6c, 0x89,
            0x0b, 0xe9, 0xb1, 0xb5, 0xdb, 0xdd, 0x8e, 0xe8, 0x1a, 0x36, 0x55, 0xf8, 0x3e, 0x33,
            0xb2, 0x27, 0x9d, 0x39, 0xbf, 0x3e, 0x84, 0x82, 0x79, 0xa7, 0x22, 0xc8, 0x06, 0xb4,
            0x85, 0xa4, 0x7e, 0x67, 0xc8, 0x07, 0xb9, 0x46, 0xa3, 0x37, 0xbe, 0xe8, 0x94, 0x26,
            0x74, 0x27, 0x88, 0x59, 0xe1, 0x32, 0x92, 0xfb,
        ];

        test(Hmac512Mode::Sha512, &mut key, &data, &result);
    }

    #[test]
    fn test_hmac_sha512_4() {
        let mut key: [u8; 28] = [
            0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
            0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x00, 0x00, 0x00,
        ];

        let data: [u8; 50] = [
            0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
            0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
            0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
            0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        ];

        let result: [u8; 64] = [
            0xb0, 0xba, 0x46, 0x56, 0x37, 0x45, 0x8c, 0x69, 0x90, 0xe5, 0xa8, 0xc5, 0xf6, 0x1d,
            0x4a, 0xf7, 0xe5, 0x76, 0xd9, 0x7f, 0xf9, 0x4b, 0x87, 0x2d, 0xe7, 0x6f, 0x80, 0x50,
            0x36, 0x1e, 0xe3, 0xdb, 0xa9, 0x1c, 0xa5, 0xc1, 0x1a, 0xa2, 0x5e, 0xb4, 0xd6, 0x79,
            0x27, 0x5c, 0xc5, 0x78, 0x80, 0x63, 0xa5, 0xf1, 0x97, 0x41, 0x12, 0x0c, 0x4f, 0x2d,
            0xe2, 0xad, 0xeb, 0xeb, 0x10, 0xa2, 0x98, 0xdd,
        ];

        test(Hmac512Mode::Sha512, &mut key, &data, &result);
    }

    #[test]
    #[should_panic(expected = "key is larger than block size")]
    fn test_hmac_sha512_5() {
        let mut key: [u8; 132] = [
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x00,
        ];

        let data: [u8; 54] = [
            0x54, 0x65, 0x73, 0x74, 0x20, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x4c, 0x61, 0x72,
            0x67, 0x65, 0x72, 0x20, 0x54, 0x68, 0x61, 0x6e, 0x20, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
            0x2d, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x2d, 0x20, 0x48, 0x61,
            0x73, 0x68, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x46, 0x69, 0x72, 0x73, 0x74,
        ];

        let result: [u8; 64] = [
            0xb0, 0xba, 0x46, 0x56, 0x37, 0x45, 0x8c, 0x69, 0x90, 0xe5, 0xa8, 0xc5, 0xf6, 0x1d,
            0x4a, 0xf7, 0xe5, 0x76, 0xd9, 0x7f, 0xf9, 0x4b, 0x87, 0x2d, 0xe7, 0x6f, 0x80, 0x50,
            0x36, 0x1e, 0xe3, 0xdb, 0xa9, 0x1c, 0xa5, 0xc1, 0x1a, 0xa2, 0x5e, 0xb4, 0xd6, 0x79,
            0x27, 0x5c, 0xc5, 0x78, 0x80, 0x63, 0xa5, 0xf1, 0x97, 0x41, 0x12, 0x0c, 0x4f, 0x2d,
            0xe2, 0xad, 0xeb, 0xeb, 0x10, 0xa2, 0x98, 0xdd,
        ];

        test(Hmac512Mode::Sha512, &mut key, &data, &result);
    }
}
