/*++

Licensed under the Apache-2.0 license.

File Name:

    aes256cbc.rs

Abstract:

    File contains implementation of AES-256 CBC algorithm

--*/

use cbc::cipher::{BlockDecryptMut, KeyIvInit};

use crate::helpers::EndianessTransform;

pub enum Aes256Cbc {}

const AES_256_BLOCK_SIZE: usize = 16;
const AES_256_KEY_SIZE: usize = 32;
const AES_256_IV_SIZE: usize = AES_256_BLOCK_SIZE;

type Aes256Decryptor = cbc::Decryptor<aes::Aes256>;

impl Aes256Cbc {
    /// Decrypt the cipher text
    ///
    /// # Arguments
    ///
    /// * `key` - Key
    /// * `iv` - Initialization vector
    /// * `cipher_text` - Cipher text
    /// * `plain_text` - plain text
    pub fn decrypt(
        key: &[u8; AES_256_KEY_SIZE],
        iv: &[u8; AES_256_IV_SIZE],
        cipher_txt: &[u8],
        plain_txt: &mut [u8],
    ) {
        assert_eq!(cipher_txt.len(), plain_txt.len());
        assert_eq!(cipher_txt.len() % AES_256_BLOCK_SIZE, 0);

        // IV is received as a list of big-endian DWORDs.
        // Convert them to little-endian.
        let mut iv_be = *iv;
        iv_be.to_little_endian();

        // Not changing key or cipher text endianess since it is internal from the firmware crypto API perspective.

        let mut decryptor = Aes256Decryptor::new(key.into(), &iv_be.into());
        for idx in (0..cipher_txt.len()).step_by(AES_256_BLOCK_SIZE) {
            let in_block = cipher_txt[idx..idx + 16].into();
            let out_block = (&mut plain_txt[idx..idx + 16]).into();
            decryptor.decrypt_block_b2b_mut(in_block, out_block);
        }
    }
}

#[cfg(test)]
mod tests {
    use crate::{helpers::EndianessTransform, Aes256Cbc};

    #[test]
    fn test_decrypt_1024bit() {
        let expected = [
            0x67, 0x67, 0x1C, 0xE1, 0xFA, 0x91, 0xDD, 0xEB, 0xF, 0x8F, 0xBB, 0xB3, 0x66, 0xB5,
            0x31, 0xB4, 0x67, 0x67, 0x1C, 0xE1, 0xFA, 0x91, 0xDD, 0xEB, 0xF, 0x8F, 0xBB, 0xB3,
            0x66, 0xB5, 0x31, 0xB4, 0x67, 0x67, 0x1C, 0xE1, 0xFA, 0x91, 0xDD, 0xEB, 0xF, 0x8F,
            0xBB, 0xB3, 0x66, 0xB5, 0x31, 0xB4, 0x67, 0x67, 0x1C, 0xE1, 0xFA, 0x91, 0xDD, 0xEB,
            0x0F, 0x8F, 0xBB, 0xB3, 0x66, 0xB5, 0x31, 0xB4, 0x67, 0x67, 0x1C, 0xE1, 0xFA, 0x91,
            0xDD, 0xEB, 0x0F, 0x8F, 0xBB, 0xB3, 0x66, 0xB5, 0x31, 0xB4, 0x67, 0x67, 0x1C, 0xE1,
            0xFA, 0x91, 0xDD, 0xEB, 0x0F, 0x8F, 0xBB, 0xB3, 0x66, 0xB5, 0x31, 0xB4, 0x67, 0x67,
            0x1C, 0xE1, 0xFA, 0x91, 0xDD, 0xEB, 0x0F, 0x8F, 0xBB, 0xB3, 0x66, 0xB5, 0x31, 0xB4,
            0x67, 0x67, 0x1C, 0xE1, 0xFA, 0x91, 0xDD, 0xEB, 0x0F, 0x8F, 0xBB, 0xB3, 0x66, 0xB5,
            0x31, 0xB4,
        ];
        let mut actual = [0u8; 128];
        Aes256Cbc::decrypt(&[0u8; 32], &[0u8; 16], &[0u8; 128], &mut actual);
        assert_eq!(expected, actual);
    }

    #[test]
    fn test_decrypt_384bit() {
        let expected = [
            0x67, 0x67, 0x1C, 0xE1, 0xFA, 0x91, 0xDD, 0xEB, 0xF, 0x8F, 0xBB, 0xB3, 0x66, 0xB5,
            0x31, 0xB4, 0x67, 0x67, 0x1C, 0xE1, 0xFA, 0x91, 0xDD, 0xEB, 0xF, 0x8F, 0xBB, 0xB3,
            0x66, 0xB5, 0x31, 0xB4, 0x67, 0x67, 0x1C, 0xE1, 0xFA, 0x91, 0xDD, 0xEB, 0xF, 0x8F,
            0xBB, 0xB3, 0x66, 0xB5, 0x31, 0xB4,
        ];
        let mut actual = [0u8; 48];
        Aes256Cbc::decrypt(&[0u8; 32], &[0u8; 16], &[0u8; 48], &mut actual);
        assert_eq!(expected, actual);
    }

    #[test]
    fn test_decrypt_256bit() {
        const KEY: [u8; 32] = [
            0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D,
            0x77, 0x81, 0x1F, 0x35, 0x2C, 0x7, 0x3B, 0x61, 0x8, 0xD7, 0x2D, 0x98, 0x10, 0xA3, 0x9,
            0x14, 0xDF, 0xF4,
        ];

        let mut iv: [u8; 16] = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
            0x0e, 0x0f,
        ];

        const CIPHER_TEXT: [u8; 64] = [
            0xF5, 0x8C, 0x4C, 0x04, 0xD6, 0xE5, 0xF1, 0xBA, 0x77, 0x9E, 0xAB, 0xFB, 0x5F, 0x7B,
            0xFB, 0xD6, 0x9C, 0xFC, 0x4E, 0x96, 0x7E, 0xDB, 0x80, 0x8D, 0x67, 0x9F, 0x77, 0x7B,
            0xC6, 0x70, 0x2C, 0x7D, 0x39, 0xF2, 0x33, 0x69, 0xA9, 0xD9, 0xBA, 0xCF, 0xA5, 0x30,
            0xE2, 0x63, 0x04, 0x23, 0x14, 0x61, 0xB2, 0xEB, 0x05, 0xE2, 0xC3, 0x9B, 0xE9, 0xFC,
            0xDA, 0x6C, 0x19, 0x07, 0x8C, 0x6A, 0x9D, 0x1B,
        ];

        const EXPECTED_PLAIN_TEXT: [u8; 64] = [
            0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93,
            0x17, 0x2A, 0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x3, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC,
            0x45, 0xAF, 0x8E, 0x51, 0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB,
            0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF, 0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17,
            0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10,
        ];

        let mut actual_plain_text = [0u8; 64];

        iv.to_big_endian();
        Aes256Cbc::decrypt(&KEY, &iv, &CIPHER_TEXT, &mut actual_plain_text);

        assert_eq!(actual_plain_text, EXPECTED_PLAIN_TEXT);
    }
}
