# Licensed under the Apache-2.0 license

proc configure_tap {target} {

    if {$target == "core" || $target == "mcu"} {
        set _CHIPNAME riscv
        set _TAPNAME cpu
        if {$target == "core"} {
            puts "Connecting to Caliptra Core"
            set _IDCODE 0x00000001
        } else {
            puts "Connecting to MCU"
            set _IDCODE 0x00000001
        }
    } elseif {$target == "lcc"} {
        puts "Connecting to LCC"
        set _CHIPNAME lcc
        set _TAPNAME tap
        set _IDCODE 0x00000001
    } else {
        puts stderr "Please include -c [target]"
    }

    set _CHAIN_LENGTH 5
    set _TARGETNAME $_CHIPNAME.$_TAPNAME
    jtag newtap $_CHIPNAME $_TAPNAME -irlen $_CHAIN_LENGTH -expected-id $_IDCODE
    target create $_TARGETNAME riscv -chain-position $_TARGETNAME -rtos hwthread
    
    if {$target == "core" || $target == "mcu"} {
        $_TARGETNAME configure -work-area-phys 0 -work-area-size 0x8000 -work-area-backup 1
        # Define custom VEER CSRs. This syntax is for OpenOCD 0.11.0
        # reg csrxxx
        $_TARGETNAME riscv expose_csrs 1984,1986,1992,1993,1994,1995,2032,2041,2047,4032
    }

    gdb_report_data_abort enable
    init

    if {$target == "core" || $target == "mcu"} {
        if {$target == "core"} {
            # Check if we can read/write CPTRA_DBG_MANUF_SERVICE_REG to see if Caliptra JTAG registers are accessible
            set manuf [riscv dmi_read 0x60]
            riscv dmi_write 0x60 [expr {0xFFFFFFFF - $manuf}]
            set manuf_inv [riscv dmi_read 0x60]
            # Restore original value
              riscv dmi_write 0x60 [format %08X $manuf]
            if { $manuf == $manuf_inv } {
                puts stderr "Caliptra Core not accessible"
            } else {
                puts stderr "Caliptra Core accessible"
            }
        }
        set dmstatus [riscv dmi_read 0x11]
        if {0x0 == $dmstatus} {
            puts stderr "CPU not accessible"
        } else {
            puts stderr "CPU accessible"
            halt
        }
    } else {
        # Address 0x4 (word address 0x01) is the lc_ctrl STATUS register.
        set lcc_status [riscv dmi_read 0x01]
        if {0x0 == $lcc_status} {
            puts stderr [format "LCC not accessible; STATUS: %x" $lcc_status]
        } else {
            puts stderr "LCC accessible"
        }
    }

    puts stderr "OpenOCD setup finished"
}
