
name: Build FPGA SD image

on:
  pull_request:
    paths:
      - ".github/workflows/fpga-image.yml"
      - "ci-tools/fpga-image/**"

  push:
    branches: ["main-2.x"]
    paths:
      - ".github/workflows/fpga-image.yml"
      - "ci-tools/fpga-image/**"
      - "hw/fpga/**"

  schedule:
    # 5:13 AM PST tuesday, thursday
    - cron: '13 13 * * 2,4'

  workflow_call:
  workflow_dispatch:

jobs:
  build_kernel:
    runs-on: [e2-standard-32, vck190-tools]
    strategy:
      matrix:
        image_variant: [core, subsystem-2.0, subsystem-2.1]
        include:
          - bitstream_hash: e5cf1d375502dc9105becaa16c1c996a65ed1dcf153a688c7f098d51e66ba6ae
            image_variant: core
          - bitstream_name: xsa_core2p0_5d069408.xsa
            image_variant: core
          - bitstream_hash: 71b0ffd91dab7344a110d03b98b95c314a31f5763e5f56819c3d657de908c5cf
            image_variant: subsystem-2.0
          - bitstream_name: xsa_ss2p0_24c0ea0b.xsa
            image_variant: subsystem-2.0
          - bitstream_hash: 4f27c7d21898cb6df2145d03eae07be86b98e925173eb5b7df280e813db9c179
            image_variant: subsystem-2.1
          - bitstream_name: xsa_ss2p1_e845cd0e.xsa
            image_variant: subsystem-2.1
    env:
      IMAGE_VARIANT: ${{ matrix.image_variant }}
      BITSTREAM_NAME: ${{ matrix.bitstream_name }}
      BITSTREAM_SHA256: ${{ matrix.bitstream_hash }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install pre-requisites
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt install gcc libncurses-dev zlib1g:i386 zlib1g-dev net-tools xterm autoconf libtool texinfo gcc-multilib build-essential device-tree-compiler xvfb apt-transport-https ca-certificates gnupg curl -y

      - name: Mount FPGA tools
        run: |
          echo "Starting work"
          sudo mkdir /vck190-tools
          sudo mount UUID=249f0fea-68c1-4e14-af09-5294e50e20b1 /vck190-tools/

      - name: Build Kernel
        run: |
          echo "Building kernel for bitstream variant ${IMAGE_VARIANT}"
          source /vck190-tools/petalinux-tool/settings.sh

          curl "https://storage.googleapis.com/caliptra-github-ci-bitstreams/v0/26092025/${BITSTREAM_NAME}" -o /tmp/system.xsa

          if ! (echo "${BITSTREAM_SHA256} /tmp/system.xsa" | sudo sha256sum -c); then
            echo "Bitstream does not match expected hash."
            exit 1
          fi

          sudo chown $USER:$GROUP /tmp/system.xsa

          pushd hw/fpga

          if [[ "$IMAGE_VARIANT" == "subsystem-2.0" || "$IMAGE_VARIANT" == "subsystem-2.1" ]]; then
            export BUILD_SS=true
          fi


          ./create_boot_bin.sh /tmp/system.xsa

          # TODO(clundin): Not all of these artifacts are required.
          tar -C petalinux_project/images/linux -cvzf vck190-kernel.tar.gz BOOT.BIN Image image.ub boot.scr system.dts system.dtb
          mv vck190-kernel.tar.gz /tmp/vck190-kernel-${IMAGE_VARIANT}.tar.gz

          IO_MODULE_PATH=$(find . -name 'io-module.ko')
          mv $IO_MODULE_PATH /tmp/io-module-${IMAGE_VARIANT}.ko
          popd

      - name: 'Upload kernel artifact'
        uses: actions/upload-artifact@v4
        with:
          name: vck190-kernel-${{ matrix.image_variant}}
          path: /tmp/vck190-kernel-${{ matrix.image_variant }}.tar.gz
          retention-days: 1

      - name: 'Upload kernel module artifact'
        uses: actions/upload-artifact@v4
        with:
          name: vck190-kernel-module-${{ matrix.image_variant}}
          path: /tmp/io-module-${{ matrix.image_variant }}.ko
          retention-days: 1

  build_sd_image:
    runs-on: ubuntu-22.04
    needs: [build_kernel]
    strategy:
      matrix:
        image_variant: [core, subsystem-2.0, subsystem-2.1]
    env:
      IMAGE_VARIANT: ${{ matrix.image_variant }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: 'Download kernel artifact'
        uses: actions/download-artifact@v4
        with:
          name: vck190-kernel-${{ matrix.image_variant }}
          path: /tmp/vck190-kernel/

      - name: 'Download kernel module artifact'
        uses: actions/download-artifact@v4
        with:
          name: vck190-kernel-module-${{ matrix.image_variant }}
          path: /tmp/vck190-kmod/

      - name: Install pre-requisites
        run: |
          sudo apt-get update
          sudo apt-get -y install debootstrap binfmt-support qemu-user-static u-boot-tools gcc-aarch64-linux-gnu
          rustup target add aarch64-unknown-linux-gnu

      - name: Build SD image
        run: |
          cd ci-tools/fpga-image
          sudo KERNEL_ARCHIVE=/tmp/vck190-kernel/vck190-kernel-${IMAGE_VARIANT}.tar.gz KERNEL_MODULE_ARCHIVE=/tmp/vck190-kmod/io-module-${IMAGE_VARIANT}.ko bash build.sh

      - name: 'Upload image as artifact'
        uses: actions/upload-artifact@v4
        with:
          name: caliptra-fpga-image-${{ matrix.image_variant }}
          path: ci-tools/fpga-image/out/image.img
          retention-days: 90
