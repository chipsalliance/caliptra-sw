name: RTL Repo Sync

on:
  workflow_call:
  workflow_dispatch:
permissions:
  contents: write
  pull-requests: write

jobs:
  update-rtl:
    name: Update RTL Submodule
    runs-on: ubuntu-22.04
    outputs:
      branch_name: ${{ steps.branch.outputs.branch }}
      ci_checks_needed: ${{ steps.status.outputs.status }}
      branch_base_ref: ${{ steps.commit.outputs.branch_base_ref }}
    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
        with:
          ref: 'main'

      - name: Update the Caliptra RTL submodule and rebuild registers
        run: |
          echo "RTL-REPO-SYNC: release_ref=$(git rev-parse HEAD)"

          # Submodules need to be initialized here rather than actions/checkout
          # so that git can find the main_1.0 branch when updating the
          # hw/1.0/rtl submodule below. Otherwise, it hides the non-main
          # branches.
          git submodule update --init

          git submodule update --remote hw/latest/rtl
          git submodule update --remote hw/1.0/rtl

          ./registers/update.sh

      - name: Find available branch name
        id: branch
        run: |
          BRANCH_BASE=ci_rtl_${{ steps.date.outputs.date }}
          INDEX=0
          while git ls-remote --exit-code --heads origin ${BRANCH_BASE}_${INDEX}
          do
              ((INDEX+=1))
          done
          echo "branch=${BRANCH_BASE}_${INDEX}" >> $GITHUB_OUTPUT

      - name: Run git status
        id: status
        run: echo "status=$(git status --porcelain | head -1)" >> $GITHUB_OUTPUT

      # If there's a new HW release (submodule has been updated), add a commit and generate a PR
      - name: Commit changes
        id: commit
        if: ${{ steps.status.outputs.status }}
        run: |
          git config --global user.name "GitHub CI"
          git config --global user.email "username@users.noreply.github.com"
          echo "branch_base_ref=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          git checkout -b ${{ steps.branch.outputs.branch }}
          git commit -a -m "CI: Update Caliptra RTL"
          git push -u origin ${{ steps.branch.outputs.branch }}

      - name: Create Pull Request
        id: pull_request
        if: ${{ steps.status.outputs.status }}
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const result = await github.rest.pulls.create({
              title: 'CI: Update Caliptra RTL',
              owner,
              repo,
              head: '${{ steps.branch.outputs.branch }}',
              base: 'main',
              body: [
                'This PR is auto-generated by',
                '[actions/github-script](https://github.com/actions/github-script).'
              ].join('\n')
            });
            github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: result.data.number,
              labels: ['feature', 'automated pr']
            });

      # In future this will be replaced by an automatic merge of the PR
