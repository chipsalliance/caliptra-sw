# docs: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions

name: Build and Test

on:
  push:
    branches: ["main"]
  pull_request:

  workflow_call:
  workflow_dispatch:

jobs:
  build_and_test:
    runs-on: ubuntu-24.04

    env:
      CARGO_INCREMENTAL: 0
      SCCACHE_VERSION: 0.10.0
      SCCACHE_GHA_CACHE_TO: sccache-caliptra-sw
      SCCACHE_GHA_CACHE_FROM: sccache-caliptra-sw
      SCCACHE_GHA_ENABLED: "on"
      # CPTRA_COVERAGE_PATH: /tmp

      # Compiler warnings should fail to compile
      EXTRA_CARGO_CONFIG: "target.'cfg(all())'.rustflags = [\"-Dwarnings\"]"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Test commit name
        run: |
          echo "Build-Test: release_ref=$(git rev-parse HEAD)"

      - name: Pull dpe submodule
        run: |
          git submodule update --init dpe

      - name: Install required packages
        run: |
          sudo apt-get update -qy && sudo apt-get install libftdi1-dev libusb-1.0-0-dev golang-1.21-go

      - name: Check that Cargo.lock doesn't need to be updated
          # Note: this isn't the same as checking that Cargo.lock is up to date
          # (cargo update --locked), which makes sure that every package is the
          # latest published version. This is just ensuring that every
          # dependency has an entry in Cargo.lock that is compatible with the
          # version requirements in all Cargo.toml files.
        run: |
          # This works because cargo tree requires a Cargo.lock with no required updates
          cargo tree --locked > /dev/null || (
            echo "Please include required changes to Cargo.lock in your pull request"
            # Without the --locked flag, cargo will do the minimal possible update to Cargo.lock
            cargo tree > /dev/null 2> /dev/null
            # Print out the differences to ease debugging
            git diff Cargo.lock
            exit 1
          )

      - name: Check source-code formatting (run "cargo fmt" if this fails)
        run: |
          cargo fmt --check --all

      - name: Check license headers
        run: |
          cargo run -p caliptra-file-header-fix --locked -- --check

      - name: Build
        run: |
          cargo --config "$EXTRA_CARGO_CONFIG" build --locked
          CARGO_TARGET_DIR=target cargo --config "$EXTRA_CARGO_CONFIG" build --locked --manifest-path ci-tools/fpga-boss/Cargo.toml
          drivers/test-fw/build.sh
          (cd fmc && ./build.sh)
          (cd runtime && ./build.sh)
          (cd rom/dev && ./build.sh)

      - name: Build with OpenSSL
        run: |
          for proj in caliptra-auth-manifest-app caliptra-builder caliptra-image-crypto caliptra-image-app; do
            cargo build -p $proj --locked --no-default-features --features openssl
          done

      - name: Build with RustCrypto
        run: |
          for proj in caliptra-auth-manifest-app caliptra-builder caliptra-image-crypto caliptra-image-app; do
            cargo build -p $proj --locked --no-default-features --features rustcrypto
          done

      - name: Build hw-model with fpga_realtime, fpga_subsystem, itrng, coverage
        run: |
          # Point `CPTRA_MCU_ROM` at a known file to satisfy a build time dependency.
          export CPTRA_MCU_ROM="${PWD}/Cargo.toml"
          for feature in fpga_realtime fpga_subsystem itrng coverage; do
            echo "Building with $feature"
            cargo build --locked --features $feature
          done

      # Clippy needs to build crates as part of the check, so do it after the
      # build.
      - name: Clippy lint check
        run: |
          # Clippy doesn't look at --config, so manually set RUSTFLAGS to the
          # same as the build steps to avoid invalidating the cargo cache.
          RUSTFLAGS="-Dwarnings" cargo clippy --locked --all-targets -- -D warnings
          CARGO_TARGET_DIR=target RUSTFLAGS="-Dwarnings" cargo clippy --locked --all-targets --manifest-path ci-tools/fpga-boss/Cargo.toml -- -D warnings

      # As fuzzing targets are not part of the workspace, perform their tests explicitly.
      - name: Build test fuzzing targets
        # Intermittently fails and is too slow
        if: false
        run: |
          rustup toolchain install nightly-2023-04-15
          cargo +nightly-2023-04-15 install cargo-fuzz cargo-afl
          for target in dpe/dpe/fuzz/ drivers/fuzz/ image/verify/fuzz/ x509/fuzz/; do
            pushd $target; \
            cargo fmt --check; \
            # TODO: Depends on https://github.com/chipsalliance/caliptra-sw/issues/681
            #cargo clippy; \
            cargo +nightly-2023-04-15 fuzz build --features libfuzzer-sys; \
            cargo +nightly-2023-04-15 afl build --features afl; \
            popd; \
          done
          for target in drivers/fuzz/ image/verify/fuzz/; do
            pushd $target; \
            cargo +nightly-2023-04-15 fuzz build --features libfuzzer-sys,struct-aware; \
            cargo +nightly-2023-04-15 afl build --features afl,struct-aware; \
            popd; \
          done

      - name: Run tests
        run: |
          CPTRA_COVERAGE_PATH=/tmp cargo --config "$EXTRA_CARGO_CONFIG" test --locked
          CPTRA_COVERAGE_PATH=/tmp cargo --config "$EXTRA_CARGO_CONFIG" run --manifest-path ./coverage/Cargo.toml

          CARGO_TARGET_DIR=target cargo --config "$EXTRA_CARGO_CONFIG" test --locked --manifest-path ci-tools/fpga-boss/Cargo.toml

      - name: Run emulator conformance tests
        run: |
          sudo apt-get install gcc-riscv64-unknown-elf binutils-riscv64-unknown-elf
          (cd /tmp/ && git clone --depth 1 --branch old-framework-2.x https://github.com/riscv-non-isa/riscv-arch-test)
          cargo --config "$EXTRA_CARGO_CONFIG" run --locked -p compliance-test -- --test_root_path /tmp/riscv-arch-test

      - name: ROM Makefile
        run: |
          (cd rom/dev && DEVICE_LIFECYCLE=unprovisioned make run)
          (cd rom/dev && DEVICE_LIFECYCLE=manufacturing make run)
          (cd rom/dev && DEVICE_LIFECYCLE=production make run)
          (cd rom/dev && DEVICE_LIFECYCLE=unprovisioned make run-active)
          (cd rom/dev && DEVICE_LIFECYCLE=manufacturing make run-active)
          (cd rom/dev && DEVICE_LIFECYCLE=production make run-active)

      - name: Caliptra HW-Model C Binding Smoke Test
        run: |
          git submodule update --init
          (cd hw-model/c-binding/examples && make run)

      - name: Caliptra C API Hwmodel Integration Test
        run: |
          (cd libcaliptra/examples/hwmodel && make && ./hwmodel)
      - name: DPE Verification Tests
        run: |
          (cd test/dpe_verification && make run)
