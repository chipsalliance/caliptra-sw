# docs: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions

name: Build and Test

on:
  push:
    branches: ["main"]
  pull_request:

  workflow_dispatch:

jobs:
  build_and_test:
    runs-on: ubuntu-22.04

    env:
      CARGO_INCREMENTAL: 0
      SCCACHE_VERSION: 0.3.3
      SCCACHE_GHA_CACHE_TO: sccache-caliptra-sw
      SCCACHE_GHA_CACHE_FROM: sccache-caliptra-sw

      # Change this to a new random value if you suspect the cache is corrupted
      SCCACHE_C_CUSTOM_CACHE_BUSTER: c73dbfa95cb3

    steps:
      - uses: actions/checkout@v3

      - name: Cache Cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry/index
          key: cargo-index-${{ env.SCCACHE_C_CUSTOM_CACHE_BUSTER }}-${{ hashFiles('Cargo.lock') }}

      - name: Restore sccache binary
        uses: actions/cache/restore@v3
        id: sccache_bin_restore
        with:
          path: ~/.cargo/bin/sccache
          key: sccache-bin-${{ env.SCCACHE_VERSION }}-${{ env.SCCACHE_C_CUSTOM_CACHE_BUSTER }}

      - name: Install sccache
        if: steps.sccache_bin_restore.outputs.cache-hit != 'true'
        run: |
          cargo install sccache --version ${SCCACHE_VERSION} --no-default-features --features=gha

      # Save the sccache binary immediately so we can reuse it in future runs
      # even if the rest of the current run fails.
      - name: Save sccache binary
        uses: actions/cache/save@v3
        if: steps.sccache_bin_restore.outputs.cache-hit != 'true'
        with:
          path: ~/.cargo/bin/sccache
          key: ${{ steps.sccache_bin_restore.outputs.cache-primary-key }}

      - name: Configure sccache
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('RUSTC_WRAPPER', process.env.HOME + '/.cargo/bin/sccache');
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Update to latest stable Rust toolchain
        run: |
          rm -f ~/.cargo/bin/rustfmt ~/.cargo/bin/cargo-fmt
          rustup update

      - name: Check source-code formatting (run "cargo fmt" if this fails)
        run: |
          cargo fmt --check --all

      - name: Check license headers
        run: |
          cargo run -p file-header-fix -- --check

      - name: Install risv32imc target
        run: |
          rustup target add riscv32imc-unknown-none-elf

      - name: Install cargo binutils
        run: |
          cargo install cargo-binutils
          rustup component add llvm-tools-preview

      - name: Install cargo make
        run: |
          cargo install cargo-make

      - name: Build
        run: |
          export RUSTFLAGS="-D warnings"
          cargo build
          cargo build --release
          drivers/test-fw/build.sh
          (cd fmc && cargo make build)
          sccache --show-stats

      - name: Run unit tests
        run: |
          export RUSTFLAGS="-D warnings"
          cargo test
          cargo test --release
          sccache --show-stats

      - name: Install caliptra-emu
        run: |
          cargo install --path sw-emulator/app
          sccache --show-stats

      - name: Run tests inside emulator
        run: |
          drivers/test-fw/test.sh
          (cd fmc && cargo make workflow)
          sccache --show-stats

      - name: Run emulator conformance tests
        run: |
          sudo apt-get install gcc-riscv64-unknown-elf binutils-riscv64-unknown-elf
          (cd /tmp/ && git clone --depth 1 --branch old-framework-2.x https://github.com/riscv-non-isa/riscv-arch-test)
          (cd sw-emulator/compliance-test && cargo run --release  -- --test_root_path /tmp/riscv-arch-test)

